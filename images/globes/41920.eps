%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: vector globe earth world icons.eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: Алексей Егоров
%%CreationDate: 11/11/2013
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.0 x256 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Microvector</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2013-11-11T08:50:33+04:00</xmp:MetadataDate>
         <xmp:ModifyDate>2013-11-11T08:50:33+04:00</xmp:ModifyDate>
         <xmp:CreateDate>2013-11-11T08:50:32+04:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A4VBbtNWhoBiqt9Qb+YYq&#xA;76g38wxV31Bv5hirvqDfzDFXfUG/mGKu+oN/MMVd9Qb+YYq76g38wxV31Bv5hiqHmhaJqHevTFVc&#xA;WDU3YVxVv6g38wxV31Bv5hirvqDfzDFXfUG/mGKu+oN/MMVd9Qb+YYq76g38wxV31Bv5hiq17FlU&#xA;kEbb4qpwW7TVoaAYqrfUG/mGKu+oN/MMVd9Qb+YYq76g38wxV31Bv5hirvqDfzDFXfUG/mGKu+oN&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:eaabcbb3-641a-644c-8ae9-3add765db2ed</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:eaabcbb3-641a-644c-8ae9-3add765db2ed</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>default</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:376e7865-3020-b147-a6ed-bf7162f2e25e</stRef:instanceID>
            <stRef:documentID>xmp.did:376e7865-3020-b147-a6ed-bf7162f2e25e</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:467918dd-93f0-ab4a-99f3-4671ccc4d993</stEvt:instanceID>
                  <stEvt:when>2013-10-17T16:28:05+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:376e7865-3020-b147-a6ed-bf7162f2e25e</stEvt:instanceID>
                  <stEvt:when>2013-10-17T16:57:53+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:eaabcbb3-641a-644c-8ae9-3add765db2ed</stEvt:instanceID>
                  <stEvt:when>2013-11-11T08:50:33+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=102 G=102 B=102</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>102</xmpG:red>
                           <xmpG:green>102</xmpG:green>
                           <xmpG:blue>102</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.14 .14 .14 rgb
f
7.00002 142 mo
7.00002 12 li
7.00002 9.23877 9.23877 7.00002 12 7.00002 cv
142 7.00002 li
144.761 7.00002 147 9.23877 147 12 cv
147 142 li
147 144.761 144.761 147 142 147 cv
12 147 li
9.23877 147 7.00002 144.761 7.00002 142 cv
.21 .21 .21 rgb
f
155 142 mo
155 12 li
155 9.23877 157.239 7.00002 160 7.00002 cv
290 7.00002 li
292.762 7.00002 295 9.23877 295 12 cv
295 142 li
295 144.761 292.762 147 290 147 cv
160 147 li
157.239 147 155 144.761 155 142 cv
f
302.275 142 mo
302.275 12 li
302.275 9.23877 304.514 7.00002 307.275 7.00002 cv
437.275 7.00002 li
440.037 7.00002 442.275 9.23877 442.275 12 cv
442.275 142 li
442.275 144.761 440.037 147 437.275 147 cv
307.275 147 li
304.514 147 302.275 144.761 302.275 142 cv
f
7.00002 290 mo
7.00002 160 li
7.00002 157.239 9.23877 155 12 155 cv
142 155 li
144.761 155 147 157.239 147 160 cv
147 290 li
147 292.762 144.761 295 142 295 cv
12 295 li
9.23877 295 7.00002 292.762 7.00002 290 cv
f
155 290 mo
155 160 li
155 157.239 157.239 155 160 155 cv
290 155 li
292.762 155 295 157.239 295 160 cv
295 290 li
295 292.762 292.762 295 290 295 cv
160 295 li
157.239 295 155 292.762 155 290 cv
f
302.275 290 mo
302.275 160 li
302.275 157.239 304.514 155 307.275 155 cv
437.275 155 li
440.037 155 442.275 157.239 442.275 160 cv
442.275 290 li
442.275 292.762 440.037 295 437.275 295 cv
307.275 295 li
304.514 295 302.275 292.762 302.275 290 cv
f
7.00002 438 mo
7.00002 308 li
7.00002 305.238 9.23877 303 12 303 cv
142 303 li
144.761 303 147 305.238 147 308 cv
147 438 li
147 440.762 144.761 443 142 443 cv
12 443 li
9.23877 443 7.00002 440.762 7.00002 438 cv
f
155 438 mo
155 308 li
155 305.238 157.239 303 160 303 cv
290 303 li
292.762 303 295 305.238 295 308 cv
295 438 li
295 440.762 292.762 443 290 443 cv
160 443 li
157.239 443 155 440.762 155 438 cv
f
302.275 438 mo
302.275 308 li
302.275 305.238 304.514 303 307.275 303 cv
437.275 303 li
440.037 303 442.275 305.238 442.275 308 cv
442.275 438 li
442.275 440.762 440.037 443 437.275 443 cv
307.275 443 li
304.514 443 302.275 440.762 302.275 438 cv
f
295 290.058 mo
295 290.057 295 290.057 295 290.057 cv
295 290.057 295 290.057 295 290.058 cv
295 290.041 mo
295 290.039 295 290.038 295 290.036 cv
295 290.038 295 290.039 295 290.041 cv
295 290.023 mo
295 290.021 295 290.02 295 290.018 cv
295 290.02 295 290.021 295 290.023 cv
159.942 155 mo
159.942 155 159.943 155 159.944 155 cv
159.943 155 159.942 155 159.942 155 cv
159.959 155 mo
159.961 155 159.962 155 159.964 155 cv
159.962 155 159.961 155 159.959 155 cv
159.977 155 mo
159.979 155 159.98 155 159.982 155 cv
159.98 155 159.979 155 159.977 155 cv
.278431 .278431 .278431 rgb
f
292.988 293.988 mo
293.615 293.152 294 292.125 294 291 cv
294 161 li
294 158.239 291.762 156 289 156 cv
159 156 li
157.875 156 156.848 156.385 156.013 157.013 cv
156.914 155.812 158.33 155.019 159.942 155 cv
159.942 155 159.943 155 159.944 155 cv
159.949 155 159.954 155 159.959 155 cv
159.961 155 159.962 155 159.964 155 cv
159.968 155 159.973 155 159.977 155 cv
159.979 155 159.98 155 159.982 155 cv
159.988 155 159.994 155 160 155 cv
290 155 li
292.762 155 295 157.239 295 160 cv
295 290 li
295 290 li
295 290.006 295 290.012 295 290.018 cv
295 290.02 295 290.021 295 290.023 cv
295 290.027 295 290.032 295 290.036 cv
295 290.038 295 290.039 295 290.041 cv
295 290.046 295 290.051 295 290.057 cv
295 290.057 295 290.057 295 290.058 cv
294.981 291.67 294.188 293.086 292.988 293.988 cv
.337255 .337255 .337255 rgb
f
147 438.058 mo
147 438.058 147 438.057 147 438.056 cv
147 438.057 147 438.058 147 438.058 cv
147 438.041 mo
147 438.039 147 438.038 147 438.036 cv
147 438.038 147 438.039 147 438.041 cv
147 438.023 mo
147 438.021 147 438.019 147 438.018 cv
147 438.02 147 438.021 147 438.023 cv
11.9417 303 mo
11.9424 303 11.9431 303 11.9438 303 cv
11.9431 303 11.9424 303 11.9417 303 cv
11.9591 303 mo
11.9606 303 11.9621 303 11.9636 303 cv
11.962 303 11.9606 303 11.9591 303 cv
11.9774 303 mo
11.9789 303 11.9804 303 11.982 303 cv
11.9804 303 11.9789 303 11.9774 303 cv
.278431 .278431 .278431 rgb
f
144.988 441.988 mo
145.615 441.152 146 440.125 146 439 cv
146 309 li
146 306.238 143.761 304 141 304 cv
11 304 li
9.87492 304 8.84786 304.385 8.01232 305.012 cv
8.91361 303.812 10.3297 303.019 11.9417 303 cv
11.9424 303 11.9431 303 11.9438 303 cv
11.9489 303 11.954 303 11.9591 303 cv
11.9606 303 11.962 303 11.9636 303 cv
11.9681 303 11.9728 303 11.9774 303 cv
11.9789 303 11.9804 303 11.982 303 cv
11.988 303 11.994 303 12 303 cv
142 303 li
144.761 303 147 305.238 147 308 cv
147 438 li
147 438 li
147 438.006 147 438.012 147 438.018 cv
147 438.019 147 438.021 147 438.023 cv
147 438.027 147 438.032 147 438.036 cv
147 438.038 147 438.039 147 438.041 cv
147 438.046 147 438.051 147 438.056 cv
147 438.057 147 438.058 147 438.058 cv
146.981 439.67 146.188 441.086 144.988 441.988 cv
.337255 .337255 .337255 rgb
f
295 438.058 mo
295 438.057 295 438.057 295 438.057 cv
295 438.057 295 438.057 295 438.058 cv
295 438.041 mo
295 438.039 295 438.038 295 438.036 cv
295 438.038 295 438.039 295 438.041 cv
295 438.023 mo
295 438.021 295 438.019 295 438.018 cv
295 438.02 295 438.021 295 438.023 cv
159.942 303 mo
159.942 303 159.943 303 159.944 303 cv
159.943 303 159.942 303 159.942 303 cv
159.959 303 mo
159.961 303 159.962 303 159.964 303 cv
159.962 303 159.961 303 159.959 303 cv
159.977 303 mo
159.979 303 159.98 303 159.982 303 cv
159.98 303 159.979 303 159.977 303 cv
.278431 .278431 .278431 rgb
f
292.988 441.988 mo
293.615 441.152 294 440.125 294 439 cv
294 309 li
294 306.238 291.762 304 289 304 cv
159 304 li
157.875 304 156.848 304.385 156.012 305.012 cv
156.914 303.812 158.33 303.019 159.942 303 cv
159.942 303 159.943 303 159.944 303 cv
159.949 303 159.954 303 159.959 303 cv
159.961 303 159.962 303 159.964 303 cv
159.968 303 159.973 303 159.977 303 cv
159.979 303 159.98 303 159.982 303 cv
159.988 303 159.994 303 160 303 cv
290 303 li
292.762 303 295 305.238 295 308 cv
295 438 li
295 438 li
295 438.006 295 438.012 295 438.018 cv
295 438.019 295 438.021 295 438.023 cv
295 438.027 295 438.032 295 438.036 cv
295 438.038 295 438.039 295 438.041 cv
295 438.046 295 438.051 295 438.057 cv
295 438.057 295 438.057 295 438.058 cv
294.981 439.67 294.188 441.086 292.988 441.988 cv
.337255 .337255 .337255 rgb
f
147 290.058 mo
147 290.058 147 290.057 147 290.056 cv
147 290.057 147 290.058 147 290.058 cv
147 290.041 mo
147 290.039 147 290.038 147 290.036 cv
147 290.038 147 290.039 147 290.041 cv
147 290.023 mo
147 290.021 147 290.02 147 290.018 cv
147 290.02 147 290.021 147 290.023 cv
11.9416 155 mo
11.9424 155 11.9431 155 11.9439 155 cv
11.9431 155 11.9424 155 11.9416 155 cv
11.9591 155 mo
11.9606 155 11.9621 155 11.9636 155 cv
11.962 155 11.9606 155 11.9591 155 cv
11.9774 155 mo
11.9789 155 11.9804 155 11.982 155 cv
11.9804 155 11.9789 155 11.9774 155 cv
.278431 .278431 .278431 rgb
f
144.988 293.988 mo
145.615 293.152 146 292.125 146 291 cv
146 161 li
146 158.239 143.761 156 141 156 cv
11 156 li
9.87492 156 8.84798 156.385 8.01243 157.013 cv
8.91372 155.812 10.3296 155.019 11.9416 155 cv
11.9424 155 11.9431 155 11.9439 155 cv
11.9489 155 11.9541 155 11.9591 155 cv
11.9606 155 11.962 155 11.9636 155 cv
11.9681 155 11.9728 155 11.9774 155 cv
11.9789 155 11.9804 155 11.982 155 cv
11.988 155 11.994 155 12 155 cv
142 155 li
144.761 155 147 157.239 147 160 cv
147 290 li
147 290 li
147 290.006 147 290.012 147 290.018 cv
147 290.02 147 290.021 147 290.023 cv
147 290.027 147 290.032 147 290.036 cv
147 290.038 147 290.039 147 290.041 cv
147 290.046 147 290.051 147 290.056 cv
147 290.057 147 290.058 147 290.058 cv
146.981 291.67 146.188 293.086 144.988 293.988 cv
.337255 .337255 .337255 rgb
f
147 142.058 mo
147 142.058 147 142.057 147 142.056 cv
147 142.057 147 142.058 147 142.058 cv
147 142.041 mo
147 142.039 147 142.038 147 142.036 cv
147 142.038 147 142.039 147 142.041 cv
147 142.023 mo
147 142.021 147 142.02 147 142.018 cv
147 142.02 147 142.021 147 142.023 cv
11.9416 7.00036 mo
11.9424 7.00035 11.9431 7.00034 11.9439 7.00033 cv
11.9431 7.00034 11.9424 7.00035 11.9416 7.00036 cv
11.9591 7.00019 mo
11.9606 7.00018 11.9621 7.00016 11.9636 7.00015 cv
11.962 7.00016 11.9606 7.00018 11.9591 7.00019 cv
11.9774 7.00008 mo
11.9789 7.00007 11.9804 7.00006 11.982 7.00005 cv
11.9804 7.00006 11.9789 7.00007 11.9774 7.00008 cv
.278431 .278431 .278431 rgb
f
144.988 145.988 mo
145.615 145.152 146 144.125 146 143 cv
146 13 li
146 10.2388 143.761 8.00004 141 8.00004 cv
11 8.00004 li
9.87492 8.00004 8.84798 8.3852 8.01243 9.01245 cv
8.91372 7.81184 10.3296 7.01906 11.9416 7.00036 cv
11.9424 7.00035 11.9431 7.00034 11.9439 7.00033 cv
11.9489 7.00028 11.9541 7.00023 11.9591 7.00019 cv
11.9606 7.00018 11.962 7.00016 11.9636 7.00015 cv
11.9681 7.00012 11.9728 7.0001 11.9774 7.00008 cv
11.9789 7.00007 11.9804 7.00006 11.982 7.00005 cv
11.988 7.00003 11.994 7.00002 12 7.00002 cv
142 7.00002 li
144.761 7.00002 147 9.23877 147 12 cv
147 142 li
147 142 li
147 142.006 147 142.012 147 142.018 cv
147 142.02 147 142.021 147 142.023 cv
147 142.027 147 142.032 147 142.036 cv
147 142.038 147 142.039 147 142.041 cv
147 142.046 147 142.051 147 142.056 cv
147 142.057 147 142.058 147 142.058 cv
146.981 143.67 146.188 145.086 144.988 145.988 cv
.337255 .337255 .337255 rgb
f
442.275 290.058 mo
442.275 290.057 442.275 290.057 442.275 290.057 cv
442.275 290.057 442.275 290.057 442.275 290.058 cv
442.275 290.041 mo
442.275 290.039 442.275 290.038 442.275 290.036 cv
442.275 290.038 442.275 290.039 442.275 290.041 cv
442.275 290.023 mo
442.275 290.021 442.275 290.02 442.275 290.018 cv
442.275 290.02 442.275 290.021 442.275 290.023 cv
307.217 155 mo
307.218 155 307.218 155 307.219 155 cv
307.218 155 307.218 155 307.217 155 cv
307.234 155 mo
307.236 155 307.237 155 307.239 155 cv
307.237 155 307.236 155 307.234 155 cv
307.253 155 mo
307.254 155 307.256 155 307.257 155 cv
307.256 155 307.254 155 307.253 155 cv
.278431 .278431 .278431 rgb
f
440.263 293.988 mo
440.89 293.152 441.275 292.125 441.275 291 cv
441.275 161 li
441.275 158.239 439.037 156 436.275 156 cv
306.275 156 li
305.15 156 304.123 156.385 303.288 157.012 cv
304.189 155.812 305.605 155.019 307.217 155 cv
307.218 155 307.218 155 307.219 155 cv
307.224 155 307.229 155 307.234 155 cv
307.236 155 307.237 155 307.239 155 cv
307.243 155 307.248 155 307.253 155 cv
307.254 155 307.256 155 307.257 155 cv
307.263 155 307.269 155 307.275 155 cv
437.275 155 li
440.037 155 442.275 157.239 442.275 160 cv
442.275 290 li
442.275 290 li
442.275 290.006 442.275 290.012 442.275 290.018 cv
442.275 290.02 442.275 290.021 442.275 290.023 cv
442.275 290.027 442.275 290.032 442.275 290.036 cv
442.275 290.038 442.275 290.039 442.275 290.041 cv
442.275 290.046 442.275 290.051 442.275 290.057 cv
442.275 290.057 442.275 290.057 442.275 290.058 cv
442.256 291.67 441.464 293.086 440.263 293.988 cv
.337255 .337255 .337255 rgb
f
442.275 142.058 mo
442.275 142.057 442.275 142.057 442.275 142.057 cv
442.275 142.057 442.275 142.057 442.275 142.058 cv
442.275 142.041 mo
442.275 142.039 442.275 142.038 442.275 142.036 cv
442.275 142.038 442.275 142.039 442.275 142.041 cv
442.275 142.023 mo
442.275 142.021 442.275 142.02 442.275 142.018 cv
442.275 142.02 442.275 142.021 442.275 142.023 cv
307.217 7.00036 mo
307.218 7.00035 307.218 7.00034 307.219 7.00033 cv
307.218 7.00034 307.218 7.00035 307.217 7.00036 cv
307.234 7.00019 mo
307.236 7.00018 307.237 7.00016 307.239 7.00015 cv
307.237 7.00016 307.236 7.00018 307.234 7.00019 cv
307.253 7.00008 mo
307.254 7.00007 307.256 7.00006 307.257 7.00005 cv
307.256 7.00006 307.254 7.00007 307.253 7.00008 cv
.278431 .278431 .278431 rgb
f
440.263 145.988 mo
440.89 145.152 441.275 144.125 441.275 143 cv
441.275 13 li
441.275 10.2388 439.037 8.00004 436.275 8.00004 cv
306.275 8.00004 li
305.15 8.00004 304.123 8.3852 303.288 9.01234 cv
304.189 7.81184 305.605 7.01906 307.217 7.00036 cv
307.218 7.00035 307.218 7.00034 307.219 7.00033 cv
307.224 7.00028 307.229 7.00023 307.234 7.00019 cv
307.236 7.00018 307.237 7.00016 307.239 7.00015 cv
307.243 7.00012 307.248 7.0001 307.253 7.00008 cv
307.254 7.00007 307.256 7.00006 307.257 7.00005 cv
307.263 7.00003 307.269 7.00002 307.275 7.00002 cv
437.275 7.00002 li
440.037 7.00002 442.275 9.23877 442.275 12 cv
442.275 142 li
442.275 142 li
442.275 142.006 442.275 142.012 442.275 142.018 cv
442.275 142.02 442.275 142.021 442.275 142.023 cv
442.275 142.027 442.275 142.032 442.275 142.036 cv
442.275 142.038 442.275 142.039 442.275 142.041 cv
442.275 142.046 442.275 142.051 442.275 142.057 cv
442.275 142.057 442.275 142.057 442.275 142.058 cv
442.256 143.67 441.464 145.086 440.263 145.988 cv
.337255 .337255 .337255 rgb
f
295 142.058 mo
295 142.057 295 142.057 295 142.057 cv
295 142.057 295 142.057 295 142.058 cv
295 142.041 mo
295 142.039 295 142.038 295 142.036 cv
295 142.038 295 142.039 295 142.041 cv
295 142.023 mo
295 142.021 295 142.02 295 142.018 cv
295 142.02 295 142.021 295 142.023 cv
159.942 7.00036 mo
159.942 7.00035 159.943 7.00034 159.944 7.00033 cv
159.943 7.00034 159.942 7.00035 159.942 7.00036 cv
159.959 7.00019 mo
159.961 7.00018 159.962 7.00016 159.964 7.00015 cv
159.962 7.00016 159.961 7.00018 159.959 7.00019 cv
159.977 7.00008 mo
159.979 7.00007 159.98 7.00006 159.982 7.00005 cv
159.98 7.00006 159.979 7.00007 159.977 7.00008 cv
.278431 .278431 .278431 rgb
f
292.988 145.988 mo
293.615 145.152 294 144.125 294 143 cv
294 13 li
294 10.2388 291.762 8.00004 289 8.00004 cv
159 8.00004 li
157.875 8.00004 156.848 8.3852 156.013 9.01245 cv
156.914 7.81184 158.33 7.01906 159.942 7.00036 cv
159.942 7.00035 159.943 7.00034 159.944 7.00033 cv
159.949 7.00028 159.954 7.00023 159.959 7.00019 cv
159.961 7.00018 159.962 7.00016 159.964 7.00015 cv
159.968 7.00012 159.973 7.0001 159.977 7.00008 cv
159.979 7.00007 159.98 7.00006 159.982 7.00005 cv
159.988 7.00003 159.994 7.00002 160 7.00002 cv
290 7.00002 li
292.762 7.00002 295 9.23877 295 12 cv
295 142 li
295 142 li
295 142.006 295 142.012 295 142.018 cv
295 142.02 295 142.021 295 142.023 cv
295 142.027 295 142.032 295 142.036 cv
295 142.038 295 142.039 295 142.041 cv
295 142.046 295 142.051 295 142.057 cv
295 142.057 295 142.057 295 142.058 cv
294.981 143.67 294.188 145.086 292.988 145.988 cv
.337255 .337255 .337255 rgb
f
442.275 438.058 mo
442.275 438.057 442.275 438.057 442.275 438.057 cv
442.275 438.057 442.275 438.057 442.275 438.058 cv
442.275 438.041 mo
442.275 438.039 442.275 438.038 442.275 438.036 cv
442.275 438.038 442.275 438.039 442.275 438.041 cv
442.275 438.023 mo
442.275 438.021 442.275 438.019 442.275 438.018 cv
442.275 438.02 442.275 438.021 442.275 438.023 cv
307.217 303 mo
307.218 303 307.218 303 307.219 303 cv
307.218 303 307.218 303 307.217 303 cv
307.234 303 mo
307.236 303 307.237 303 307.239 303 cv
307.237 303 307.236 303 307.234 303 cv
307.253 303 mo
307.254 303 307.256 303 307.257 303 cv
307.256 303 307.254 303 307.253 303 cv
.278431 .278431 .278431 rgb
f
440.263 441.988 mo
440.89 441.152 441.275 440.125 441.275 439 cv
441.275 309 li
441.275 306.238 439.037 304 436.275 304 cv
306.275 304 li
305.15 304 304.123 304.385 303.288 305.012 cv
304.189 303.812 305.605 303.019 307.217 303 cv
307.218 303 307.218 303 307.219 303 cv
307.224 303 307.229 303 307.234 303 cv
307.236 303 307.237 303 307.239 303 cv
307.243 303 307.248 303 307.253 303 cv
307.254 303 307.256 303 307.257 303 cv
307.263 303 307.269 303 307.275 303 cv
437.275 303 li
440.037 303 442.275 305.238 442.275 308 cv
442.275 438 li
442.275 438 li
442.275 438.006 442.275 438.012 442.275 438.018 cv
442.275 438.019 442.275 438.021 442.275 438.023 cv
442.275 438.027 442.275 438.032 442.275 438.036 cv
442.275 438.038 442.275 438.039 442.275 438.041 cv
442.275 438.046 442.275 438.051 442.275 438.057 cv
442.275 438.057 442.275 438.057 442.275 438.058 cv
442.256 439.67 441.464 441.086 440.263 441.988 cv
.337255 .337255 .337255 rgb
f
107.282 107.283 mo
99.1941 115.371 88.4392 119.826 76.9998 119.826 cv
65.5608 119.826 54.8059 115.371 46.7175 107.283 cv
38.6286 99.1943 34.174 88.4394 34.174 77.0003 cv
34.174 65.5612 38.6286 54.8064 46.7175 46.7177 cv
46.9079 46.5279 47.1065 46.3498 47.2999 46.1637 cv
47.1481 46.6277 46.9821 47.0844 46.7139 47.4846 cv
46.0778 48.4334 45.015 48.8135 44.3481 49.7039 cv
43.7412 50.5151 43.2531 51.7424 43.0268 52.6535 cv
42.7821 53.6393 42.9308 54.8368 42.5838 55.8196 cv
42.1435 57.0682 41.3428 57.8107 41.4919 59.2582 cv
43.2316 59.7745 42.4768 56.6832 43.9431 56.5238 cv
44.4077 57.6781 44.1024 59.8244 43.9705 61.0821 cv
43.7883 62.8117 43.4511 63.2405 44.4841 64.7257 cv
45.3024 65.9024 45.5733 66.6894 47.1563 66.8755 cv
48.6081 67.0464 49.2104 67.7026 49.8149 69.1014 cv
50.9337 69.3398 51.6118 69.5253 51.7565 70.7654 cv
52.2415 71.0348 53.155 71.9093 53.6674 72.0443 cv
54.4097 72.239 55.6504 71.1814 56.3504 71.9963 cv
57.5199 73.3574 54.8689 76.9121 54.3951 78.1388 cv
53.7012 79.9347 53.5987 82.573 55.3006 83.8629 cv
56.1746 84.5246 57.1038 84.8421 57.3879 86.0432 cv
57.6509 87.1543 57.4466 88.0788 57.9386 89.1284 cv
58.7061 90.7656 60.4634 91.3087 61.7147 92.5615 cv
63.3552 94.2042 63.2431 96.3377 63.2431 98.6633 cv
63.2431 101.099 64.1684 102.951 64.4904 105.181 cv
64.8228 107.481 65.4987 109.613 65.9822 111.837 cv
66.3463 113.51 67.7891 116.039 69.8788 115.699 cv
70.0241 114.906 69.2022 114.285 69.0991 113.501 cv
69.0055 112.787 69.2059 112.045 69.0635 111.282 cv
68.782 109.77 68.7965 108.883 69.7985 107.569 cv
70.1525 107.105 70.6399 106.721 71.0057 106.256 cv
71.7142 105.354 71.1714 105.621 71.1411 104.633 cv
71.1033 103.4 71.4786 104.005 72.222 103.62 cv
72.6077 103.421 73.0361 102.818 73.3317 102.511 cv
73.9818 101.836 74.982 101.027 75.4837 100.226 cv
76.0481 99.3244 75.9778 98.0685 76.5562 97.138 cv
77.2203 96.0701 78.1611 96.0689 79.0892 95.3725 cv
80.2922 94.4706 79.7965 93.5207 80.0152 92.2836 cv
80.3822 90.2147 81.3188 87.934 82.6233 86.2864 cv
84.2647 84.212 84.9702 82.4495 82.9727 80.4583 cv
81.9862 79.4744 81.472 79.7365 80.162 79.3941 cv
79.1637 79.1325 78.2646 78.4033 77.2489 78.2781 cv
76.6404 78.2033 76.2804 78.4228 75.7242 78.2775 cv
75.2063 78.1418 75.269 77.825 74.7226 77.8311 cv
73.9076 77.8408 72.7682 79.5395 72.0804 78.4538 cv
71.6972 77.8487 72.8606 76.1768 72.808 75.3655 cv
72.7427 74.3706 72.3723 72.7486 71.3971 72.2037 cv
71.0282 71.9975 70.2087 71.9683 69.7568 71.7944 cv
69.225 71.5894 68.7041 71.261 68.2282 70.9551 cv
67.6076 70.5567 66.4067 69.8616 66.1313 69.1495 cv
65.368 69.119 64.8514 68.6988 64.0753 68.7091 cv
63.3793 68.7183 62.9171 69.04 62.1644 68.9554 cv
61.5052 68.8819 60.7949 68.3607 60.0842 68.4592 cv
59.6099 68.5255 58.9077 69.1397 58.4972 69.3721 cv
57.4137 69.9832 56.2601 70.4266 55.061 70.6504 cv
53.2049 70.9983 52.8716 70.2886 52.9811 68.5705 cv
52.7034 68.0159 li
53.3934 66.0989 52.1506 65.9645 50.7826 65.4992 cv
50.5934 64.1339 52.2726 63.159 51.5704 61.6617 cv
50.1497 61.5887 48.601 65.5862 47.3996 63.8553 cv
46.6069 62.7132 47.8116 59.5203 48.5092 58.5521 cv
49.2126 57.5766 51.7693 55.8177 52.9738 55.6663 cv
53.9113 55.5496 54.7314 55.9613 55.0918 56.7829 cv
55.4846 57.6788 54.9719 58.5235 55.0853 59.5391 cv
56.2832 59.2618 55.9733 57.7383 55.9207 56.9216 cv
55.8334 55.5575 56.5483 55.6596 57.245 54.6757 cv
57.8787 53.7798 57.9766 52.7575 58.7672 51.8914 cv
59.383 51.2164 60.1058 50.5054 60.7812 49.8838 cv
61.5517 49.1741 62.4208 49.2386 63.2117 48.7162 cv
64.4137 47.9213 62.8237 46.4447 64.595 46.556 cv
65.2251 46.5955 64.9125 46.9884 65.7466 46.7986 cv
66.1005 46.7177 66.7546 46.3905 67.1253 46.2403 cv
68.8157 45.5531 67.6173 45.3694 66.8416 44.4754 cv
65.8558 43.3381 67.2515 43.5376 68.2693 43.3661 cv
69.0161 43.2402 68.8586 42.9969 69.5145 43.436 cv
70.0926 43.8228 69.7529 44.3379 70.5928 44.3093 cv
72.1938 44.2552 71.0848 42.6509 70.7281 42.1181 cv
70.1178 41.2065 69.9618 40.5722 68.6728 40.5369 cv
68.795 40.1276 68.8115 39.5869 68.6308 39.1923 cv
67.5455 39.3351 67.3582 38.5463 66.5363 38.2356 cv
65.153 37.7119 65.375 38.8449 64.8094 39.6174 cv
64.2259 40.4146 63.1132 40.276 62.6851 41.2484 cv
62.2402 42.2593 62.6646 43.0328 61.0381 42.7561 cv
61.2595 42.1467 61.1831 41.3676 61.1421 40.7175 cv
60.6696 40.6573 60.2378 40.5375 59.8005 40.3952 cv
59.8024 38.7695 61.6034 38.6327 62.8271 38.4783 cv
64.1979 38.3049 64.6461 36.9104 65.8706 36.6756 cv
67.0131 36.4561 67.8317 38.3061 69.2405 37.2339 cv
70.0445 36.6221 69.6729 36.2633 69.3789 35.6734 cv
69.3001 35.5158 68.8948 35.1613 68.7871 35.0141 cv
68.76 34.9654 li
69.8521 34.7544 70.9571 34.5915 72.0703 34.4649 cv
72.2792 35.0725 72.7332 35.8078 72.9811 36.2286 cv
73.1626 36.5376 73.5053 36.745 73.6504 37.0843 cv
73.8155 37.4699 73.4265 37.9497 73.9143 38.2107 cv
74.6681 38.6133 76.8612 35.9914 77.3878 35.5657 cv
78.0562 35.0256 78.4737 34.7295 78.315 34.2065 cv
81.8403 34.3123 85.291 34.842 88.6113 35.7719 cv
88.8752 36.1027 89.1465 36.4439 89.418 36.821 cv
90.0022 37.6323 90.3714 38.3633 91.425 38.7239 cv
92.0347 38.9326 93.983 38.8948 93.1729 40.2875 cv
92.4251 41.572 91.598 39.888 91.2213 39.4835 cv
90.6989 38.9234 89.1541 38.3006 89.2028 39.5875 cv
89.2748 41.502 93.5886 41.1937 92.663 43.2968 cv
93.1793 43.6014 94.1998 44.1081 94.0319 44.8604 cv
93.8252 45.7909 92.614 45.1979 92.6377 46.3869 cv
92.6717 48.0709 94.5097 49.4575 96.2165 48.8512 cv
98.0364 48.2047 96.6659 45.6784 98.7507 45.4187 cv
99.573 45.3165 100.057 45.5567 100.793 46.14 cv
101.393 46.6149 101.779 47.6932 102.606 47.6093 cv
102.692 47.096 102.305 46.7293 102.239 46.2574 cv
102.879 46.4167 104.166 47.2164 104.533 47.7735 cv
105.089 48.6165 105.03 49.831 106.388 48.7436 cv
106.185 48.5763 106.083 48.2035 105.972 48.0709 cv
107.709 48.0764 108.922 48.7916 109.669 50.2992 cv
111.335 53.6655 107.243 50.9944 107.04 52.7478 cv
106.033 52.4278 105.585 51.6171 104.71 51.1318 cv
104.295 50.9019 103.528 51.0254 103.21 50.7918 cv
102.772 50.4714 102.88 49.8881 102.495 49.5718 cv
100.982 48.3312 97.5311 50.3351 96.1399 51.1355 cv
95.7628 51.3526 95.3614 51.3763 95.1041 51.7844 cv
94.6626 52.4838 95.2829 52.6632 95.1443 53.3158 cv
94.9472 54.2475 93.7309 54.6768 93.3633 55.4237 cv
92.4805 57.2172 94.2734 59.7843 94.0319 61.7754 cv
93.8982 62.8805 92.7058 64.0785 93.1635 65.003 cv
93.3605 65.4013 94.0477 65.7401 94.3102 66.2096 cv
94.5492 66.6359 94.6511 67.1954 94.9655 67.6375 cv
95.9854 69.0704 97.452 70.6644 98.6467 72.003 cv
99.3261 72.7632 100.25 72.9761 101.274 72.765 cv
102.119 72.5911 103.403 72.3077 104.186 71.9324 cv
105.233 71.4319 105.372 70.7246 106.472 71.202 cv
107.347 71.5827 108.118 72.6981 109.14 71.7743 cv
109.983 72.5978 109.048 74.0325 108.86 74.9495 cv
108.619 76.1258 109.084 77.1463 109.807 78.1461 cv
110.674 79.3454 110.878 79.5564 110.7 81.159 cv
110.562 82.4082 110.245 83.5503 109.976 84.7879 cv
109.72 85.9708 108.966 86.8703 109.005 88.1237 cv
109.043 89.2805 109.543 90.211 109.391 91.4517 cv
109.257 92.5451 109.19 93.8478 108.905 94.9188 cv
108.612 96.0153 107.838 96.9866 107.511 98.1086 cv
107.202 99.1766 107.289 100.559 108.036 101.437 cv
108.813 102.351 109.585 101.828 110.498 101.136 cv
112.296 99.7702 113.115 97.4531 114.31 95.6122 cv
115.53 93.731 116.76 92.0148 117.573 90.0656 cv
117.745 89.652 117.954 89.2446 118.166 88.8371 cv
116.192 95.7386 112.498 102.067 107.282 107.283 cv
cp
76.9998 32 mo
52.1476 32 31.9998 52.1475 31.9998 77.0003 cv
31.9998 101.853 52.1476 122 76.9998 122 cv
101.853 122 122 101.853 122 77.0003 cv
122 52.1475 101.853 32 76.9998 32 cv
cp
1 1 1 rgb
f
394.962 88.3986 mo
388.902 94.4578 380.845 97.7951 372.275 97.7951 cv
363.706 97.7951 355.649 94.4578 349.589 88.3986 cv
343.529 82.3389 340.192 74.2819 340.192 65.7122 cv
340.192 57.1426 343.529 49.0855 349.589 43.0258 cv
349.732 42.8837 349.88 42.7502 350.025 42.6108 cv
349.912 42.9584 349.787 43.3006 349.586 43.6004 cv
349.11 44.3111 348.314 44.5959 347.814 45.2629 cv
347.359 45.8707 346.994 46.7901 346.824 47.4726 cv
346.641 48.2112 346.752 49.1083 346.492 49.8446 cv
346.162 50.78 345.563 51.3362 345.674 52.4206 cv
346.978 52.8074 346.412 50.4915 347.511 50.3722 cv
347.859 51.2369 347.63 52.8448 347.531 53.787 cv
347.395 55.0827 347.142 55.404 347.916 56.5166 cv
348.529 57.3982 348.732 57.9878 349.918 58.1272 cv
351.005 58.2552 351.457 58.7468 351.91 59.7947 cv
352.748 59.9733 353.256 60.1123 353.364 61.0413 cv
353.727 61.2431 354.412 61.8983 354.796 61.9994 cv
355.352 62.1452 356.281 61.3529 356.806 61.9634 cv
357.682 62.9831 355.696 65.6461 355.341 66.5651 cv
354.821 67.9105 354.744 69.887 356.019 70.8533 cv
356.674 71.349 357.37 71.5869 357.583 72.4867 cv
357.78 73.3191 357.627 74.0117 357.995 74.798 cv
358.57 76.0246 359.887 76.4314 360.824 77.37 cv
362.053 78.6006 361.969 80.1989 361.969 81.9412 cv
361.969 83.7659 362.663 85.1532 362.904 86.824 cv
363.153 88.5471 363.659 90.1445 364.021 91.8102 cv
364.294 93.0636 365.375 94.9581 366.94 94.7034 cv
367.049 94.1097 366.434 93.6441 366.356 93.0572 cv
366.286 92.5223 366.436 91.9665 366.33 91.3947 cv
366.119 90.262 366.13 89.5973 366.88 88.6127 cv
367.146 88.2655 367.511 87.9776 367.785 87.6291 cv
368.316 86.9534 367.909 87.1538 367.886 86.4135 cv
367.858 85.4895 368.139 85.9428 368.696 85.6549 cv
368.985 85.5054 369.306 85.0535 369.527 84.8238 cv
370.014 84.3176 370.764 83.7122 371.139 83.1117 cv
371.562 82.4364 371.51 81.4956 371.943 80.7985 cv
372.44 79.9984 373.145 79.9975 373.841 79.4758 cv
374.742 78.8001 374.37 78.0885 374.534 77.1618 cv
374.809 75.6118 375.511 73.9033 376.488 72.669 cv
377.718 71.1149 378.246 69.7945 376.75 68.3028 cv
376.011 67.5657 375.626 67.762 374.644 67.5055 cv
373.896 67.3096 373.223 66.7633 372.462 66.6695 cv
372.006 66.6134 371.736 66.7779 371.32 66.669 cv
370.932 66.5674 370.979 66.33 370.569 66.3346 cv
369.959 66.3419 369.105 67.6144 368.59 66.8011 cv
368.303 66.3478 369.174 65.0953 369.135 64.4875 cv
369.086 63.7422 368.809 62.527 368.078 62.1188 cv
367.802 61.9643 367.188 61.9425 366.849 61.8121 cv
366.451 61.6586 366.06 61.4126 365.704 61.1834 cv
365.239 60.885 364.339 60.3642 364.133 59.8307 cv
363.561 59.8079 363.174 59.4931 362.593 59.5008 cv
362.071 59.5077 361.725 59.7487 361.161 59.6853 cv
360.667 59.6302 360.135 59.2398 359.603 59.3136 cv
359.247 59.3632 358.721 59.8234 358.414 59.9975 cv
357.602 60.4553 356.738 60.7875 355.84 60.9551 cv
354.449 61.2158 354.199 60.6841 354.281 59.397 cv
354.074 58.9815 li
354.59 57.5453 353.659 57.4446 352.634 57.0961 cv
352.493 56.0733 353.751 55.3429 353.225 54.2212 cv
352.16 54.1665 351 57.1613 350.1 55.8646 cv
349.506 55.0089 350.409 52.617 350.931 51.8917 cv
351.458 51.1609 353.374 49.8432 354.276 49.7298 cv
354.978 49.6423 355.593 49.9507 355.863 50.5662 cv
356.157 51.2374 355.773 51.8702 355.858 52.6311 cv
356.755 52.4233 356.523 51.282 356.484 50.6701 cv
356.418 49.6482 356.954 49.7247 357.476 48.9876 cv
357.951 48.3164 358.024 47.5506 358.616 46.9018 cv
359.078 46.396 359.619 45.8634 360.125 45.3978 cv
360.702 44.8661 361.353 44.9144 361.946 44.523 cv
362.846 43.9275 361.655 42.8213 362.982 42.9047 cv
363.454 42.9343 363.22 43.2286 363.845 43.0864 cv
364.11 43.0258 364.6 42.7807 364.878 42.6682 cv
366.144 42.1533 365.246 42.0158 364.665 41.346 cv
363.927 40.494 364.972 40.6435 365.735 40.515 cv
366.294 40.4207 366.176 40.2384 366.668 40.5674 cv
367.101 40.8571 366.846 41.243 367.475 41.2216 cv
368.675 41.1811 367.844 39.9792 367.577 39.5801 cv
367.12 38.8971 367.003 38.4219 366.037 38.3954 cv
366.129 38.0888 366.141 37.6838 366.006 37.3881 cv
365.193 37.4951 365.052 36.9042 364.436 36.6714 cv
363.4 36.2791 363.566 37.1279 363.143 37.7066 cv
362.706 38.3039 361.872 38.2 361.551 38.9285 cv
361.218 39.6858 361.536 40.2653 360.317 40.058 cv
360.483 39.6015 360.426 39.0178 360.395 38.5308 cv
360.041 38.4857 359.718 38.3959 359.39 38.2893 cv
359.392 37.0714 360.741 36.9689 361.658 36.8532 cv
362.685 36.7233 363.02 35.6786 363.938 35.5028 cv
364.794 35.3383 365.407 36.7243 366.462 35.921 cv
367.065 35.4627 366.786 35.1938 366.566 34.7519 cv
366.507 34.6339 366.203 34.3683 366.123 34.258 cv
366.102 34.2216 li
366.92 34.0635 367.748 33.9414 368.582 33.8466 cv
368.739 34.3018 369.079 34.8526 369.265 35.1679 cv
369.401 35.3994 369.657 35.5547 369.766 35.8089 cv
369.89 36.0978 369.598 36.4573 369.964 36.6527 cv
370.528 36.9544 372.171 34.9902 372.566 34.6713 cv
373.067 34.2667 373.379 34.0448 373.261 33.653 cv
375.902 33.7322 378.487 34.1291 380.974 34.8257 cv
381.172 35.0736 381.375 35.3292 381.578 35.6116 cv
382.016 36.2195 382.293 36.7671 383.082 37.0373 cv
383.539 37.1936 384.998 37.1653 384.391 38.2086 cv
383.831 39.1709 383.212 37.9093 382.929 37.6063 cv
382.538 37.1867 381.381 36.7202 381.417 37.6842 cv
381.471 39.1185 384.703 38.8875 384.009 40.463 cv
384.396 40.6913 385.161 41.0708 385.035 41.6344 cv
384.88 42.3315 383.973 41.8873 383.99 42.778 cv
384.016 44.0396 385.393 45.0784 386.672 44.6241 cv
388.035 44.1398 387.008 42.2472 388.57 42.0527 cv
389.186 41.9761 389.549 42.1561 390.1 42.593 cv
390.55 42.9489 390.839 43.7566 391.458 43.6938 cv
391.523 43.3093 391.233 43.0345 391.183 42.681 cv
391.663 42.8003 392.627 43.3995 392.902 43.8168 cv
393.318 44.4483 393.275 45.3582 394.292 44.5435 cv
394.139 44.4182 394.063 44.1389 393.98 44.0396 cv
395.281 44.0437 396.19 44.5795 396.749 45.709 cv
397.997 48.2308 394.932 46.2297 394.78 47.5433 cv
394.025 47.3036 393.69 46.6963 393.034 46.3327 cv
392.723 46.1605 392.149 46.253 391.911 46.078 cv
391.583 45.8379 391.663 45.401 391.375 45.164 cv
390.241 44.2346 387.656 45.7358 386.614 46.3354 cv
386.332 46.4981 386.031 46.5159 385.838 46.8216 cv
385.507 47.3455 385.972 47.4799 385.868 47.9688 cv
385.721 48.6668 384.809 48.9885 384.534 49.548 cv
383.873 50.8916 385.216 52.8147 385.035 54.3064 cv
384.935 55.1343 384.041 56.0318 384.384 56.7243 cv
384.532 57.0228 385.047 57.2766 385.243 57.6283 cv
385.422 57.9476 385.499 58.3668 385.734 58.698 cv
386.498 59.7715 387.597 60.9656 388.492 61.9684 cv
389.001 62.538 389.693 62.6974 390.46 62.5393 cv
391.094 62.409 392.055 62.1967 392.642 61.9156 cv
393.427 61.5406 393.53 61.0108 394.354 61.3684 cv
395.01 61.6536 395.588 62.4892 396.353 61.7971 cv
396.985 62.414 396.284 63.4888 396.143 64.1759 cv
395.963 65.057 396.311 65.8216 396.853 66.5706 cv
397.502 67.469 397.655 67.6272 397.522 68.8277 cv
397.419 69.7635 397.181 70.6192 396.98 71.5463 cv
396.788 72.4325 396.223 73.1063 396.252 74.0454 cv
396.281 74.912 396.655 75.609 396.541 76.5385 cv
396.441 77.3577 396.391 78.3336 396.177 79.136 cv
395.958 79.9574 395.378 80.685 395.133 81.5256 cv
394.901 82.3257 394.967 83.3613 395.526 84.0188 cv
396.108 84.7036 396.687 84.3117 397.37 83.7937 cv
398.717 82.7704 399.331 81.0345 400.226 79.6554 cv
401.14 78.2461 402.062 76.9604 402.671 75.5002 cv
402.8 75.1903 402.957 74.8851 403.115 74.5798 cv
401.637 79.7501 398.869 84.4908 394.962 88.3986 cv
cp
372.275 32 mo
353.657 32 338.563 47.0936 338.563 65.7122 cv
338.563 84.3308 365.126 122 372.275 122 cv
378.86 122 405.987 84.3308 405.987 65.7122 cv
405.987 47.0936 390.894 32 372.275 32 cv
cp
f
66.5733 244.057 mo
100.265 243.588 li
75.3389 265.666 li
74.8444 266.104 74.3966 265.925 74.3385 265.268 cv
73.8302 259.503 li
65.8359 261.237 57.736 260.959 51.0038 258.704 cv
42.2107 255.86 35.7321 249.755 33.2669 242.331 cv
30.6932 234.938 32.1178 226.294 36.8399 218.938 cv
38.4962 216.301 40.5702 213.837 42.938 211.611 cv
42.2958 213.88 41.8507 216.217 41.6264 218.598 cv
41.3567 219.078 41.0989 219.562 40.8626 220.049 cv
37.5566 226.732 37.4651 233.829 40.3658 239.39 cv
43.1966 244.995 48.9195 248.941 55.7372 250.34 cv
60.048 251.261 65.5989 250.843 70.0963 249.843 cv
66.1344 244.999 li
65.7164 244.488 65.9126 244.066 66.5733 244.057 cv
cp
73.4298 185.201 mo
58.5592 188.789 47.7303 200.392 44.3981 214.314 cv
44.0707 215.8 43.8266 217.297 43.6858 218.792 cv
43.6668 218.996 43.607 219.191 43.5297 219.38 cv
43.0801 223.711 43.34 228.19 44.4197 232.664 cv
45.6656 237.827 47.8827 242.5 50.822 246.546 cv
51.9057 247.059 53.0552 247.492 54.2592 247.841 cv
50.4324 243.397 47.6826 238.083 46.2675 232.218 cv
43.922 222.498 45.5019 212.447 50.7168 203.916 cv
50.8395 203.715 50.9717 203.523 51.0975 203.325 cv
51.0637 203.75 51.0163 204.172 50.8705 204.567 cv
50.5248 205.504 49.6997 206.045 49.3155 206.939 cv
48.9661 207.752 48.8031 208.895 48.7975 209.715 cv
48.7916 210.603 49.1635 211.591 49.0701 212.497 cv
48.952 213.648 48.4241 214.443 48.8475 215.643 cv
50.4316 215.725 49.1562 213.252 50.3697 212.817 cv
51.0014 213.702 51.1816 215.588 51.3274 216.684 cv
51.5274 218.191 51.3286 218.624 52.5109 219.674 cv
53.4475 220.507 53.8395 221.12 55.2224 220.953 cv
56.4912 220.801 57.1375 221.235 57.9379 222.3 cv
58.9371 222.273 59.5516 222.291 59.9288 223.316 cv
60.3964 223.445 61.3519 224.001 61.8149 224.01 cv
62.4853 224.023 63.3228 222.87 64.0844 223.419 cv
65.3574 224.336 63.8338 227.901 63.6827 229.04 cv
63.4612 230.709 63.9152 232.971 65.6256 233.718 cv
66.504 234.101 67.3586 234.18 67.8464 235.143 cv
68.2975 236.033 68.3138 236.861 68.9469 237.651 cv
69.9349 238.885 71.5391 238.986 72.8592 239.794 cv
73.7211 240.322 74.2388 241.042 74.5997 241.876 cv
86.2663 241.714 li
86.2698 241.346 86.2953 240.983 86.4086 240.64 cv
86.7539 239.596 87.5529 239.402 88.199 238.621 cv
89.0362 237.607 88.4203 236.902 88.3522 235.806 cv
88.24 233.973 88.5683 231.842 89.3388 230.175 cv
90.3079 228.076 90.5463 226.434 88.4406 225.151 cv
87.4008 224.517 87.0175 224.845 85.8342 224.823 cv
84.9323 224.805 84.0188 224.37 83.1302 224.472 cv
82.5977 224.533 82.3368 224.793 81.8344 224.784 cv
81.3668 224.775 81.355 224.493 80.8919 224.61 cv
80.2013 224.785 79.5815 226.462 78.7744 225.681 cv
78.325 225.246 78.9709 223.587 78.7592 222.907 cv
78.5001 222.076 77.8527 220.773 76.9122 220.51 cv
76.5565 220.411 75.8546 220.554 75.4347 220.499 cv
74.941 220.435 74.4309 220.262 73.964 220.1 cv
73.3547 219.888 72.1915 219.544 71.8117 218.995 cv
71.157 219.126 70.6319 218.875 69.9744 219.042 cv
69.3849 219.193 69.0582 219.561 68.4013 219.644 cv
67.8261 219.716 67.1154 219.419 66.5322 219.649 cv
66.1424 219.802 65.6722 220.469 65.3708 220.749 cv
64.5752 221.491 63.686 222.104 62.713 222.54 cv
61.2073 223.216 60.7786 222.682 60.5195 221.2 cv
60.1698 220.785 li
60.3629 219.015 59.2794 219.156 58.0215 219.041 cv
57.5809 217.919 58.8077 216.747 57.9041 215.618 cv
56.6822 215.848 56.1858 219.562 54.81 218.337 cv
53.9022 217.529 54.2711 214.569 54.6656 213.604 cv
55.063 212.631 56.875 210.612 57.8674 210.236 cv
58.6399 209.944 59.4212 210.127 59.8959 210.751 cv
60.4132 211.431 60.1508 212.254 60.4555 213.094 cv
61.4163 212.613 60.841 211.382 60.6286 210.699 cv
60.2745 209.557 60.903 209.497 61.2933 208.518 cv
61.6481 207.628 61.5216 206.739 62.0159 205.841 cv
62.4005 205.14 62.8693 204.388 63.3157 203.722 cv
63.8246 202.961 64.5765 202.837 65.1415 202.231 cv
65.9999 201.309 64.346 200.381 65.8737 200.112 cv
66.4174 200.017 66.2322 200.414 66.902 200.082 cv
67.1862 199.941 67.6751 199.529 67.959 199.325 cv
69.2544 198.394 68.1986 198.485 67.3563 197.884 cv
66.2853 197.12 67.5122 197.003 68.3417 196.648 cv
68.9506 196.389 68.7671 196.214 69.4142 196.453 cv
69.9847 196.663 69.802 197.17 70.5095 196.974 cv
71.8586 196.599 70.5875 195.463 70.1753 195.084 cv
69.4698 194.435 69.2072 193.927 68.1049 194.162 cv
68.1246 193.788 68.0277 193.326 67.793 193.028 cv
66.9006 193.372 66.5794 192.74 65.8176 192.645 cv
64.5349 192.483 64.9556 193.4 64.6334 194.173 cv
64.301 194.97 63.3271 195.081 63.1627 195.994 cv
62.992 196.944 63.5112 197.514 62.0726 197.613 cv
62.1355 197.049 61.911 196.403 61.7427 195.859 cv
61.3292 195.905 60.9377 195.892 60.5368 195.861 cv
60.2051 194.479 61.7071 193.993 62.7153 193.611 cv
63.8445 193.183 63.9399 191.906 64.932 191.455 cv
65.8577 191.035 66.9325 192.439 67.9098 191.239 cv
68.4673 190.554 68.0783 190.326 67.7076 189.885 cv
67.6083 189.767 67.191 189.549 67.0692 189.446 cv
67.0365 189.41 li
67.921 189.007 68.8266 188.642 69.7465 188.305 cv
70.0484 188.779 70.585 189.311 70.8818 189.618 cv
71.0995 189.843 71.4331 189.948 71.6259 190.207 cv
71.8456 190.501 71.6133 190.989 72.0814 191.11 cv
72.8044 191.298 74.1302 188.62 74.4905 188.151 cv
74.9478 187.555 75.2417 187.217 74.9998 186.806 cv
78.0169 186.173 81.0574 185.915 84.0695 186.025 cv
84.3616 186.252 84.662 186.486 84.97 186.75 cv
85.6329 187.321 86.0963 187.866 87.0655 187.956 cv
87.6263 188.009 89.274 187.577 88.8713 188.926 cv
88.4995 190.171 87.4512 188.91 87.0481 188.643 cv
86.4895 188.275 85.0493 188.062 85.3544 189.146 cv
85.8083 190.757 89.4104 189.611 89.0549 191.588 cv
89.5561 191.741 90.5273 191.962 90.5388 192.636 cv
90.5538 193.468 89.403 193.213 89.6672 194.219 cv
90.0413 195.642 91.8874 196.444 93.2133 195.579 cv
94.6272 194.656 92.9449 192.791 94.663 192.142 cv
95.3408 191.887 95.8015 191.992 96.5463 192.337 cv
97.1533 192.617 97.7029 193.455 98.3878 193.214 cv
98.3558 192.76 97.9516 192.527 97.7987 192.14 cv
98.3751 192.145 99.6326 192.56 100.059 192.958 cv
100.704 193.56 100.904 194.605 101.834 193.402 cv
101.627 193.301 101.464 193.005 101.343 192.915 cv
102.82 192.564 103.997 192.923 104.941 194.051 cv
107.046 196.57 103.022 195.139 103.209 196.671 cv
102.288 196.606 101.741 196.008 100.898 195.776 cv
100.498 195.665 99.8715 195.927 99.5533 195.794 cv
99.1162 195.612 99.0876 195.094 98.6956 194.904 cv
97.156 194.16 94.6347 196.57 93.6168 197.536 cv
93.3405 197.797 93.0047 197.9 92.8694 198.299 cv
92.6379 198.984 93.2016 199.01 93.2175 199.593 cv
93.241 200.424 92.2958 201.038 92.1366 201.749 cv
91.7543 203.454 93.8039 205.267 94.007 207.009 cv
94.12 207.975 93.3522 209.237 93.9308 209.929 cv
94.18 210.227 94.8335 210.374 95.1526 210.719 cv
95.4431 211.032 95.6445 211.487 96.0021 211.798 cv
97.1627 212.807 98.7356 213.86 100.025 214.752 cv
100.758 215.259 101.587 215.251 102.414 214.862 cv
103.097 214.54 104.129 214.036 104.718 213.557 cv
105.505 212.917 105.478 212.287 106.51 212.468 cv
107.332 212.612 108.216 213.402 108.894 212.407 cv
109.779 212.934 109.28 214.344 109.307 215.162 cv
109.344 216.211 109.948 216.983 110.768 217.685 cv
111.75 218.526 111.967 218.663 112.145 220.061 cv
112.283 221.151 112.248 222.187 112.274 223.293 cv
112.298 224.351 111.842 225.27 112.132 226.326 cv
112.402 227.302 113.018 227.99 113.143 229.075 cv
113.253 230.033 113.463 231.152 113.44 232.121 cv
113.416 233.113 112.957 234.097 112.911 235.118 cv
112.866 236.088 113.224 237.245 114.038 237.837 cv
114.885 238.455 115.435 237.852 116.068 237.077 cv
117.316 235.548 117.537 233.411 118.175 231.602 cv
118.826 229.753 119.52 228.043 119.81 226.22 cv
119.872 225.833 119.966 225.444 120.063 225.055 cv
119.801 231.323 117.959 237.458 114.597 242.96 cv
109.382 251.49 101.157 257.481 91.4374 259.827 cv
88.9321 260.431 86.4048 260.77 83.8871 260.858 cv
81.7353 262.764 li
85.076 262.84 88.4809 262.495 91.8831 261.674 cv
113.001 256.578 125.989 235.328 120.893 214.211 cv
115.798 193.093 94.5477 180.105 73.4298 185.201 cv
cp
f
214.726 243.858 mo
248.567 243.387 li
223.53 265.563 li
223.034 266.002 222.584 265.823 222.526 265.163 cv
222.015 259.373 li
213.985 261.114 205.85 260.835 199.088 258.57 cv
190.256 255.713 183.749 249.581 181.273 242.124 cv
178.687 234.699 180.118 226.017 184.861 218.628 cv
186.525 215.979 188.608 213.505 190.986 211.269 cv
190.341 213.548 189.894 215.895 189.669 218.287 cv
189.398 218.769 189.139 219.255 188.902 219.744 cv
185.581 226.456 185.489 233.585 188.403 239.171 cv
191.246 244.801 196.994 248.764 203.842 250.17 cv
208.172 251.095 213.747 250.675 218.265 249.67 cv
214.285 244.805 li
213.865 244.291 214.063 243.868 214.726 243.858 cv
cp
261.188 241.673 mo
261.082 241.844 260.899 241.938 260.711 241.938 cv
260.613 241.938 260.514 241.913 260.425 241.86 cv
258.296 240.595 255.848 239.469 253.147 238.513 cv
252.877 238.417 252.722 238.132 252.789 237.852 cv
253.743 233.894 254.3 229.697 254.445 225.378 cv
254.455 225.076 254.703 224.836 255.006 224.836 cv
265.84 224.836 li
265.995 224.836 266.143 224.9 266.25 225.013 cv
266.356 225.127 266.41 225.279 266.4 225.434 cv
266.021 231.174 264.219 236.789 261.188 241.673 cv
cp
252.063 204.291 mo
251.818 204.235 li
251.682 204.17 251.579 204.052 251.531 203.908 cv
249.924 199.11 247.768 195.028 245.124 191.775 cv
244.96 191.573 244.956 191.284 245.116 191.077 cv
245.225 190.937 245.39 190.86 245.56 190.86 cv
245.793 190.911 li
250.664 193.141 255.037 196.506 258.438 200.642 cv
258.543 200.769 258.586 200.936 258.557 201.098 cv
258.528 201.26 258.429 201.401 258.286 201.484 cv
256.49 202.526 254.46 203.459 252.254 204.258 cv
252.063 204.291 li
cp
250.767 221.15 mo
250.662 221.26 250.515 221.323 250.363 221.323 cv
233.436 221.323 li
233.125 221.323 232.874 221.071 232.874 220.761 cv
232.874 211.686 li
232.874 211.383 233.115 211.134 233.419 211.125 cv
238.765 210.964 243.904 210.251 248.693 209.003 cv
248.834 208.985 li
248.935 208.985 249.035 209.012 249.123 209.065 cv
249.252 209.142 249.345 209.268 249.38 209.415 cv
250.254 213.026 250.773 216.836 250.924 220.739 cv
250.93 220.892 250.873 221.041 250.767 221.15 cv
cp
249.38 236.744 mo
249.345 236.89 249.252 237.016 249.123 237.093 cv
249.035 237.146 248.935 237.173 248.834 237.173 cv
248.693 237.155 li
243.901 235.908 238.762 235.194 233.419 235.033 cv
233.115 235.024 232.874 234.775 232.874 234.472 cv
232.874 225.397 li
232.874 225.087 233.125 224.836 233.436 224.836 cv
250.363 224.836 li
250.515 224.836 250.662 224.898 250.767 225.008 cv
250.873 225.118 250.93 225.266 250.924 225.419 cv
250.773 229.322 250.254 233.133 249.38 236.744 cv
cp
232.874 188.544 mo
232.874 188.373 232.952 188.212 233.085 188.105 cv
233.186 188.025 233.309 187.983 233.436 187.983 cv
233.56 187.997 li
239.476 189.342 244.903 195.672 248.076 204.929 cv
248.127 205.077 248.114 205.239 248.039 205.377 cv
247.965 205.515 247.837 205.615 247.685 205.654 cv
243.247 206.796 238.459 207.454 233.453 207.612 cv
233.436 207.612 li
233.29 207.612 233.15 207.556 233.045 207.454 cv
232.936 207.348 232.874 207.202 232.874 207.051 cv
232.874 188.544 li
cp
260.425 204.299 mo
260.514 204.246 260.613 204.22 260.711 204.22 cv
260.899 204.22 261.082 204.315 261.188 204.486 cv
264.219 209.369 266.021 214.984 266.4 220.724 cv
266.41 220.879 266.356 221.031 266.25 221.145 cv
266.143 221.258 265.995 221.323 265.84 221.323 cv
255.006 221.323 li
254.703 221.323 254.455 221.082 254.445 220.78 cv
254.3 216.462 253.743 212.265 252.789 208.306 cv
252.722 208.027 252.877 207.742 253.147 207.646 cv
255.85 206.688 258.298 205.562 260.425 204.299 cv
cp
229.361 207.051 mo
229.361 207.202 229.299 207.348 229.19 207.454 cv
229.085 207.556 228.945 207.612 228.799 207.612 cv
228.782 207.612 li
223.78 207.454 218.992 206.794 214.55 205.652 cv
214.399 205.613 214.27 205.512 214.196 205.375 cv
214.122 205.237 214.109 205.074 214.159 204.926 cv
217.334 195.671 222.76 189.342 228.675 187.997 cv
228.799 187.983 li
228.925 187.983 229.049 188.025 229.15 188.105 cv
229.283 188.212 229.361 188.373 229.361 188.544 cv
229.361 207.051 li
cp
229.361 220.761 mo
229.361 221.071 229.11 221.323 228.799 221.323 cv
211.872 221.323 li
211.72 221.323 211.573 221.26 211.468 221.15 cv
211.362 221.041 211.305 220.892 211.311 220.739 cv
211.462 216.836 211.982 213.025 212.856 209.412 cv
212.891 209.266 212.984 209.14 213.113 209.063 cv
213.201 209.01 213.301 208.983 213.402 208.983 cv
213.543 209.001 li
218.337 210.25 223.476 210.964 228.816 211.125 cv
229.12 211.134 229.361 211.383 229.361 211.686 cv
229.361 220.761 li
cp
229.361 234.472 mo
229.361 234.775 229.12 235.024 228.816 235.033 cv
223.476 235.194 218.337 235.909 213.543 237.157 cv
213.402 237.175 li
213.301 237.175 213.201 237.148 213.113 237.096 cv
212.984 237.018 212.891 236.893 212.856 236.746 cv
211.982 233.133 211.462 229.322 211.311 225.419 cv
211.305 225.266 211.362 225.118 211.468 225.008 cv
211.573 224.898 211.72 224.836 211.872 224.836 cv
228.799 224.836 li
229.11 224.836 229.361 225.087 229.361 225.397 cv
229.361 234.472 li
cp
210.418 204.23 mo
210.174 204.286 li
209.983 204.253 li
207.76 203.449 205.73 202.517 203.948 201.485 cv
203.805 201.402 203.706 201.261 203.677 201.099 cv
203.648 200.937 203.691 200.77 203.796 200.643 cv
207.198 196.507 211.571 193.142 216.441 190.911 cv
216.675 190.86 li
216.844 190.86 217.01 190.937 217.119 191.077 cv
217.279 191.284 217.275 191.573 217.111 191.775 cv
214.468 195.026 212.313 199.107 210.706 203.903 cv
210.658 204.046 210.554 204.164 210.418 204.23 cv
cp
209.446 208.306 mo
208.492 212.265 207.935 216.462 207.79 220.78 cv
207.78 221.082 207.531 221.323 207.229 221.323 cv
196.395 221.323 li
196.24 221.323 196.091 221.258 195.985 221.145 cv
195.879 221.031 195.825 220.879 195.835 220.724 cv
196.214 214.985 198.016 209.371 201.045 204.488 cv
201.151 204.317 201.334 204.222 201.522 204.222 cv
201.62 204.222 201.719 204.248 201.809 204.301 cv
203.932 205.562 206.381 206.687 209.087 207.645 cv
209.358 207.741 209.513 208.026 209.446 208.306 cv
cp
209.087 238.514 mo
206.384 239.47 203.935 240.595 201.809 241.857 cv
201.719 241.911 201.62 241.936 201.522 241.936 cv
201.334 241.936 201.151 241.842 201.045 241.671 cv
198.016 236.788 196.214 231.173 195.835 225.434 cv
195.825 225.279 195.879 225.127 195.985 225.013 cv
196.091 224.9 196.24 224.836 196.395 224.836 cv
207.229 224.836 li
207.531 224.836 207.78 225.076 207.79 225.378 cv
207.935 229.697 208.492 233.894 209.446 237.853 cv
209.513 238.132 209.358 238.418 209.087 238.514 cv
cp
231.117 184.196 mo
209.677 184.196 192.235 201.639 192.235 223.079 cv
192.235 230.88 194.553 238.146 198.524 244.241 cv
199.537 246.027 201.937 245.901 203.948 244.674 cv
219.185 235.374 244.454 236.709 258.286 244.674 cv
258.429 244.757 258.528 244.898 258.557 245.06 cv
258.586 245.223 258.518 245.373 258.438 245.517 cv
253.086 255.136 233.671 261.869 233.671 261.869 cv
253.924 260.548 270 243.66 270 223.079 cv
270 201.639 252.557 184.196 231.117 184.196 cv
cp
f
208.285 39.7114 mo
208.194 39.7114 208.102 39.7304 208.015 39.7704 cv
202.378 42.3523 197.317 46.247 193.38 51.0333 cv
193.258 51.1805 193.208 51.3737 193.242 51.5615 cv
193.276 51.7493 193.391 51.9127 193.556 52.0082 cv
195.618 53.203 197.968 54.2808 200.54 55.2113 cv
200.761 55.25 li
200.858 55.25 200.955 55.2284 201.044 55.1853 cv
201.201 55.1091 201.321 54.9727 201.377 54.8068 cv
203.237 49.256 205.731 44.5335 208.79 40.771 cv
208.98 40.5366 208.984 40.2022 208.799 39.9633 cv
208.673 39.8003 208.481 39.7114 208.285 39.7114 cv
cp
241.715 39.7114 mo
241.519 39.7114 241.327 39.8003 241.201 39.9633 cv
241.016 40.2022 241.02 40.5366 241.21 40.771 cv
244.27 44.5357 246.765 49.2601 248.625 54.8129 cv
248.681 54.9787 248.8 55.1152 248.958 55.1913 cv
249.047 55.2345 249.144 55.2561 249.241 55.2561 cv
249.462 55.2173 li
252.015 54.2931 254.364 53.2132 256.443 52.0073 cv
256.608 51.9114 256.723 51.7481 256.757 51.5606 cv
256.79 51.3727 256.74 51.1796 256.619 51.0323 cv
252.683 46.2458 247.622 42.3516 241.985 39.7704 cv
241.898 39.7304 241.806 39.7114 241.715 39.7114 cv
cp
222.317 36.3817 mo
222.173 36.3979 li
215.328 37.9547 209.048 45.2794 205.373 55.9908 cv
205.315 56.1625 205.33 56.3506 205.417 56.5102 cv
205.502 56.6695 205.651 56.7859 205.826 56.8309 cv
210.967 58.153 216.508 58.916 222.297 59.099 cv
222.317 59.0994 li
222.486 59.0994 222.648 59.034 222.77 58.9163 cv
222.896 58.7938 222.967 58.6254 222.967 58.4496 cv
222.967 37.0314 li
222.967 36.8338 222.877 36.6469 222.723 36.5235 cv
222.607 36.4309 222.463 36.3817 222.317 36.3817 cv
cp
227.683 36.3817 mo
227.537 36.3817 227.393 36.4309 227.277 36.5235 cv
227.123 36.6469 227.033 36.8338 227.033 37.0314 cv
227.033 58.4496 li
227.033 58.6254 227.104 58.7938 227.23 58.9163 cv
227.352 59.034 227.514 59.0994 227.683 59.0994 cv
227.703 59.099 li
233.496 58.917 239.038 58.1549 244.174 56.8335 cv
244.35 56.7884 244.498 56.672 244.584 56.5127 cv
244.67 56.3532 244.686 56.165 244.627 55.9937 cv
240.954 45.2804 234.673 37.955 227.827 36.3979 cv
227.683 36.3817 li
cp
190.749 55.1764 mo
190.531 55.1764 190.319 55.2856 190.196 55.4835 cv
186.69 61.1346 184.605 67.6325 184.166 74.2744 cv
184.155 74.4537 184.218 74.6301 184.34 74.7614 cv
184.463 74.8925 184.635 74.967 184.815 74.967 cv
197.353 74.967 li
197.703 74.967 197.991 74.6891 198.002 74.3391 cv
198.17 69.3413 198.814 64.4839 199.919 59.9021 cv
199.996 59.5784 199.818 59.2482 199.504 59.1371 cv
196.372 58.029 193.538 56.7269 191.08 55.2675 cv
190.976 55.2056 190.862 55.1764 190.749 55.1764 cv
cp
204.497 60.686 mo
204.38 60.686 204.265 60.7174 204.163 60.7783 cv
204.014 60.8678 203.906 61.0134 203.866 61.1829 cv
202.854 65.3644 202.252 69.775 202.078 74.2921 cv
202.071 74.4686 202.136 74.6405 202.259 74.7678 cv
202.381 74.895 202.55 74.967 202.727 74.967 cv
222.317 74.967 li
222.676 74.967 222.967 74.6761 222.967 74.3172 cv
222.967 63.8148 li
222.967 63.4636 222.688 63.1759 222.337 63.1654 cv
216.156 62.9792 210.209 62.1521 204.661 60.7069 cv
204.497 60.686 li
cp
245.504 60.6885 mo
245.34 60.7095 li
239.798 62.153 233.85 62.9792 227.663 63.1654 cv
227.312 63.1759 227.033 63.4636 227.033 63.8148 cv
227.033 74.3172 li
227.033 74.6761 227.324 74.967 227.683 74.967 cv
247.273 74.967 li
247.45 74.967 247.619 74.895 247.741 74.7678 cv
247.864 74.6405 247.929 74.4686 247.922 74.2921 cv
247.748 69.7747 247.147 65.365 246.135 61.1854 cv
246.095 61.0159 245.988 60.8703 245.838 60.7809 cv
245.736 60.72 245.621 60.6885 245.504 60.6885 cv
cp
259.249 55.1739 mo
259.136 55.1739 259.022 55.2034 258.918 55.265 cv
256.457 56.7272 253.624 58.0302 250.496 59.1384 cv
250.182 59.2495 250.004 59.5794 250.081 59.903 cv
251.186 64.4843 251.83 69.3413 251.998 74.3391 cv
252.009 74.6891 252.297 74.967 252.647 74.967 cv
265.185 74.967 li
265.365 74.967 265.537 74.8925 265.66 74.7614 cv
265.782 74.6301 265.845 74.4537 265.834 74.2744 cv
265.395 67.6312 263.309 61.1327 259.802 55.481 cv
259.679 55.283 259.467 55.1739 259.249 55.1739 cv
cp
227.683 79.0327 mo
227.324 79.0327 227.033 79.3237 227.033 79.6824 cv
227.033 90.1852 li
227.033 90.5364 227.312 90.8241 227.663 90.8346 cv
233.848 91.0205 239.795 91.847 245.34 93.2905 cv
245.504 93.3115 li
245.621 93.3115 245.736 93.2801 245.838 93.2191 cv
245.988 93.1297 246.095 92.9841 246.135 92.8147 cv
247.147 88.635 247.748 84.2253 247.922 79.7075 cv
247.929 79.5311 247.864 79.3592 247.741 79.232 cv
247.619 79.1048 247.45 79.0327 247.273 79.0327 cv
227.683 79.0327 li
cp
202.727 79.0327 mo
202.55 79.0327 202.381 79.1048 202.259 79.232 cv
202.136 79.3592 202.071 79.5311 202.078 79.7075 cv
202.252 84.2251 202.854 88.6356 203.866 92.8172 cv
203.906 92.9866 204.014 93.1322 204.163 93.2217 cv
204.265 93.2826 204.38 93.314 204.497 93.314 cv
204.661 93.2931 li
210.209 91.848 216.156 91.0208 222.337 90.8346 cv
222.688 90.8241 222.967 90.5364 222.967 90.1852 cv
222.967 79.6824 li
222.967 79.3237 222.676 79.0327 222.317 79.0327 cv
202.727 79.0327 li
cp
184.815 79.0327 mo
184.635 79.0327 184.463 79.1073 184.34 79.2383 cv
184.218 79.3697 184.155 79.5461 184.166 79.7253 cv
184.605 86.3675 186.69 92.8654 190.196 98.5165 cv
190.319 98.7145 190.531 98.8236 190.749 98.8236 cv
190.862 98.8236 190.976 98.7944 191.08 98.7326 cv
193.541 97.2719 196.375 95.9701 199.504 94.8629 cv
199.818 94.7518 199.996 94.4216 199.919 94.098 cv
198.814 89.5161 198.17 84.6587 198.002 79.6606 cv
197.991 79.3107 197.703 79.0327 197.353 79.0327 cv
184.815 79.0327 li
cp
252.647 79.0327 mo
252.297 79.0327 252.009 79.3107 251.998 79.6606 cv
251.83 84.6584 251.186 89.5157 250.081 94.097 cv
250.004 94.4207 250.182 94.7509 250.496 94.862 cv
253.622 95.9683 256.455 97.2713 258.918 98.7351 cv
259.022 98.7966 259.136 98.8261 259.249 98.8261 cv
259.467 98.8261 259.679 98.717 259.802 98.5191 cv
263.309 92.8673 265.395 86.3688 265.834 79.7253 cv
265.845 79.5461 265.782 79.3697 265.66 79.2383 cv
265.537 79.1073 265.365 79.0327 265.185 79.0327 cv
252.647 79.0327 li
cp
249.241 98.744 mo
249.144 98.744 249.047 98.7656 248.958 98.8087 cv
248.8 98.8849 248.681 99.0213 248.625 99.1872 cv
246.765 104.74 244.27 109.464 241.21 113.229 cv
241.02 113.463 241.016 113.798 241.201 114.037 cv
241.327 114.2 241.519 114.289 241.715 114.289 cv
241.806 114.289 241.898 114.27 241.986 114.23 cv
247.622 111.647 252.683 107.753 256.619 102.968 cv
256.74 102.821 256.79 102.627 256.757 102.439 cv
256.723 102.252 256.608 102.088 256.443 101.993 cv
254.358 100.785 252.009 99.7047 249.462 98.7827 cv
249.241 98.744 li
cp
200.761 98.75 mo
200.54 98.7887 li
197.97 99.7186 195.62 100.796 193.556 101.992 cv
193.391 102.087 193.276 102.251 193.242 102.439 cv
193.208 102.626 193.258 102.82 193.38 102.967 cv
197.317 107.753 202.378 111.648 208.015 114.23 cv
208.102 114.27 208.194 114.289 208.285 114.289 cv
208.481 114.289 208.673 114.2 208.799 114.037 cv
208.984 113.798 208.98 113.463 208.79 113.229 cv
205.731 109.467 203.237 104.744 201.377 99.1933 cv
201.321 99.0273 201.201 98.8909 201.044 98.8148 cv
200.955 98.7716 200.858 98.75 200.761 98.75 cv
cp
222.297 94.9019 mo
216.505 95.0853 210.964 95.848 205.826 97.1691 cv
205.651 97.2142 205.502 97.3306 205.417 97.4899 cv
205.33 97.6494 205.315 97.8375 205.373 98.0092 cv
209.048 108.721 215.328 116.045 222.173 117.602 cv
222.317 117.618 li
222.463 117.618 222.607 117.569 222.723 117.476 cv
222.877 117.353 222.967 117.166 222.967 116.969 cv
222.967 95.5514 li
222.967 95.3756 222.896 95.2071 222.77 95.0846 cv
222.648 94.967 222.486 94.9016 222.317 94.9016 cv
222.297 94.9019 li
cp
227.683 94.9006 mo
227.514 94.9006 227.352 94.966 227.23 95.0837 cv
227.104 95.2062 227.033 95.3746 227.033 95.5504 cv
227.033 116.969 li
227.033 117.166 227.123 117.353 227.277 117.476 cv
227.393 117.569 227.537 117.618 227.683 117.618 cv
227.827 117.602 li
234.672 116.045 240.953 108.72 244.627 98.0063 cv
244.686 97.835 244.67 97.6469 244.584 97.4873 cv
244.498 97.3277 244.35 97.2116 244.174 97.1662 cv
239.034 95.8451 233.492 95.0831 227.703 94.901 cv
227.683 94.9006 li
cp
225 122 mo
200.187 122 180 101.813 180 77 cv
180 52.1868 200.187 31.9997 225 31.9997 cv
249.813 31.9997 270 52.1868 270 77 cv
270 101.813 249.813 122 225 122 cv
cp
f
34.2544 373.978 mo
33.5817 373.772 33.5437 373.344 34.1681 373.023 cv
36.7238 371.702 li
39.279 370.383 li
39.904 370.061 40.384 370.368 40.3504 371.071 cv
40.2159 373.942 li
40.0821 376.817 li
40.0485 377.52 39.643 377.663 39.1764 377.137 cv
38.003 375.818 li
37.5365 375.292 36.6129 374.699 35.9403 374.494 cv
34.2544 373.978 li
cp
98.8365 400.174 mo
98.3392 401.868 li
98.1415 402.543 98.1275 403.639 98.3095 404.319 cv
98.7648 406.022 li
98.9475 406.7 98.6047 406.962 98.0003 406.603 cv
95.5264 405.135 li
93.0542 403.664 li
92.4493 403.304 92.456 402.735 93.0693 402.391 cv
95.578 400.985 li
98.0849 399.576 li
98.6982 399.232 99.0348 399.499 98.8365 400.174 cv
cp
90.1927 339.162 mo
91.8976 338.716 li
92.5775 338.538 93.5247 337.983 94.0125 337.476 cv
95.2368 336.206 li
95.7241 335.7 96.1246 335.86 96.128 336.563 cv
96.1465 339.44 li
96.1644 342.316 li
96.1683 343.019 95.6776 343.307 95.066 342.96 cv
92.5674 341.537 li
90.0678 340.115 li
89.4573 339.768 89.5128 339.341 90.1927 339.162 cv
cp
112.471 376.986 mo
109.702 380.992 106.336 384.602 102.573 387.825 cv
102.633 387.553 102.689 387.289 102.75 386.999 cv
103.738 382.28 104.226 377.473 104.172 372.674 cv
104.096 366.937 103.354 361.17 101.816 355.609 cv
105.873 358.876 109.526 362.586 112.502 366.795 cv
113.626 368.389 114.64 370.061 115.517 371.789 cv
114.638 373.583 113.613 375.323 112.471 376.986 cv
cp
91.1331 395.83 mo
87.8538 397.662 84.4204 399.281 80.8762 400.626 cv
74.7197 399.071 68.7956 396.622 63.3118 393.54 cv
57.5759 390.307 52.2232 386.365 47.6837 381.744 cv
47.2395 378.738 46.9824 375.705 46.9387 372.677 cv
46.9163 369.207 47.137 365.718 47.64 362.268 cv
52.292 357.603 57.7406 353.775 63.7363 350.53 cv
69.116 347.634 74.8059 345.276 80.7205 343.783 cv
84.1583 345.026 87.5009 346.532 90.7069 348.244 cv
93.5947 349.812 96.3861 351.57 99.0449 353.492 cv
100.946 359.697 101.785 366.216 101.731 372.674 cv
101.667 378.707 100.869 384.777 99.1474 390.561 cv
96.5962 392.476 93.9178 394.244 91.1331 395.83 cv
cp
63.4053 404.57 mo
61.0339 404.727 58.6412 404.708 56.2776 404.48 cv
55.1994 402.966 54.2271 401.378 53.3613 399.738 cv
51.0985 395.422 49.5039 390.805 48.4622 386.055 cv
48.9024 386.442 49.3387 386.827 49.8081 387.225 cv
53.5959 390.399 57.712 393.206 62.0925 395.56 cv
66.9608 398.167 72.1405 400.305 77.5106 401.807 cv
72.9453 403.269 68.2209 404.246 63.4053 404.57 cv
cp
52.8723 345.384 mo
53.8004 343.571 54.8662 341.818 56.067 340.157 cv
58.341 339.935 60.6508 339.899 62.9472 340.023 cv
67.5461 340.286 72.0957 341.137 76.5254 342.429 cv
76.4207 342.462 76.3249 342.491 76.2196 342.526 cv
71.4437 344.069 66.8409 346.068 62.5165 348.512 cv
57.2399 351.504 52.4511 354.829 48.2482 358.796 cv
49.1976 354.161 50.6992 349.637 52.8723 345.384 cv
cp
120.783 357.436 mo
120.503 354.947 119.708 352.48 118.399 350.271 cv
117.101 348.057 115.263 346.143 113.159 344.631 cv
111.049 343.114 108.676 341.994 106.225 341.194 cv
104.606 340.674 102.958 340.289 101.295 340.015 cv
100.603 339.901 100.13 340.399 100.06 341.099 cv
100.048 341.205 li
99.9635 341.903 100.316 342.511 101.01 342.625 cv
102.486 342.868 103.941 343.201 105.355 343.648 cv
107.586 344.362 109.706 345.354 111.56 346.671 cv
113.422 347.979 114.976 349.632 116.151 351.511 cv
118.53 355.283 119.003 359.974 118.096 364.406 cv
117.655 366.594 116.929 368.733 115.992 370.801 cv
115.153 369.264 114.216 367.773 113.21 366.34 cv
109.892 361.689 105.842 357.567 101.329 353.964 cv
100.361 350.827 99.1446 347.759 97.6105 344.818 cv
97.5679 344.741 li
97.5433 344.7 97.3921 344.767 97.2213 344.88 cv
97.1188 344.947 97.0151 345.011 96.9059 345.07 cv
96.7457 345.159 96.5799 345.237 96.413 345.305 cv
96.1347 345.419 95.9101 345.513 95.9247 345.54 cv
95.9498 345.591 li
96.9519 347.62 97.8055 349.712 98.5319 351.842 cv
96.2204 350.177 93.8215 348.624 91.3358 347.218 cv
88.7029 345.737 85.9657 344.41 83.1574 343.23 cv
84.4932 342.95 85.8357 342.701 87.1912 342.516 cv
87.8896 342.424 87.9097 342.131 87.4404 341.608 cv
87.343 341.499 87.2556 341.385 87.1811 341.269 cv
86.8031 340.676 86.3063 340.127 85.6095 340.225 cv
83.1754 340.569 81.2329 341.021 79.0615 341.651 cv
73.9305 339.851 68.5772 338.612 63.0805 338.17 cv
61.3 338.035 59.5004 337.992 57.6991 338.052 cv
58.8669 336.668 60.1451 335.38 61.543 334.217 cv
63.379 332.702 65.4233 331.417 67.6447 330.53 cv
69.8525 329.639 72.2587 329.167 74.6211 329.182 cv
77.0357 329.203 79.3875 329.711 81.5814 330.63 cv
83.7707 331.551 85.7725 332.862 87.5581 334.395 cv
88.1808 334.933 88.7746 335.497 89.3441 336.081 cv
89.8359 336.585 90.4571 336.754 90.8021 336.492 cv
91.1471 336.232 91.0765 335.646 90.5791 335.149 cv
89.9384 334.509 89.2652 333.894 88.5589 333.311 cv
86.6344 331.731 84.4753 330.381 82.1117 329.444 cv
79.7622 328.494 77.1835 327.984 74.6463 328 cv
72.0598 328.019 69.5322 328.564 67.2016 329.542 cv
64.8666 330.514 62.7523 331.891 60.8737 333.49 cv
59.2416 334.889 57.7966 336.449 56.4961 338.112 cv
53.6268 338.285 50.7681 338.739 47.9883 339.596 cv
45.5447 340.358 43.1721 341.441 41.0544 342.927 cv
38.935 344.403 37.0969 346.294 35.7453 348.48 cv
34.3866 350.662 33.5688 353.135 33.2507 355.632 cv
32.9275 358.135 33.0995 360.656 33.6002 363.083 cv
33.9323 364.664 34.4017 366.203 34.9752 367.701 cv
35.2273 368.357 35.9095 368.531 36.5513 368.245 cv
36.7462 368.163 li
37.3976 367.902 37.7393 367.291 37.4867 366.634 cv
36.9758 365.306 36.5575 363.952 36.2595 362.574 cv
35.7918 360.375 35.6294 358.125 35.8977 355.935 cv
36.1559 353.741 36.8795 351.629 37.993 349.719 cv
40.2283 345.866 44.2469 343.127 48.7198 341.664 cv
50.7115 341.004 52.7849 340.568 54.8948 340.294 cv
53.8625 341.818 52.9389 343.407 52.1044 345.026 cv
49.7016 349.782 48.0505 354.839 47.0177 360.016 cv
44.8361 362.204 42.8075 364.568 40.9855 367.195 cv
40.8472 367.403 li
40.7727 367.516 41.0332 367.759 41.3978 367.999 cv
41.6325 368.154 41.8542 368.314 42.0531 368.438 cv
42.1516 368.499 li
42.2917 368.499 li
42.3326 368.438 li
43.5978 366.7 44.9683 365.076 46.4145 363.527 cv
45.9793 366.559 45.7306 369.618 45.6948 372.671 cv
45.6713 375.097 45.7693 377.532 45.9933 379.96 cv
45.4226 379.326 44.858 378.687 44.3192 378.028 cv
43.8722 377.486 43.3345 377.581 42.9251 378.153 cv
42.7828 378.343 li
42.3415 378.893 42.1505 379.578 42.6008 380.119 cv
43.8851 381.661 45.1767 383.006 46.5579 384.319 cv
47.4523 389.904 49.0704 395.391 51.616 400.554 cv
52.2193 401.765 52.8824 402.953 53.5982 404.115 cv
52.0176 403.846 50.4572 403.482 48.9405 402.984 cv
46.6491 402.224 44.4603 401.175 42.5459 399.784 cv
40.6327 398.404 39.0006 396.651 37.8345 394.69 cv
36.6449 392.683 35.9302 390.487 35.6658 388.213 cv
35.4076 385.942 35.5991 383.629 36.096 381.387 cv
36.2472 380.711 36.427 380.042 36.6303 379.382 cv
36.8386 378.711 36.8689 378.114 36.6757 378.025 cv
36.5592 377.974 36.4432 377.917 36.3306 377.853 cv
36.2046 377.784 36.0837 377.712 35.9688 377.633 cv
35.7734 377.502 35.4373 377.925 35.2362 378.597 cv
34.9903 379.421 34.7792 380.257 34.6084 381.102 cv
34.1379 383.483 33.9923 385.942 34.3261 388.367 cv
34.6397 390.782 35.4658 393.171 36.749 395.26 cv
38.0602 397.39 39.8177 399.204 41.871 400.646 cv
43.9199 402.086 46.2257 403.148 48.6151 403.9 cv
50.455 404.475 52.3357 404.87 54.235 405.124 cv
55.9595 407.752 58.001 410.203 60.4514 412.315 cv
62.3681 413.955 64.5384 415.376 66.94 416.385 cv
69.3394 417.401 71.9752 417.974 74.6334 417.999 cv
77.2933 418.03 79.9464 417.468 82.37 416.485 cv
84.8024 415.5 87.0041 414.098 88.9571 412.471 cv
90.2302 411.399 91.3946 410.238 92.4689 409.01 cv
92.9321 408.481 92.7484 407.839 92.1648 407.447 cv
92.0107 407.341 li
91.4383 406.931 90.7069 406.939 90.2453 407.47 cv
89.2904 408.558 88.2693 409.584 87.166 410.524 cv
85.4 412.012 83.4419 413.269 81.3214 414.144 cv
79.2026 415.027 76.9253 415.484 74.6334 415.518 cv
70.0211 415.599 65.5292 413.644 61.9642 410.677 cv
60.0857 409.125 58.4206 407.331 56.9447 405.386 cv
59.1184 405.53 61.3022 405.519 63.4653 405.381 cv
68.8214 405.001 74.0806 403.895 79.1528 402.245 cv
82.375 403.058 85.6599 403.646 88.9891 403.938 cv
89.6898 404 90.1865 403.77 90.1412 403.435 cv
90.1143 403.235 90.0991 403.033 90.0991 402.828 cv
90.0991 402.727 90.1025 402.633 90.1092 402.535 cv
90.1193 402.373 89.5699 402.194 88.8709 402.114 cv
86.7504 401.873 84.6512 401.506 82.5721 401.042 cv
85.7249 399.841 88.7975 398.444 91.7492 396.858 cv
94.0326 395.627 96.2579 394.28 98.4081 392.829 cv
98.0261 393.938 97.6167 395.039 97.1602 396.122 cv
96.8869 396.771 97.1641 397.025 97.8491 396.863 cv
98.086 396.807 98.3274 396.766 98.5727 396.732 cv
99.2678 396.64 100.074 396.117 100.34 395.465 cv
101.139 393.53 101.608 391.983 102.04 390.199 cv
106.597 386.693 110.712 382.654 114.086 378.022 cv
114.986 376.77 115.827 375.469 116.599 374.127 cv
117.334 375.885 117.917 377.694 118.297 379.547 cv
118.752 381.823 118.894 384.156 118.591 386.434 cv
118.294 388.706 117.521 390.93 116.323 392.876 cv
115.099 394.859 113.463 396.55 111.532 397.906 cv
109.602 399.253 107.41 400.254 105.125 400.967 cv
104.149 401.267 103.156 401.511 102.152 401.711 cv
101.463 401.848 100.939 402.132 100.965 402.378 cv
100.982 402.527 100.993 402.676 100.993 402.828 cv
100.993 402.94 100.988 403.051 100.977 403.163 cv
100.963 403.346 101.503 403.4 102.191 403.253 cv
103.344 403.007 104.487 402.707 105.612 402.335 cv
108.006 401.537 110.309 400.423 112.341 398.939 cv
114.379 397.472 116.13 395.594 117.383 393.489 cv
118.661 391.339 119.428 388.981 119.709 386.56 cv
119.992 384.146 119.803 381.707 119.29 379.357 cv
118.815 377.207 118.073 375.133 117.157 373.137 cv
118.566 370.525 119.682 367.755 120.337 364.835 cv
120.867 362.433 121.071 359.929 120.783 357.436 cv
cp
94.2769 374.362 mo
94.2231 374.799 94.0326 375.276 94.0512 375.709 cv
94.0556 375.812 94.0646 375.905 94.0735 375.993 cv
93.9817 376.52 93.8663 377.041 93.728 377.555 cv
93.6205 377.761 93.5095 377.969 93.4222 378.179 cv
93.0934 378.967 92.5955 379.662 92.1015 380.424 cv
91.6181 381.169 91.2865 382.107 90.5584 382.659 cv
90.1894 382.94 89.8768 383.151 89.5626 382.78 cv
89.2607 382.426 89.2249 381.866 89.3498 381.434 cv
89.4814 380.98 89.7951 380.587 89.9138 380.143 cv
90.0292 379.709 90.0566 379.182 90.1109 378.739 cv
90.1731 378.237 89.9703 377.861 89.9547 377.393 cv
89.9389 376.885 90.2437 376.521 90.3484 376.043 cv
90.4565 375.542 90.5847 375.079 90.6413 374.573 cv
90.7125 373.925 90.6295 373.84 90.2795 373.354 cv
89.9866 372.95 89.7984 372.536 89.8958 372.061 cv
89.972 371.689 90.3501 371.109 90.009 370.775 cv
89.5956 371.149 89.2837 370.697 88.9291 370.543 cv
88.4844 370.35 88.429 370.636 88.0044 370.84 cv
87.6869 370.991 87.1671 371.105 86.8249 371.176 cv
86.411 371.262 86.0368 371.175 85.7618 370.867 cv
85.2785 370.326 84.6848 369.68 84.2714 369.1 cv
84.1449 368.922 84.1034 368.695 84.0071 368.523 cv
83.9007 368.333 83.6223 368.195 83.5428 368.034 cv
83.3573 367.66 83.8401 367.175 83.8945 366.728 cv
83.992 365.922 83.2661 364.883 83.624 364.157 cv
83.7724 363.855 84.2647 363.681 84.3448 363.304 cv
84.4008 363.039 84.1493 362.967 84.328 362.684 cv
84.4322 362.519 84.5946 362.51 84.7475 362.421 cv
85.3104 362.097 86.7073 361.286 87.3195 361.788 cv
87.4751 361.917 87.4326 362.152 87.609 362.282 cv
87.7373 362.376 88.0481 362.327 88.2161 362.42 cv
88.5707 362.616 88.7516 362.945 89.1593 363.074 cv
89.2417 362.364 90.8973 363.445 90.223 362.083 cv
89.9205 361.472 89.4298 361.183 88.7275 361.182 cv
88.8955 361.453 li
88.3461 361.893 88.369 361.402 88.1439 361.061 cv
87.9955 360.835 87.4746 360.511 87.2158 360.447 cv
87.2427 360.638 87.3995 360.786 87.3648 360.994 cv
87.0299 361.028 86.8736 360.592 86.6305 360.399 cv
86.3331 360.163 86.1371 360.066 85.8044 360.107 cv
84.9604 360.212 85.5148 361.235 84.7783 361.496 cv
84.0872 361.742 83.3439 361.182 83.3299 360.5 cv
83.3198 360.018 83.8105 360.258 83.8945 359.881 cv
83.9622 359.576 83.5489 359.372 83.34 359.249 cv
83.7147 358.398 81.9689 358.522 81.9398 357.747 cv
81.9202 357.227 82.5458 357.478 82.7564 357.705 cv
82.9093 357.869 83.2437 358.551 83.5462 358.03 cv
83.8743 357.467 83.0857 357.482 82.8393 357.398 cv
82.4119 357.252 82.2629 356.956 82.0261 356.628 cv
81.9544 356.527 81.8827 356.434 81.8104 356.343 cv
84.5969 357.143 87.1514 358.636 89.2568 360.743 cv
92.5311 364.017 94.334 368.37 94.334 373 cv
94.334 373.455 94.3116 373.908 94.2774 374.358 cv
94.2769 374.362 li
cp
79.276 376.649 mo
78.7484 377.316 78.3687 378.239 78.2208 379.076 cv
78.1323 379.577 78.3334 379.962 77.8461 380.326 cv
77.4703 380.608 77.0894 380.609 76.8206 381.041 cv
76.5865 381.418 76.615 381.926 76.3865 382.291 cv
76.1837 382.615 75.7788 382.942 75.5156 383.216 cv
75.3957 383.34 75.2227 383.584 75.0664 383.665 cv
74.7656 383.82 74.6133 383.576 74.6284 384.075 cv
74.6407 384.475 74.8608 384.367 74.5741 384.732 cv
74.4262 384.92 74.2296 385.076 74.0856 385.263 cv
73.6802 385.795 73.674 386.154 73.7877 386.766 cv
73.846 387.075 73.7642 387.375 73.8028 387.664 cv
73.8442 387.981 74.1769 388.233 74.1176 388.553 cv
73.2724 388.692 72.6882 387.668 72.541 386.991 cv
72.3449 386.091 72.0716 385.227 71.9371 384.297 cv
71.8061 383.394 71.4325 382.645 71.4325 381.658 cv
71.4325 380.717 71.4773 379.854 70.8136 379.189 cv
70.3068 378.682 69.5966 378.462 69.2851 377.8 cv
69.0863 377.374 69.1686 377 69.0622 376.551 cv
68.9469 376.064 68.571 375.936 68.217 375.668 cv
67.5287 375.146 67.5702 374.078 67.8507 373.351 cv
68.0429 372.854 69.1154 371.416 68.6421 370.865 cv
68.3593 370.535 67.8564 370.963 67.5567 370.884 cv
67.3495 370.829 66.9792 370.476 66.7832 370.367 cv
66.7244 369.865 66.45 369.789 65.9974 369.693 cv
65.7521 369.127 65.509 368.861 64.9209 368.792 cv
64.2802 368.717 64.1699 368.399 63.8394 367.922 cv
63.421 367.321 63.5577 367.147 63.6316 366.447 cv
63.6848 365.939 63.8086 365.07 63.6204 364.602 cv
63.0267 364.667 63.3325 365.918 62.6285 365.709 cv
62.5674 365.123 62.8923 364.822 63.0698 364.318 cv
63.211 363.919 63.151 363.435 63.2496 363.036 cv
63.3415 362.667 63.5386 362.17 63.7851 361.842 cv
64.0545 361.482 64.4846 361.328 64.7422 360.944 cv
64.8184 360.829 64.8739 360.703 64.9215 360.573 cv
67.3847 358.177 70.4344 356.598 73.7451 355.972 cv
73.9154 356.163 li
74.0347 356.402 74.1848 356.546 73.8594 356.794 cv
73.2892 357.229 72.9576 356.48 72.4961 356.568 cv
71.9999 356.663 71.8184 357.228 71.2634 357.298 cv
70.7688 357.361 70.039 357.416 70.0385 358.074 cv
70.216 358.132 70.3902 358.18 70.5812 358.204 cv
70.5986 358.468 70.6294 358.783 70.5397 359.03 cv
71.1984 359.142 71.0264 358.829 71.2062 358.419 cv
71.3799 358.026 71.8296 358.082 72.0665 357.76 cv
72.2945 357.447 72.2054 356.988 72.7655 357.2 cv
73.0977 357.326 73.1733 357.645 73.6124 357.587 cv
73.6863 357.747 73.679 357.966 73.6303 358.131 cv
74.1518 358.146 74.215 358.403 74.4615 358.772 cv
74.606 358.987 75.0552 359.636 74.4072 359.659 cv
74.0666 359.67 74.2038 359.462 73.9708 359.305 cv
73.7048 359.127 73.7686 359.226 73.4667 359.276 cv
73.0546 359.346 72.4894 359.265 72.8887 359.725 cv
73.2024 360.088 73.688 360.162 73.0041 360.44 cv
72.8535 360.501 72.5891 360.633 72.4457 360.666 cv
72.108 360.743 72.2346 360.584 71.9798 360.568 cv
71.2623 360.523 71.9063 361.12 71.4196 361.442 cv
71.0987 361.653 70.7481 361.628 70.4356 361.915 cv
70.1622 362.166 69.8699 362.454 69.6206 362.728 cv
69.3003 363.078 69.261 363.492 69.0051 363.854 cv
68.7228 364.252 68.4327 364.211 68.4685 364.763 cv
68.4892 365.094 68.6152 365.71 68.1308 365.823 cv
68.0843 365.411 68.2921 365.07 68.133 364.707 cv
67.9868 364.375 67.6553 364.207 67.2755 364.255 cv
66.7883 364.317 65.7532 365.028 65.4687 365.423 cv
65.1864 365.815 64.6985 367.107 65.0189 367.57 cv
65.5057 368.27 66.1324 366.652 66.7076 366.682 cv
66.9916 367.288 66.3122 367.683 66.3889 368.235 cv
66.9423 368.424 67.4452 368.478 67.1663 369.254 cv
67.2784 369.479 li
67.2341 370.174 67.3691 370.461 68.1213 370.32 cv
68.6057 370.23 69.0723 370.05 69.5109 369.802 cv
69.6772 369.709 69.9617 369.46 70.1533 369.434 cv
70.4411 369.393 70.7285 369.605 70.9956 369.635 cv
71.3003 369.669 71.4874 369.538 71.7691 369.534 cv
72.0828 369.53 72.2928 369.7 72.6009 369.713 cv
72.7129 370.001 73.199 370.282 73.4499 370.443 cv
73.6421 370.568 73.8527 370.7 74.0688 370.783 cv
74.252 370.853 74.5836 370.866 74.7326 370.949 cv
75.1269 371.169 75.277 371.826 75.3039 372.228 cv
75.3246 372.557 74.8535 373.234 75.0087 373.479 cv
75.2876 373.918 75.7491 373.23 76.0784 373.226 cv
76.3003 373.224 76.2745 373.352 76.4834 373.407 cv
76.7086 373.466 76.8548 373.377 77.1012 373.407 cv
77.5123 373.458 77.8758 373.753 78.2802 373.859 cv
78.8106 373.998 79.0184 373.892 79.4177 374.29 cv
80.2265 375.096 79.9408 375.81 79.276 376.649 cv
cp
76.9998 355.666 mo
77.1824 355.666 77.3644 355.674 77.5453 355.679 cv
77.5308 355.829 77.3773 355.941 77.1572 356.12 cv
76.9444 356.292 76.0566 357.354 75.7508 357.19 cv
75.5536 357.084 75.7116 356.89 75.6444 356.735 cv
75.5861 356.597 75.4473 356.513 75.3733 356.388 cv
75.2871 356.241 75.1397 356 75.0457 355.779 cv
75.6909 355.706 76.3423 355.666 76.9998 355.666 cv
cp
76.9998 354.786 mo
66.9412 354.786 58.7863 362.94 58.7863 373 cv
58.7863 383.059 66.9412 391.214 76.9998 391.214 cv
87.0595 391.214 95.2145 383.059 95.2145 373 cv
95.2145 362.94 87.0595 354.786 76.9998 354.786 cv
cp
f
217.393 357.496 mo
217.281 357.521 li
214.937 358.594 212.833 360.214 211.196 362.204 cv
211.139 362.423 li
211.269 362.609 li
212.127 363.106 213.103 363.554 214.173 363.941 cv
214.265 363.957 li
214.382 363.93 li
214.521 363.773 li
215.294 361.465 216.331 359.501 217.603 357.937 cv
217.682 357.839 217.684 357.7 217.607 357.601 cv
217.393 357.496 li
cp
231.292 357.496 mo
231.079 357.601 li
231.002 357.7 231.004 357.839 231.083 357.937 cv
232.355 359.502 233.392 361.466 234.165 363.775 cv
234.304 363.932 li
234.422 363.959 li
234.514 363.943 li
235.575 363.559 236.552 363.11 237.416 362.609 cv
237.547 362.423 li
237.489 362.203 li
235.853 360.213 233.749 358.594 231.405 357.521 cv
231.292 357.496 li
cp
223.227 356.112 mo
223.167 356.119 li
220.321 356.766 217.71 359.811 216.183 364.265 cv
216.2 364.481 li
216.371 364.614 li
218.508 365.164 220.812 365.481 223.219 365.557 cv
223.227 365.557 li
223.415 365.481 li
223.498 365.287 li
223.498 356.382 li
223.396 356.171 li
223.227 356.112 li
cp
225.458 356.112 mo
225.29 356.171 li
225.188 356.382 li
225.188 365.287 li
225.27 365.481 li
225.458 365.557 li
225.467 365.557 li
227.875 365.481 230.18 365.165 232.315 364.615 cv
232.485 364.482 li
232.503 364.266 li
230.976 359.812 228.365 356.766 225.518 356.119 cv
225.458 356.112 li
cp
210.102 363.926 mo
210.011 363.926 209.923 363.972 209.872 364.054 cv
208.415 366.404 207.548 369.105 207.365 371.867 cv
207.437 372.069 li
207.635 372.155 li
212.848 372.155 li
212.993 372.155 213.113 372.039 213.118 371.894 cv
213.187 369.816 213.455 367.796 213.915 365.891 cv
213.947 365.757 213.873 365.619 213.742 365.573 cv
212.44 365.112 211.261 364.571 210.24 363.964 cv
210.102 363.926 li
cp
215.818 366.217 mo
215.679 366.255 li
215.556 366.424 li
215.135 368.162 214.885 369.996 214.812 371.874 cv
214.887 372.072 li
215.082 372.155 li
223.227 372.155 li
223.377 372.155 223.498 372.034 223.498 371.885 cv
223.498 367.518 li
223.498 367.372 223.381 367.252 223.236 367.248 cv
220.666 367.17 218.193 366.827 215.886 366.226 cv
215.818 366.217 li
cp
232.868 366.218 mo
232.8 366.227 li
230.495 366.827 228.023 367.17 225.45 367.248 cv
225.304 367.252 225.188 367.372 225.188 367.518 cv
225.188 371.885 li
225.188 372.034 225.309 372.155 225.458 372.155 cv
233.603 372.155 li
233.798 372.072 li
233.873 371.874 li
233.801 369.996 233.551 368.162 233.13 366.425 cv
233.007 366.256 li
232.868 366.218 li
cp
238.583 363.925 mo
238.445 363.963 li
237.422 364.571 236.244 365.113 234.943 365.574 cv
234.813 365.62 234.739 365.757 234.771 365.891 cv
235.23 367.796 235.498 369.816 235.568 371.894 cv
235.573 372.039 235.692 372.155 235.838 372.155 cv
241.051 372.155 li
241.248 372.069 li
241.321 371.867 li
241.138 369.105 240.271 366.403 238.813 364.053 cv
238.761 363.971 238.673 363.925 238.583 363.925 cv
cp
225.458 373.845 mo
225.309 373.845 225.188 373.966 225.188 374.115 cv
225.188 378.482 li
225.188 378.628 225.304 378.748 225.45 378.752 cv
228.022 378.829 230.494 379.173 232.8 379.773 cv
232.868 379.782 li
233.007 379.744 li
233.13 379.575 li
233.551 377.838 233.801 376.004 233.873 374.126 cv
233.798 373.928 li
233.603 373.845 li
225.458 373.845 li
cp
215.082 373.845 mo
214.887 373.928 li
214.812 374.126 li
214.885 376.004 215.135 377.838 215.556 379.576 cv
215.679 379.745 li
215.818 379.783 li
215.886 379.774 li
218.193 379.173 220.666 378.83 223.236 378.752 cv
223.381 378.748 223.498 378.628 223.498 378.482 cv
223.498 374.115 li
223.498 373.966 223.377 373.845 223.227 373.845 cv
215.082 373.845 li
cp
207.635 373.845 mo
207.437 373.931 li
207.365 374.133 li
207.548 376.895 208.415 379.596 209.872 381.946 cv
209.923 382.028 210.011 382.074 210.102 382.074 cv
210.24 382.036 li
211.263 381.429 212.441 380.887 213.742 380.427 cv
213.873 380.381 213.947 380.243 213.915 380.109 cv
213.455 378.204 213.187 376.184 213.118 374.106 cv
213.113 373.961 212.993 373.845 212.848 373.845 cv
207.635 373.845 li
cp
235.838 373.845 mo
235.692 373.845 235.573 373.961 235.568 374.106 cv
235.498 376.184 235.23 378.204 234.771 380.109 cv
234.739 380.243 234.813 380.38 234.943 380.427 cv
236.243 380.887 237.421 381.428 238.445 382.037 cv
238.583 382.075 li
238.673 382.075 238.761 382.029 238.813 381.947 cv
240.271 379.597 241.138 376.895 241.321 374.133 cv
241.248 373.931 li
241.051 373.845 li
235.838 373.845 li
cp
234.422 382.041 mo
234.304 382.068 li
234.165 382.225 li
233.392 384.534 232.355 386.498 231.083 388.063 cv
231.004 388.161 231.002 388.3 231.079 388.399 cv
231.292 388.504 li
231.405 388.479 li
233.749 387.405 235.853 385.786 237.489 383.797 cv
237.547 383.577 li
237.416 383.391 li
236.549 382.889 235.573 382.44 234.514 382.057 cv
234.422 382.041 li
cp
214.265 382.043 mo
214.173 382.059 li
213.104 382.446 212.127 382.894 211.269 383.391 cv
211.139 383.577 li
211.196 383.796 li
212.833 385.786 214.937 387.406 217.281 388.479 cv
217.393 388.504 li
217.607 388.399 li
217.684 388.3 217.682 388.161 217.603 388.063 cv
216.331 386.499 215.294 384.535 214.521 382.227 cv
214.382 382.07 li
214.265 382.043 li
cp
223.219 380.443 mo
220.811 380.519 218.507 380.837 216.371 381.386 cv
216.2 381.519 li
216.183 381.735 li
217.71 386.189 220.321 389.234 223.167 389.881 cv
223.227 389.888 li
223.396 389.829 li
223.498 389.618 li
223.498 380.713 li
223.415 380.519 li
223.227 380.443 li
223.219 380.443 li
cp
225.458 380.443 mo
225.27 380.519 li
225.188 380.713 li
225.188 389.618 li
225.29 389.829 li
225.458 389.888 li
225.518 389.881 li
228.364 389.234 230.976 386.188 232.503 381.734 cv
232.485 381.518 li
232.315 381.385 li
230.178 380.835 227.874 380.519 225.467 380.443 cv
225.458 380.443 li
cp
224.343 391.71 mo
214.026 391.71 205.633 383.317 205.633 373 cv
205.633 362.683 214.026 354.29 224.343 354.29 cv
234.66 354.29 243.053 362.683 243.053 373 cv
243.053 383.317 234.66 391.71 224.343 391.71 cv
cp
182.254 373.978 mo
181.582 373.772 181.544 373.344 182.168 373.023 cv
184.724 371.702 li
187.279 370.383 li
187.904 370.061 188.384 370.368 188.35 371.071 cv
188.216 373.942 li
188.082 376.817 li
188.049 377.52 187.643 377.663 187.176 377.137 cv
186.003 375.818 li
185.537 375.292 184.613 374.699 183.94 374.494 cv
182.254 373.978 li
cp
246.837 400.174 mo
246.339 401.868 li
246.141 402.543 246.127 403.639 246.31 404.319 cv
246.765 406.022 li
246.947 406.7 246.605 406.962 246 406.603 cv
243.526 405.135 li
241.054 403.664 li
240.449 403.304 240.456 402.735 241.069 402.391 cv
243.578 400.985 li
246.085 399.576 li
246.698 399.232 247.035 399.499 246.837 400.174 cv
cp
238.193 339.162 mo
239.898 338.716 li
240.578 338.538 241.525 337.983 242.013 337.476 cv
243.237 336.206 li
243.724 335.7 244.125 335.86 244.128 336.563 cv
244.146 339.44 li
244.164 342.316 li
244.168 343.019 243.678 343.307 243.066 342.96 cv
240.567 341.537 li
238.068 340.115 li
237.457 339.768 237.513 339.341 238.193 339.162 cv
cp
260.471 376.986 mo
257.702 380.992 254.336 384.602 250.573 387.825 cv
250.633 387.553 250.689 387.289 250.75 386.999 cv
251.738 382.28 252.226 377.473 252.172 372.674 cv
252.096 366.937 251.354 361.17 249.816 355.609 cv
253.873 358.876 257.526 362.586 260.502 366.795 cv
261.626 368.389 262.64 370.061 263.517 371.789 cv
262.638 373.583 261.613 375.323 260.471 376.986 cv
cp
239.133 395.83 mo
235.854 397.662 232.42 399.281 228.876 400.626 cv
222.72 399.071 216.796 396.622 211.312 393.54 cv
205.576 390.307 200.223 386.365 195.684 381.744 cv
195.239 378.738 194.982 375.705 194.939 372.677 cv
194.916 369.207 195.137 365.718 195.64 362.268 cv
200.292 357.603 205.741 353.775 211.736 350.53 cv
217.116 347.634 222.806 345.276 228.72 343.783 cv
232.158 345.026 235.501 346.532 238.707 348.244 cv
241.595 349.812 244.386 351.57 247.045 353.492 cv
248.946 359.697 249.785 366.216 249.731 372.674 cv
249.667 378.707 248.869 384.777 247.147 390.561 cv
244.596 392.476 241.918 394.244 239.133 395.83 cv
cp
211.405 404.57 mo
209.034 404.727 206.641 404.708 204.278 404.48 cv
203.199 402.966 202.227 401.378 201.361 399.738 cv
199.099 395.422 197.504 390.805 196.462 386.055 cv
196.902 386.442 197.339 386.827 197.808 387.225 cv
201.596 390.399 205.712 393.206 210.092 395.56 cv
214.961 398.167 220.14 400.305 225.511 401.807 cv
220.945 403.269 216.221 404.246 211.405 404.57 cv
cp
200.872 345.384 mo
201.8 343.571 202.866 341.818 204.067 340.157 cv
206.341 339.935 208.651 339.899 210.947 340.023 cv
215.546 340.286 220.096 341.137 224.525 342.429 cv
224.421 342.462 224.325 342.491 224.22 342.526 cv
219.444 344.069 214.841 346.068 210.516 348.512 cv
205.24 351.504 200.451 354.829 196.248 358.796 cv
197.198 354.161 198.699 349.637 200.872 345.384 cv
cp
268.783 357.436 mo
268.503 354.947 267.708 352.48 266.399 350.271 cv
265.101 348.057 263.263 346.143 261.159 344.631 cv
259.049 343.114 256.676 341.994 254.225 341.194 cv
252.606 340.674 250.958 340.289 249.295 340.015 cv
248.603 339.901 248.13 340.399 248.06 341.099 cv
248.048 341.205 li
247.963 341.903 248.316 342.511 249.01 342.625 cv
250.486 342.868 251.941 343.201 253.355 343.648 cv
255.586 344.362 257.706 345.354 259.56 346.671 cv
261.422 347.979 262.976 349.632 264.151 351.511 cv
266.53 355.283 267.003 359.974 266.096 364.406 cv
265.655 366.594 264.928 368.733 263.992 370.801 cv
263.153 369.264 262.216 367.773 261.21 366.34 cv
257.892 361.689 253.842 357.567 249.329 353.964 cv
248.361 350.827 247.145 347.759 245.611 344.818 cv
245.568 344.741 li
245.543 344.7 245.392 344.767 245.221 344.88 cv
245.119 344.947 245.015 345.011 244.906 345.07 cv
244.746 345.159 244.58 345.237 244.413 345.305 cv
244.135 345.419 243.91 345.513 243.925 345.54 cv
243.95 345.591 li
244.952 347.62 245.805 349.712 246.532 351.842 cv
244.22 350.177 241.822 348.624 239.336 347.218 cv
236.703 345.737 233.966 344.41 231.157 343.23 cv
232.493 342.95 233.836 342.701 235.191 342.516 cv
235.89 342.424 235.91 342.131 235.44 341.608 cv
235.343 341.499 235.256 341.385 235.181 341.269 cv
234.803 340.676 234.306 340.127 233.609 340.225 cv
231.175 340.569 229.233 341.021 227.061 341.651 cv
221.931 339.851 216.577 338.612 211.081 338.17 cv
209.3 338.035 207.5 337.992 205.699 338.052 cv
206.867 336.668 208.145 335.38 209.543 334.217 cv
211.379 332.702 213.423 331.417 215.645 330.53 cv
217.853 329.639 220.259 329.167 222.621 329.182 cv
225.036 329.203 227.387 329.711 229.581 330.63 cv
231.771 331.551 233.772 332.862 235.558 334.395 cv
236.181 334.933 236.775 335.497 237.344 336.081 cv
237.836 336.585 238.457 336.754 238.802 336.492 cv
239.147 336.232 239.076 335.646 238.579 335.149 cv
237.938 334.509 237.265 333.894 236.559 333.311 cv
234.634 331.731 232.475 330.381 230.112 329.444 cv
227.762 328.494 225.184 327.984 222.646 328 cv
220.06 328.019 217.532 328.564 215.202 329.542 cv
212.867 330.514 210.752 331.891 208.874 333.49 cv
207.242 334.889 205.797 336.449 204.496 338.112 cv
201.627 338.285 198.768 338.739 195.988 339.596 cv
193.545 340.358 191.172 341.441 189.054 342.927 cv
186.935 344.403 185.097 346.294 183.745 348.48 cv
182.387 350.662 181.569 353.135 181.251 355.632 cv
180.928 358.135 181.099 360.656 181.6 363.083 cv
181.932 364.664 182.402 366.203 182.975 367.701 cv
183.227 368.357 183.909 368.531 184.551 368.245 cv
184.746 368.163 li
185.398 367.902 185.739 367.291 185.487 366.634 cv
184.976 365.306 184.557 363.952 184.26 362.574 cv
183.792 360.375 183.629 358.125 183.898 355.935 cv
184.156 353.741 184.88 351.629 185.993 349.719 cv
188.228 345.866 192.247 343.127 196.72 341.664 cv
198.712 341.004 200.785 340.568 202.895 340.294 cv
201.863 341.818 200.939 343.407 200.104 345.026 cv
197.702 349.782 196.05 354.839 195.018 360.016 cv
192.836 362.204 190.808 364.568 188.986 367.195 cv
188.847 367.403 li
188.773 367.516 189.033 367.759 189.398 367.999 cv
189.632 368.154 189.854 368.314 190.053 368.438 cv
190.152 368.499 li
190.292 368.499 li
190.333 368.438 li
191.598 366.7 192.968 365.076 194.415 363.527 cv
193.979 366.559 193.731 369.618 193.695 372.671 cv
193.671 375.097 193.769 377.532 193.993 379.96 cv
193.423 379.326 192.858 378.687 192.319 378.028 cv
191.872 377.486 191.335 377.581 190.925 378.153 cv
190.783 378.343 li
190.342 378.893 190.151 379.578 190.601 380.119 cv
191.885 381.661 193.177 383.006 194.558 384.319 cv
195.452 389.904 197.07 395.391 199.616 400.554 cv
200.219 401.765 200.882 402.953 201.598 404.115 cv
200.018 403.846 198.457 403.482 196.941 402.984 cv
194.649 402.224 192.46 401.175 190.546 399.784 cv
188.633 398.404 187.001 396.651 185.834 394.69 cv
184.645 392.683 183.93 390.487 183.666 388.213 cv
183.408 385.942 183.599 383.629 184.096 381.387 cv
184.247 380.711 184.427 380.042 184.63 379.382 cv
184.839 378.711 184.869 378.114 184.676 378.025 cv
184.559 377.974 184.443 377.917 184.331 377.853 cv
184.205 377.784 184.084 377.712 183.969 377.633 cv
183.773 377.502 183.437 377.925 183.236 378.597 cv
182.99 379.421 182.779 380.257 182.608 381.102 cv
182.138 383.483 181.992 385.942 182.326 388.367 cv
182.64 390.782 183.466 393.171 184.749 395.26 cv
186.06 397.39 187.818 399.204 189.871 400.646 cv
191.92 402.086 194.226 403.148 196.615 403.9 cv
198.455 404.475 200.336 404.87 202.235 405.124 cv
203.959 407.752 206.001 410.203 208.451 412.315 cv
210.368 413.955 212.538 415.376 214.94 416.385 cv
217.339 417.401 219.975 417.974 222.633 417.999 cv
225.293 418.03 227.946 417.468 230.37 416.485 cv
232.802 415.5 235.004 414.098 236.957 412.471 cv
238.23 411.399 239.395 410.238 240.469 409.01 cv
240.932 408.481 240.748 407.839 240.165 407.447 cv
240.011 407.341 li
239.438 406.931 238.707 406.939 238.245 407.47 cv
237.29 408.558 236.269 409.584 235.166 410.524 cv
233.4 412.012 231.442 413.269 229.321 414.144 cv
227.203 415.027 224.925 415.484 222.633 415.518 cv
218.021 415.599 213.529 413.644 209.964 410.677 cv
208.086 409.125 206.421 407.331 204.945 405.386 cv
207.118 405.53 209.302 405.519 211.465 405.381 cv
216.821 405.001 222.081 403.895 227.153 402.245 cv
230.375 403.058 233.66 403.646 236.989 403.938 cv
237.69 404 238.187 403.77 238.141 403.435 cv
238.114 403.235 238.099 403.033 238.099 402.828 cv
238.099 402.727 238.103 402.633 238.109 402.535 cv
238.119 402.373 237.57 402.194 236.871 402.114 cv
234.75 401.873 232.651 401.506 230.572 401.042 cv
233.725 399.841 236.798 398.444 239.749 396.858 cv
242.033 395.627 244.258 394.28 246.408 392.829 cv
246.026 393.938 245.617 395.039 245.16 396.122 cv
244.887 396.771 245.164 397.025 245.849 396.863 cv
246.086 396.807 246.327 396.766 246.573 396.732 cv
247.268 396.64 248.074 396.117 248.34 395.465 cv
249.139 393.53 249.608 391.983 250.04 390.199 cv
254.597 386.693 258.712 382.654 262.086 378.022 cv
262.986 376.77 263.827 375.469 264.599 374.127 cv
265.334 375.885 265.917 377.694 266.297 379.547 cv
266.752 381.823 266.894 384.156 266.591 386.434 cv
266.294 388.706 265.521 390.93 264.323 392.876 cv
263.099 394.859 261.463 396.55 259.532 397.906 cv
257.602 399.253 255.41 400.254 253.125 400.967 cv
252.149 401.267 251.156 401.511 250.152 401.711 cv
249.463 401.848 248.939 402.132 248.965 402.378 cv
248.982 402.527 248.993 402.676 248.993 402.828 cv
248.993 402.94 248.988 403.051 248.977 403.163 cv
248.963 403.346 249.503 403.4 250.191 403.253 cv
251.344 403.007 252.487 402.707 253.612 402.335 cv
256.006 401.537 258.309 400.423 260.341 398.939 cv
262.379 397.472 264.13 395.594 265.383 393.489 cv
266.661 391.339 267.428 388.981 267.709 386.56 cv
267.992 384.146 267.803 381.707 267.29 379.357 cv
266.815 377.207 266.073 375.133 265.157 373.137 cv
266.566 370.525 267.682 367.755 268.337 364.835 cv
268.866 362.433 269.071 359.929 268.783 357.436 cv
cp
f
398.711 230.244 mo
398.617 230.395 398.456 230.478 398.291 230.478 cv
398.039 230.408 li
396.168 229.296 394.016 228.307 391.642 227.466 cv
391.404 227.382 391.268 227.131 391.327 226.885 cv
392.166 223.405 392.655 219.716 392.783 215.92 cv
392.791 215.654 393.01 215.443 393.276 215.443 cv
402.8 215.443 li
402.936 215.443 403.067 215.499 403.16 215.599 cv
403.253 215.699 403.301 215.833 403.292 215.969 cv
402.959 221.015 401.375 225.951 398.711 230.244 cv
cp
396.293 233.623 mo
393.303 237.258 389.459 240.216 385.178 242.178 cv
384.972 242.223 li
384.823 242.223 384.677 242.155 384.581 242.031 cv
384.441 241.85 384.444 241.596 384.589 241.418 cv
386.913 238.558 388.808 234.97 390.22 230.752 cv
390.263 230.626 390.354 230.522 390.474 230.464 cv
390.689 230.415 li
390.857 230.444 li
392.791 231.145 394.575 231.965 396.159 232.883 cv
396.285 232.955 396.372 233.079 396.398 233.222 cv
396.423 233.365 396.385 233.512 396.293 233.623 cv
cp
374.423 244.74 mo
374.313 244.752 li
374.202 244.752 374.093 244.715 374.005 244.644 cv
373.888 244.55 373.82 244.408 373.82 244.258 cv
373.82 227.989 li
373.82 227.856 373.874 227.728 373.97 227.635 cv
374.062 227.545 374.185 227.496 374.313 227.496 cv
374.329 227.496 li
378.726 227.634 382.935 228.213 386.84 229.217 cv
386.973 229.251 387.086 229.339 387.151 229.461 cv
387.217 229.582 387.228 229.725 387.184 229.855 cv
384.393 237.993 379.622 243.557 374.423 244.74 cv
cp
373.82 215.936 mo
373.82 215.664 374.04 215.443 374.313 215.443 cv
389.194 215.443 li
389.328 215.443 389.457 215.497 389.55 215.594 cv
389.643 215.691 389.692 215.821 389.687 215.955 cv
389.554 219.387 389.098 222.736 388.33 225.911 cv
388.299 226.04 388.217 226.151 388.104 226.218 cv
387.85 226.289 li
387.726 226.273 li
383.514 225.176 378.996 224.548 374.298 224.407 cv
374.032 224.399 373.82 224.181 373.82 223.914 cv
373.82 215.936 li
cp
373.82 203.883 mo
373.82 203.616 374.032 203.398 374.298 203.39 cv
378.998 203.248 383.516 202.621 387.726 201.524 cv
387.85 201.509 li
388.104 201.579 li
388.217 201.647 388.299 201.757 388.33 201.886 cv
389.098 205.061 389.554 208.41 389.687 211.842 cv
389.692 211.976 389.643 212.106 389.55 212.203 cv
389.457 212.3 389.328 212.354 389.194 212.354 cv
374.313 212.354 li
374.04 212.354 373.82 212.133 373.82 211.861 cv
373.82 203.883 li
cp
373.82 183.539 mo
373.82 183.389 373.888 183.247 374.005 183.153 cv
374.093 183.083 374.202 183.045 374.313 183.045 cv
374.423 183.058 li
379.623 184.24 384.394 189.805 387.184 197.942 cv
387.228 198.072 387.217 198.215 387.151 198.337 cv
387.086 198.458 386.973 198.546 386.84 198.58 cv
382.939 199.584 378.729 200.163 374.329 200.301 cv
374.313 200.301 li
374.185 200.301 374.062 200.252 373.97 200.162 cv
373.874 200.069 373.82 199.941 373.82 199.808 cv
373.82 183.539 li
cp
384.581 185.766 mo
384.677 185.642 384.823 185.574 384.972 185.574 cv
385.177 185.619 li
389.459 187.58 393.303 190.538 396.293 194.174 cv
396.385 194.286 396.423 194.432 396.398 194.575 cv
396.372 194.717 396.285 194.842 396.16 194.914 cv
394.58 195.83 392.796 196.651 390.857 197.353 cv
390.689 197.382 li
390.474 197.333 li
390.354 197.275 390.263 197.171 390.22 197.045 cv
388.808 192.828 386.913 189.239 384.589 186.379 cv
384.444 186.201 384.441 185.947 384.581 185.766 cv
cp
398.291 197.32 mo
398.456 197.32 398.617 197.403 398.711 197.553 cv
401.375 201.846 402.959 206.782 403.292 211.828 cv
403.301 211.964 403.253 212.098 403.16 212.198 cv
403.067 212.298 402.936 212.354 402.8 212.354 cv
393.276 212.354 li
393.01 212.354 392.791 212.143 392.783 211.877 cv
392.655 208.081 392.166 204.392 391.327 200.912 cv
391.268 200.666 391.404 200.415 391.642 200.331 cv
394.018 199.489 396.17 198.5 398.039 197.389 cv
398.291 197.32 li
cp
370.731 199.808 mo
370.731 199.941 370.677 200.069 370.581 200.162 cv
370.489 200.252 370.366 200.301 370.238 200.301 cv
370.222 200.301 li
365.825 200.162 361.616 199.583 357.711 198.578 cv
357.578 198.544 357.465 198.456 357.4 198.335 cv
357.334 198.213 357.323 198.071 357.367 197.94 cv
360.158 189.804 364.929 184.24 370.128 183.058 cv
370.238 183.045 li
370.348 183.045 370.457 183.083 370.546 183.153 cv
370.663 183.247 370.731 183.389 370.731 183.539 cv
370.731 199.808 li
cp
370.731 211.861 mo
370.731 212.133 370.51 212.354 370.238 212.354 cv
355.357 212.354 li
355.223 212.354 355.094 212.3 355.001 212.203 cv
354.908 212.106 354.859 211.976 354.864 211.842 cv
354.996 208.41 355.453 205.06 356.222 201.884 cv
356.253 201.755 356.334 201.645 356.448 201.577 cv
356.702 201.507 li
356.826 201.522 li
361.04 202.62 365.558 203.248 370.253 203.39 cv
370.519 203.398 370.731 203.616 370.731 203.883 cv
370.731 211.861 li
cp
370.731 223.914 mo
370.731 224.181 370.519 224.399 370.253 224.407 cv
365.558 224.549 361.04 225.177 356.826 226.275 cv
356.702 226.291 li
356.448 226.22 li
356.334 226.152 356.253 226.042 356.222 225.913 cv
355.453 222.737 354.996 219.387 354.864 215.955 cv
354.859 215.821 354.908 215.691 355.001 215.594 cv
355.094 215.497 355.223 215.443 355.357 215.443 cv
370.238 215.443 li
370.51 215.443 370.731 215.664 370.731 215.936 cv
370.731 223.914 li
cp
370.731 244.258 mo
370.731 244.408 370.663 244.55 370.546 244.644 cv
370.457 244.715 370.348 244.752 370.238 244.752 cv
370.128 244.74 li
364.929 243.557 360.158 237.993 357.367 229.857 cv
357.323 229.727 357.334 229.584 357.4 229.462 cv
357.465 229.341 357.578 229.253 357.711 229.219 cv
361.613 228.215 365.823 227.636 370.222 227.497 cv
370.238 227.496 li
370.366 227.496 370.489 227.546 370.581 227.635 cv
370.677 227.729 370.731 227.856 370.731 227.99 cv
370.731 244.258 li
cp
359.969 242.031 mo
359.874 242.155 359.728 242.223 359.579 242.223 cv
359.374 242.178 li
355.092 240.217 351.248 237.258 348.257 233.623 cv
348.165 233.511 348.127 233.364 348.152 233.221 cv
348.178 233.079 348.265 232.955 348.391 232.882 cv
349.959 231.974 351.743 231.155 353.696 230.449 cv
353.864 230.42 li
354.079 230.469 li
354.198 230.527 354.289 230.63 354.332 230.756 cv
355.744 234.973 357.639 238.56 359.962 241.418 cv
360.107 241.596 360.11 241.85 359.969 242.031 cv
cp
346.259 230.476 mo
346.093 230.476 345.932 230.393 345.839 230.242 cv
343.176 225.95 341.592 221.014 341.258 215.969 cv
341.25 215.833 341.298 215.699 341.391 215.599 cv
341.484 215.499 341.615 215.443 341.751 215.443 cv
351.275 215.443 li
351.541 215.443 351.759 215.654 351.768 215.92 cv
351.895 219.716 352.385 223.406 353.224 226.886 cv
353.283 227.132 353.147 227.383 352.909 227.467 cv
350.532 228.308 348.379 229.297 346.51 230.406 cv
346.259 230.476 li
cp
345.839 197.555 mo
345.932 197.404 346.093 197.322 346.259 197.322 cv
346.51 197.391 li
348.377 198.499 350.53 199.488 352.909 200.33 cv
353.147 200.414 353.283 200.665 353.224 200.911 cv
352.385 204.391 351.895 208.081 351.768 211.877 cv
351.759 212.143 351.541 212.354 351.275 212.354 cv
341.751 212.354 li
341.615 212.354 341.484 212.298 341.391 212.198 cv
341.298 212.098 341.25 211.964 341.258 211.828 cv
341.592 206.783 343.176 201.847 345.839 197.555 cv
cp
348.257 194.175 mo
351.248 190.539 355.092 187.58 359.374 185.619 cv
359.579 185.574 li
359.728 185.574 359.874 185.642 359.969 185.766 cv
360.11 185.947 360.107 186.201 359.962 186.379 cv
357.639 189.237 355.744 192.824 354.332 197.041 cv
354.289 197.167 354.198 197.27 354.079 197.328 cv
353.864 197.378 li
353.696 197.348 li
351.742 196.641 349.957 195.823 348.391 194.915 cv
348.265 194.843 348.178 194.718 348.152 194.576 cv
348.127 194.433 348.165 194.286 348.257 194.175 cv
cp
372.275 180 mo
353.657 180 338.563 195.094 338.563 213.712 cv
338.563 232.331 365.126 270 372.275 270 cv
378.86 270 405.987 232.331 405.987 213.712 cv
405.987 195.094 390.894 180 372.275 180 cv
cp
f
360.424 381.97 mo
385.089 381.626 li
366.841 397.79 li
366.479 398.11 366.151 397.979 366.109 397.498 cv
365.737 393.278 li
359.884 394.547 353.955 394.343 349.026 392.693 cv
342.589 390.611 338.488 385.884 336.041 380.706 cv
332.4 373 333.928 363.993 337.385 358.608 cv
338.598 356.677 340.113 354.657 341.795 353.702 cv
341.283 355.508 341.37 356.394 341.102 358.284 cv
340.905 358.636 340.646 359.522 340.473 359.879 cv
338.053 364.771 337.518 372.663 339.75 377.187 cv
342.465 382.689 347.5 385.546 352.491 386.57 cv
355.647 387.244 359.711 386.938 363.003 386.206 cv
360.103 382.66 li
359.797 382.285 359.94 381.977 360.424 381.97 cv
cp
403.328 378.244 mo
403.235 378.395 403.074 378.478 402.909 378.478 cv
402.657 378.408 li
400.786 377.296 398.634 376.307 396.26 375.466 cv
396.022 375.382 395.886 375.131 395.944 374.885 cv
396.784 371.405 397.273 367.716 397.401 363.92 cv
397.409 363.654 397.628 363.443 397.894 363.443 cv
407.418 363.443 li
407.554 363.443 407.685 363.499 407.778 363.599 cv
407.871 363.698 407.919 363.832 407.91 363.969 cv
407.577 369.015 405.992 373.951 403.328 378.244 cv
cp
378.438 363.936 mo
378.438 363.664 378.658 363.443 378.931 363.443 cv
393.812 363.443 li
393.946 363.443 394.074 363.497 394.167 363.594 cv
394.261 363.691 394.31 363.821 394.305 363.955 cv
394.172 367.387 393.716 370.736 392.948 373.911 cv
392.917 374.04 392.835 374.151 392.721 374.218 cv
392.468 374.289 li
392.344 374.273 li
388.132 373.176 383.614 372.548 378.916 372.407 cv
378.65 372.399 378.438 372.181 378.438 371.914 cv
378.438 363.936 li
cp
378.438 351.883 mo
378.438 351.616 378.65 351.398 378.916 351.39 cv
383.616 351.248 388.134 350.621 392.344 349.524 cv
392.468 349.509 li
392.721 349.579 li
392.835 349.647 392.917 349.757 392.948 349.886 cv
393.716 353.061 394.172 356.41 394.305 359.842 cv
394.31 359.976 394.261 360.106 394.167 360.203 cv
394.074 360.3 393.946 360.354 393.812 360.354 cv
378.931 360.354 li
378.658 360.354 378.438 360.133 378.438 359.861 cv
378.438 351.883 li
cp
378.438 331.539 mo
378.438 331.389 378.506 331.247 378.623 331.153 cv
378.711 331.083 378.82 331.045 378.931 331.045 cv
379.04 331.058 li
384.241 332.24 389.012 337.805 391.802 345.942 cv
391.846 346.072 391.835 346.215 391.769 346.337 cv
391.704 346.458 391.591 346.546 391.458 346.58 cv
387.557 347.584 383.347 348.163 378.946 348.301 cv
378.931 348.301 li
378.803 348.301 378.68 348.252 378.587 348.162 cv
378.492 348.069 378.438 347.941 378.438 347.808 cv
378.438 331.539 li
cp
389.199 333.766 mo
389.295 333.642 389.441 333.574 389.59 333.574 cv
389.795 333.619 li
394.077 335.58 397.921 338.538 400.911 342.174 cv
401.003 342.286 401.041 342.432 401.015 342.575 cv
400.989 342.717 400.903 342.841 400.777 342.914 cv
399.198 343.83 397.414 344.651 395.475 345.353 cv
395.306 345.382 li
395.091 345.333 li
394.972 345.275 394.881 345.171 394.838 345.045 cv
393.426 340.828 391.53 337.239 389.206 334.379 cv
389.062 334.201 389.059 333.947 389.199 333.766 cv
cp
402.909 345.32 mo
403.074 345.32 403.235 345.403 403.328 345.553 cv
405.992 349.846 407.577 354.782 407.91 359.828 cv
407.919 359.964 407.871 360.098 407.778 360.198 cv
407.685 360.298 407.554 360.354 407.418 360.354 cv
397.894 360.354 li
397.628 360.354 397.409 360.143 397.401 359.877 cv
397.273 356.081 396.784 352.392 395.944 348.912 cv
395.886 348.666 396.022 348.415 396.26 348.331 cv
398.636 347.489 400.788 346.499 402.657 345.389 cv
402.909 345.32 li
cp
375.349 347.808 mo
375.349 347.941 375.295 348.069 375.199 348.162 cv
375.107 348.252 374.984 348.301 374.855 348.301 cv
374.84 348.301 li
370.443 348.162 366.234 347.583 362.329 346.578 cv
362.196 346.544 362.083 346.456 362.018 346.335 cv
361.952 346.213 361.941 346.071 361.985 345.94 cv
364.776 337.804 369.546 332.24 374.746 331.058 cv
374.855 331.045 li
374.966 331.045 375.075 331.083 375.163 331.153 cv
375.281 331.247 375.349 331.389 375.349 331.539 cv
375.349 347.808 li
cp
375.349 359.861 mo
375.349 360.133 375.128 360.354 374.855 360.354 cv
359.975 360.354 li
359.841 360.354 359.712 360.3 359.619 360.203 cv
359.526 360.106 359.476 359.976 359.482 359.842 cv
359.614 356.41 360.071 353.06 360.84 349.884 cv
360.871 349.755 360.952 349.645 361.066 349.577 cv
361.32 349.507 li
361.444 349.522 li
365.658 350.62 370.175 351.248 374.87 351.39 cv
375.137 351.398 375.349 351.616 375.349 351.883 cv
375.349 359.861 li
cp
375.349 371.914 mo
375.349 372.181 375.137 372.399 374.87 372.407 cv
370.175 372.549 365.658 373.177 361.444 374.275 cv
361.32 374.291 li
361.066 374.22 li
360.952 374.152 360.871 374.042 360.84 373.913 cv
360.071 370.737 359.614 367.387 359.482 363.955 cv
359.476 363.821 359.526 363.691 359.619 363.594 cv
359.712 363.497 359.841 363.443 359.975 363.443 cv
374.855 363.443 li
375.128 363.443 375.349 363.664 375.349 363.936 cv
375.349 371.914 li
cp
350.876 378.476 mo
350.711 378.476 350.55 378.393 350.457 378.242 cv
347.794 373.95 346.21 369.014 345.876 363.969 cv
345.868 363.832 345.915 363.698 346.008 363.599 cv
346.102 363.499 346.233 363.443 346.369 363.443 cv
355.893 363.443 li
356.159 363.443 356.377 363.654 356.386 363.92 cv
356.513 367.716 357.003 371.406 357.842 374.886 cv
357.901 375.132 357.765 375.383 357.527 375.467 cv
355.15 376.308 352.997 377.297 351.128 378.406 cv
350.876 378.476 li
cp
350.457 345.555 mo
350.55 345.404 350.711 345.322 350.876 345.322 cv
351.128 345.391 li
352.995 346.499 355.148 347.488 357.527 348.33 cv
357.765 348.414 357.901 348.665 357.842 348.911 cv
357.003 352.391 356.513 356.081 356.386 359.877 cv
356.377 360.143 356.159 360.354 355.893 360.354 cv
346.369 360.354 li
346.233 360.354 346.102 360.298 346.008 360.198 cv
345.915 360.098 345.868 359.964 345.876 359.828 cv
346.21 354.783 347.794 349.847 350.457 345.555 cv
cp
352.875 342.174 mo
355.866 338.539 359.71 335.58 363.992 333.619 cv
364.197 333.574 li
364.346 333.574 364.491 333.642 364.587 333.766 cv
364.728 333.947 364.725 334.201 364.58 334.379 cv
362.256 337.237 360.362 340.824 358.95 345.041 cv
358.907 345.167 358.816 345.27 358.697 345.328 cv
358.482 345.378 li
358.314 345.348 li
356.36 344.641 354.575 343.823 353.009 342.915 cv
352.883 342.843 352.796 342.718 352.77 342.576 cv
352.745 342.433 352.783 342.286 352.875 342.174 cv
cp
376.893 328 mo
358.275 328 343.181 343.094 343.181 361.712 cv
343.181 367.185 345.476 374.304 348.899 381.628 cv
349.164 382.195 351.902 383.367 353.587 381.97 cv
365.164 372.369 392.463 375.447 398.623 381.607 cv
402.033 385.017 390.368 396.605 378.869 401.69 cv
371.039 405.153 360.022 400.859 360.903 402.105 cv
367.387 411.276 373.873 418 376.893 418 cv
383.478 418 410.605 380.331 410.605 361.712 cv
410.605 343.094 395.512 328 376.893 328 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.0.0
%%For: (\700\753\745\752\761\745\751 \705\743\756\760\756\742) ()
%%Title: (vector globe earth world icons.eps)
%%CreationDate: 11/11/2013 8:50 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj4bFde<RKYH.[*R5HJIo:REB7#ZslUF'S4M*]cD&V2XsSFhU"\%d&eXZ_1WgROH3Cc[!-c!jCIX6-FiH12s6kgh97qH:Q&
%f5a@(/6TEI_111Rs7P<dMs>c<^:$P*;=7`pp!-mE;%D=IogZ(2C+j5j[8QgP^<^ZLa2MdF-oP7qV,#%PC><JDF2tcWdTNfEiFd%P
%O1-a@kof23BL/)Bf@]!)-`<lnX;1[m\,TFZN6EXKS]BXZ(pcIh`Lj\:qnZFCh.`-8eOKKnJ!\o1AGq.R=ctFO`T<%RJ*,t<9HcAI
%F_`#N==3H)O.H**9Y]=M9:JF3[#iR_2"a@&l!DjNr`R\>s1$h6-Ti=c1LnNfH[>pt@7UV.W2Hg.2*ep^!*\N0P<e_JE7q=X3WYkD
%@G"^EZR#Pr5D5TlTXa$FCLeG5ZfG53eormX_&meAT2a_Cgk-^!i6UN/MkF#U>3a1MXj06*5BO8i<`J[>[hc@-euKfXRnVnd60pEX
%6&i[=LDO_P55tbMr3ts2=DFB1*?rcuXc%7&c?NOfh<XLjG3NW>1:5OT]?R!tfQbFU?*Z"G@osMla0`L<YM8#%foDKJq)#MK1tA+`
%!5l^2?2>YgB90!6[oGSlesD^c3a0SN'd7M(Wg/s3>pJCO?T`,T9Dmt.s/F6UkabIF&(.'ia6PenNmP'n#?Z;I?<M2OiXFQ9QmXYm
%':[JiBBn7H"+Ng>FINUWDE*+$TE3S(-N<bS?H[QLnQr=j?Z*:jh<%c:[.3U7c/gF7P9BHL.!HR]3n6i7pZ*9AR*Wu2[q6+SV)$:]
%T;+U';RJML@R>[Q'kHB0)Ts5ehc'HBAit&^8X4N%C#,`f#\o?2@cF>_<3Khm9!)]oanKPHHE!1g0;?"dX$>g;&tpkJ4`3nM/Q#<-
%OMld]:Yuf:F@^eEC8k+oSE+WcYI((Xj^[31V(p5Z#<sk;)RX>W17BoM&j</J>pj=9GO)QZ<k!LK3G^Ne0d<EGqC4\i<_(/'bT]pI
%5mu&+P<8SdWE-'k[7\^8C3e2("29g3)DX2c'pT[&K3%@;.U)3(Le1bt,bg8jQ%\$+[_B2r_4RQ!q4,CH8ZU@@"s\@)a*V!lPIA^U
%FK:rT5-Mt;'=M*,i4RQ-1O9fM4l^hT@o<k0"gG?j;Dm[,I!P4!P>&OtPl6g03O;DOhX>9q-;De3Kk_K_\^^I9iiA?ggg?DU3dnP,
%88;.#\t+?sefo7\[9BF+53;BNXjRRAgr%2qfcjiEI>P^"563io3N$ZHKDE`T".HTGf%]FZWRb(_riB-]k<li29:+(b2PBmu:,FZf
%61sTWP6.2Wj1)lr"3b+$i:q)n626iLKV.9,TtuIg_SI0#d4)C`)t>@blfgPb.!&V5\Q\U;FKCN-Y?FKu'fmqDg[V)]`(mda6=*d-
%*/qmkN#IP4B_&D/1`DTZcmFN3"YaB*EIh&,*-A2k%#bCic2HS,Vd[N8hIDb:=j7usfL`%_'O/EJ/l?=$q:XAL>eh5P+fff?GKZQ*
%O&RKmm$pu+%,8:@h8VrXr8;OYcq*O#HLt";LoAm[SR@NB8$?opfKl:e.L2I&FesX;'gUf3BBTO55W"oqX$f-M$;f`bA*+SN`7jRH
%V-oYIZjX=T7W73V+ZR`JbZq]8"(p]<9bn!j=)O1+3G[d"S[M.$+4aaWWpQ312\;@E1\Y+E\J4"e.J;e#8=,_t2o-,9k0*_TiL0L^
%1LDc2qd\G/?S3'I;rc%Q)7RDN9*`CgqfCi_jF\O?mGPWVC&Bta?%j2\h7m0e02n7*m7sJhr2=Z#Be$;/fmR+ES^b6g1tCK*iPoR8
%CmM["G-t;q%u5&.mH,,D<_4Oe.q=h0BjaIVeLP,Dlfm&3ih]`:oX#W\Y2P*ak4N#7D(<*/#3ulOHtC#?n`T^e^SOHHr2c`O%B=m;
%U:Cu7"7:!lZr@MFb,'1[olQg_KYIZpC=@C=_t[g^_md4CK&R($DQVFBpoE)H#PBo]>ob[Y!7SiphPdnFV&R5e&"-=NA'*</'I5Bs
%hQX/Z!b9+G@<1X3Jao?H@/O[(2TB'u>46:*$OSKb^24i<<o$f"_c.O;2iJ,<HtFM/,+WtBi-4;d-MqJRc0)W?Q=J>g5RKU8+q<:6
%N03F)W4%UmE;%)?:GrX!JiGnI=;,Nb?^PP80W.009n>48D0b\MX4fSK$p&*QR4@#pX*47Vr(K-M/`]]rDS8W;pEn*Cc3)l/>%[ji
%3L//jH:GN;kODc#0rsm@VsGg[<ol+GR^#rifI<J]oWVr-,FS%ok5WZ%NV,c9Q>ZrCIo<'eDgNLgSkX3)\5fP.]4k#"lo8>Om']l)
%<N::JhC\?C;B3p1jCH^Nffq#PI[e%(BJn-+MS9csC'*4QgEjjO_J;Jlf58)0R-*PZ9R-M[]SG6<96ptVek(aHbOk;u(iF'c/d@s-
%.bIsM0g6=`9g#VW0c6gBf5LK@rY.j[V0Df8P`c!:]DWDd=js*iVYgT$_eMQ%![6t(KJD@W84-@??U/Wn<+cQDRMs_E#+1lNX77Gm
%;C%mccV*qW:ceqtr4<e[E`#nmN!mAu'H+cW_fp7ER'fY^g2>J6jT*&jZ;YL5V96>"d<$g8LK!0r`4oiI\al]n4H9W5+4Jk]@E44j
%L_Hte;T.(^7n8Qt"bXQ_`lV"m>pgmE>J?ppMb3)l1j:OLnpMT/r9<J)q@pa#p@=HsP[unReQOP1"]B2b#FaX74,l'T;.Fu-P\P]6
%IL`\nHF^+UC8GGskrHSsn?g`U9LE.AD/@4,MISXQc;H)=eSf8oOogk?R[5*fYAo+jDq%_,Y#;gc^$K'(/Wk]6fm-h1V(`@Ai.[*(
%AhZ\Af\:m\5dg`;`DaQRWDrCDQt\gD\rI/u>.#E9;I#eBQYL+0%W2WHiiZea/5#U#AL\I!r*;Co"YXIlnn+.8'B,ULDc7rS)ITEg
%HnhZiRABUo.a"3)?Ct5l9MHhU/cNl-1bY5c\lt=T]JV:@B?G!e;OEbK;N$]qW$]7pj`W&ugJj)o#+/OFb,cB?^S,LV[3u^Nl\m5W
%\Xg,VW?gKAl_rQ;Min:3BsFV7]bVpE=\Ll#gt#YnnnkBq8H[2DE;`"hV4#>lRT*pF"0"$#Z^gHMkG>3JR[qCh]l@P.%cXtc@[oNi
%<UVTbD&jGfI4E;;E.hmCoiIT<hmC&\kI/'#qKK^IB<6^XAoF**agIVZ2.n8f;P7DEf4K&?-J,+]Y&1PEAS/*ibdC"XCB965-Il^+
%m:K75Aus79[@(!`8[[:seWLfDj"]W(-Oh@N;"/[-Z;["gS?^JdfuT_h;$n#]fP&8o4Z)cFnKU0)QEaAQ.EYuk;cP:oqMkq5&qPD[
%^Ok0GXn;40%!Na?NL!ebARjr;ph>)#9=8(4:94'H5J5ZJf$t1$SO0=m<$_=#$aa.5:7#2W/egGX/@1\:N!l^a3bn@8P_#KerCn^-
%-JjG3)Q7"k'?YQ177LW=[#AnOhcbd6>G5^+GD3cPr17[Ij7>NRo#@"f1Q?;(%i,'[*8U/7kGJ*LnYmts:C#2F@N#2fUg5>H7X7T-
%RriX.FG'TYnn:-E4rTd47[mZ7h<lsWof)!c3!I-E#i/HPJJ<*uM_pBB0h/lQ&^%^&#%nGTqIIJt/2,QVK/H-i56VJ5b-?8#0ZOF9
%%5$Usf82GM]b@Rg9<Dslr%dK3Yuml(8,fBP0A[$^3K8lO)kQH`VVga;h^ndhbQ$E5Wh0.W(g]<aBs^"Gs3C2MZi'8Cs!q<DjaUq=
%h\``*kC8!U04BgcY!N?FcrO&u=L4OdKLWBs4:j?mq9F#pZ^gKDNO]b#>kR`rgCDdRFg@_,BkZkULiF$]c_+<Sr&G\6>4q6p6QMK8
%GQDFa#l=jcbna)*)%KQYahF\IfW9fAU:f5A,o\Ni=M<N<>kUn'VH)u2Mj.+SLh77)aN9r@aCZ$i=bLUq<hB7plm,*B;H\@Q0\J_<
%Amr"&!L3@..qbt,W3;;J(p&heWh)(KIT.8oTX3&R.P$KZWBN/B4c>ql6d0m+_O78#<%kkS@6[!/_cpQqED`En!h>oQT2N\T&q.e?
%VC>J)&?u\\5M"PQJiF\'8cqd6fon,$bn64Dn6r&D&+*t*-Mt(@gMRKp0%DDl2u[QT?(NMWHZdE^!)0(j_VO&kdX62Y/FYD&]Z^F1
%ZbXa8n1kBabQ9H(^ro8CKeSDf?;qVnj"IaSb630bZbXaY!\`RIos^jEB4:p5#Kl"nl3PgT]2F!NR)Hp5=DlsL-@U<_BUk6"\mI@X
%js:7rrj%A;00,E5Cgo/-R.Q_>Ub>-*I'%YJI`:?u^1j<BmHg+<6f[PijZ()6A^Zk(lqL0;TcA!gS!\*WAkfpi9J:U&\oHM<1j]>R
%m<Sl`%F0+ip8-HsQc;Ikru5l`b&&.@S<k^b5A*2YF5(ToVg.OWlrO,(Qip?;SNXq&795/bd%9Np^W&cIBjaL%CTH6)ZIraIV,u^L
%ZlO8(%BZ:d;C#$WcgNWJs,0(VYFP%JF9X)ZA:A%R@!W;ok+PM%LSe;0K@(D0B=3o&'M\6>QbLqn1r,Udl,oZnNoL1R8[hWKPK"X`
%UH+\OLbo=p)"#0>[5c1mA]qP6NoA4A(fTME9RRnu]*3251bd/5(_c6":)hO*iY]!]`h]0L/<2HC@n]H6j+#*:l]b;4.G]1Im'KbB
%G=o9pNG=o.Eu?nL+49^j!NGu-=7_@UL_R+HWHk[A]lDDuG07]hT0;$eqAiUPWNK(loH"ff=uO?(HVR3#T\'UcGCt3%NORBgIpB4S
%H!a@\Haucnj@?3`96Qn;f"16XJ+fV1<+9q80,i9E.=TX>dn$6t)rlS12SLdmNRU102(m?s%sJs/,dWg`%>/:+?C$hqE1"<hBcq)u
%r`r+U$i\rB[6_PXn8m6!STJYc(=O6;]KL0t8S(mt]%?mB?[=KQ;!lL[H-HDeBftG1<:H.[R&MP08d!:jQ[>P0@92_P)6&;A&31eT
%GQ*(?ZIBb'Q;(RE!<CARn^A,/f5>L\5"-dJhhf=5dls>uE`Y*53.8>Z,&cVgc+LTT2`L?j-GU@bH#kc[m[s79;OEWVh4)$1j^Brp
%DOUL6'X,??;Kj_sA2AFIk0D6,\X>N<F6@H)!SOs(SP'.1e@9QmqCQ[MdK)(DkpF<E4)-T%B<>&MrGgTj\_Hgn$n7/!faA\;n"chn
%5X-PZ"#ooAQ'f6,F7rps.=A>;(kK:^_X!h>6,n/$d5<]?jB&+C:MQ`s`C`Ug)U20jgA/:L.U:Wor2c`O;QG9,U:ZXSN]f7IPS0R%
%@A>"PD^r<]fA7/snNkI-oJPmUo[a!/lE.K)gAI\cp"LeIDZ0%cWSc<4Dq+UW][M*3r?K<NE.=IW]&m<t57G8JSQJPefKWbKn>6,<
%Xb1XCPo83&HX'CDW$H)$>Gn<<O;=qSmP>+ADh4&IpNEH(0;\[PiEIAmf$+oA=8G_cZC<<[)"em#_)a%%a:m(e;p'''U@5TW@b!8h
%GOkYao;PPt)dtg66?_mCDM3_Z[SlKkC!GIWHY6q.9XJAMUE:GH)XANjCY_=u2u[PMl9QmIl0=?:p*.AuhS9H13b2h:c&ACSBGA^-
%U47P8#E";7g*jOL"j/dPZ4h.4gq!djD`<8[_<tYnRM:YJ+q=EVN04!9(i'r*qXhRrNt6t%k:itqTa(d;Z=+UDJt!eubjiN2541H,
%>4K&OlBYW(cM;%5l=Up18jCn,S\7pDW!bUaNYAKr-=&X/&]uok3#T([l,rONDUu`VaRjLsVAgo_N;dI4j"s5eB0S:6WCG5&&W5%Y
%*kuh6;b7S1n/X^%lW;%q^+Nt8F3M,i]gT@*27('p2rDWS8uDO*7$f3g0#_TEVF$%'),:&IoG"]lL6`q1&7X:3)W^h7/$2Mah7fa3
%D5ob2>,/KH*Nr2GR(-GQd;=<Na7$bT2bkE_qKHI$h1h8,/>Y%!-iP\8^G!_d(3"Hs9D;l8ao,09P)3O+SghaGgq[0aGRh<-"a3E_
%JDq&ggT.;l7A=<"c=Z']7o/`gePg0X-P%]GD8L#IU8^)MDj(A,Xh?q.>/b5lN:Ds#45is!,gGRK7<Hu!U^2T/_!f^+++&<p=dg&:
%p%&)]MNQX]A6CjdASsStD9g4=ggm;>IUSNaCN0Wl34SO,fIGG+VeLTO@010B`YT+353d,D4)O!%c<D1]&?6\Q,s;Wa$p#C]H-=`Q
%1CrYMl#g$9q0P^bJ("mFp`i<?Ea-+u]MYk#5DI*n2O]Y52sP`H$bp1b8[[`6ZYDZ!c+j;O](sNZI/,DHl5\_^eSQLp=7sS*FoDMY
%REO,@IeT;>/p'Kdnfrt)J&:3E>Hbu[j>=>p?E2R4d\Wo3JNB;KWmB\_@0`?$q;UPSd]A`f[B&D\V-8k:i;,_DJ#MbC<9M4a)*p5r
%FS:?-UK%UMr2k'?W(Br4^&RosIqb=;o^n-srljS0Agd37Z^.TgS%d[uQh52"o7JGH6tULs\KZp)`Bc8I-[V[jB-:IT>#;D]^r>t#
%n-luQ(hl6+Cd"A!ps-&JA%baCFK:s@+S60CLI_JZrHBqc?1X%F/Mm.0*GkWZlFRdV@gWlHN6kkqRFRkP)+ND35kKL,M5IuZjDfNS
%U+mU:"m%?p,@?0iL"@\o5>ccaN1A3caa6jtCt<(;X(]V_%*bS2B6?r?4c:Cuc*`53Z4?lsdXu2tVJBf#Q[Xq`pc_6pSlpE%`_#BS
%d7S)U<!taX5XaJc#lsI;_npT'Y3.j#NBQUAB4B3$CLQ]0BC=54:!i=83(<IbSknYMIt4WW0E1pR]e\`XD;VY_+L@ANHCBZqbHl&e
%A/^J@H"`'6S(iFmCIVp"s3BYC[DE*LE:l:qA1o%B*'na(NOqnHmlBm<Lm9U-W8Pe-i%GUi?CiugR-O\tNK1a(@4S9N(E2E'APhh0
%8f]+N#KKWW#1+SYp6a4VOKbnnHp-7gV9Y4:qVRb(+'N6C=o%"N>.<G+n_D$.qtN[\eQs-X'2W=h0f$`amAA_:EU$Ci2X+o$M>Ga@
%jbmO-lcjZ%@FrJT!:Zdf`t'Y[Y$@m=6o,'6k;>Vj!mkKPJ!)5Z5#SQV]H/&j6U__Uj]%b4k+p$m#WEP,b<OF5"n\>oJd7h-DS+B-
%S,i*R>=iqI?%O(%*D1^HSl5S-Huh!Qi:=XrTA.?-mF+9IJA.pHP.,5Wo'I%LQ;%kRISd%M"*(?5''DEr5:/Q7OJVh[ESa+CQc6uU
%gM"YthVF:D-Np$;1l!sZ-3nJIkCeA]LJbOSn=2<rA5m@MVk)XEok\_*Kf='qd)=QI//T[_`':m5O3,JtiZ#VegXn&8>*l)5Y:lU+
%Vq"siD=:fJ89UU2#1*R%h#h&_e2dsuA4Rl6e(uRM!qY]MgCuiu7LG-$@u$?[Y5:r-?A.t]QjCj][?7id]j%L:46\#>e9<*e)h!Ca
%<o^7r[+j+Ql,"W-rMKe<i:8.lCoso0[2KTMWSkEEAg1V'XiDC*:A(phT9Ra97.5t_Dm\>S+1oX#P"&6FLm$RA!lDKp7K-X4V0dJD
%iHj01=sq,r)eip^G9\HJ)LE[:Uj/!MEYGjcp?A1_Z&d)$;lZ'C__)2OA2F5BhTWZjb2oI/a[GU:_)>VL_]7+-]&EIRA(XtjQM`#5
%$S?/iNolf`Fm8-Y\iBhXH5VI240J$se1o@O'a]9AU\XcZl^[k+E-$ADc99m2mI&_U\bQ'8o`KiCb$MK'&VRG9P19;2&6.Qh^.Y-@
%e=uDQ>CL1ngM(gmRJg$q'=8IQBD-t$UXkDW1(pG94bIp0pA(X1F.[W-9!s#6puZW!cJ4_gB;4H;0itiP.FoUglTm&-7s7SQaWsbH
%Td;[3gifZGeh*ErRCu(rgC2]ch5lo:U@oe?<UA:OiS\oGWsuf2KQsi:#fo1*Xr22LfOh0f3Sm8"BB-0j9J4q=#0)#d?6u^[$%EN9
%?BdLXYO+fi<!1KamP%`b7(imK6#3OJdl7+$+l^gM]&+DN*'0M:#hc&#Vj\dX\C?Q#6I\k*FDQ%\[;%kG[(3KC4^cu0]fX&;i=;sQ
%&H2+&EADIN0[FP?5D!'p?c+Y37/'T[F4)JE.N/5^_MjUKZI?n?0ipBDD;)n>lBqc.O.8,U=!-.7(_O9O3DsQlZ[E+RJ`/T;$0eNo
%W`8h7IT^DmoUf=!fsl(`K]#7S4h$]uFZYS=Ks0.pb[mJubZrX:jU4+E_KdBcY9A=p`9a<q5c=uKs*M/_T4sU[6m(g]A[b]48.6_o
%_@CIF1eTF5"H\qO<iCAPc&lX`KB#^iOm\U.)0HGN`-SE^UXVJ`Qe-R,B2R4U&S)B.c8-E)C8Z/O:&(,o]R16:Zl&O15=fb?7SZR`
%'#,%G=pAetCGgPDXX4B[7^6d?<c&JN8D!f/BK7;R-hoTn-4V!>UmC6CP/Uf!CHMH?ZdteOmg%*TXW=$En)ulh,*TnX]0.P`A_+-.
%_aYuN%O\YR:9"t$o\sh&4-M=_00lK/8nRCP[6c=b2/'Z2F8r`:5]t;Y'8*LXoq2Ijq.:*tV+q/^j1;CegS9NMfl9idf\da.NBse%
%@ksO5D,NkP/0tcfM4A,BlF*E1#L-/71tdck$%td];l[er)`i`D[Spo^?4H',>_9$CHD6JPG*a4d>W+Z.f7R8/SK8,9m[\)QJjI-]
%='P?<X]kh3_!^UK#9Spb/0#gaocfgh0iFYNqE6"k7MC#"Fq,'C7u:opQ;K!?DjLM(1Z:g)Rgf-\e#ZmsBSSo4h)IHcKFmfp\=!8r
%]/7EVh@0].r>[j<Z=+!l#A!'(K[iWCU`:X!eO&ba)\)BCP3o2F`fSXg0e>?em7,!J*VkM"m]R(@IVm^K-5\J[\jBW=Bk&8g'Y7#5
%7T`jaOF2"BZOF<&q_UdL9W=6/.?t-rb%.EFC;&'jF+DB[hskQsqH#n3M=7K.##a>@YrY)4St%]RQ)%cVm&7jGk5ES3kjh_.Y!(Z\
%(A(=fF=[5?O[es*<?!'4JPiOEW_YcbX,RF_on.mJ$GUMJkf]c[Hd+VHOm,mO``$o/-ct*DI=uS$p&MW?MR'\4,RnUp-tCigqWgV*
%I##sIWD^^l8n=ei/>1ntmtig@W,4MH1d-n/@sQ!@4gVD;OChV`(1gU*4l//o&.qRMa+$o=2>\`fmin+Dp;kAe#-m?A;[I)_&dO5b
%Hu#6_:TBu/&j1^qcj0uArL7Gd(YKH=iJl=8XOIBknnL_qb>RZ#IAO\B?ou'NGM<.,O\Ph(R?\cAmaSNW\LYHJbgj4'Z?Nk4Ch<W_
%W&H/ckgra['2*oUe^^s^Gi1H-S!D/d-)f@@AB)#B2++q5=aJXX#3)%/bJL7qa2>A0Kr+=h[Vog'&Q?.Oa;@<=kUH,#RP\0RFZj7u
%a"Wl5UJ9<ke'<(M7NE4Me'6KY6ik(iE([F2Ou`?+.C=p,P,XoL_=aBjj"N5^@,MqIlmL@75]J`CE*UiuXBl4ee[,+F(eK3Q-Ku1D
%9lo]lgp>KG.?^QH1<DQoJ`p:P)QN0*\^noTO%+5JiYj1%;SjY>QQ()4hEe[;3hXZu8sXj.P3o(H_S<kKBs$)ODm]KW#<E'4j7aFM
%&AGI>=nY@S:*Ep-g<aa8g:6bqIuJob?#J695Hj$/ku=gpYGGgqe0/lc)<i(A,op$geBD7F6&CWR!Pk-OW$B/b):bi0h.dp!^t_XP
%iCIG@^-qL^C8Z4q3QJ]cm$'BoTfSNN*.m:#&n^X/j]:D&`oTBYP(hH_Bd8jram5=HTIMm8[=HMa!BHJsZaUS!'h@[-Z*'9glUofL
%\07!]#q:1EP1UW%3N3Zj=?q_6V!&if,XpnW:'P^qBt]_4e4.MQl-sO?2X8o:5kJi9:EiOl#G"nb^l9!]"1<-<XA9\7f,]0!>7]"O
%S[]#@82!B-\QnBF)F?ql6M1BTbJ&Gmo+H=m_0'u&N-^n_d-H%@!_3g8:A]t>0lY[WDXJX,nQ.O$)rNZ_60hFXeePfgSXVoNcN^o[
%K/tJFRE38T3nq0>V"[?#,rKuHWlQZ1;R&_L%-lMZQ5cTF['(]$mSW4T@j4d2G.5TSp?-_/'?!B"oi^Ro3CXiGX\,YMVj%B`%JL6O
%2!sVm<I/iS@;oiJcF?rT?>j*;qJ`nbK7BQF^J#P\F7&qNHtI/(h9gYk=Yd;Z0ElJgemd',*-;V=$(b5+IN9U&9TnQg?iI^h#`O*g
%3p/e)7YNX>Zqr(cp<P!^iM1eh62QP!k?9H2,IXdE3(AQaakAruD+-g/-[Um-a,"X#Me\G,l2#Nn7)'MZrDku[!a6h[_GH&p?+m1c
%ff7Y/Rj3c'4dl&H2r_beVHW/qUj=[r)J0B[8L)AG&iC0?F/-5gf.2W>a\n^M=-Y6ToFs2gl,J"kFd5YVmn]ejT(4S$]#dW"pQ>+F
%PBW/kcM+5eHi!1(B7/1Xf,tWj*a@hk$=,FM22JcrGqa9HU&B^R9KK"<R@:B&B?<U0397PMr@=i6"g-7Hgb5$[[XFjcAuQgh8Pep-
%:kn$@f!i(M]0LD4_J_M]?p3Cqph=10kink-deh"Mk/6#Or*!n-npL87Ick;4cJmWSokGr1^@/^_Z/OJB?@0<[Cr^k9]`#mGS[DM-
%lkVO=*UePs=nabT?2.G[>L`)EXaJ5S?<^]O[b'6:N$l!Vg<0,[<nQ_L-\(jLc1]kk'ca;VT0=bAZIq`\=4Z*.I%UZ!6Lhmtqf/r@
%q"?^dI9]t">rK.G\ZLM0q8+rN?FO%@mN:Q*eK,aY15/ZojiP<km^rItqsM_,5B;PFflt>8:%hfj]XE,`r4KJnc<`+;(*@XVF.8Fn
%>))QIr-H$1/Y%8REq?]HgAC!\r-;rRh#42G@-$Xk6<W4F^:*n9d?.*jRr5EZ3W%6tVha.;>Eu<Pq'GLarS56;]t/%>IAtYkAc-If
%$g!ARrFTsGgcAbEbrma&0'$@mIU-&[J+U1Z*crJgHh[*fq+A2&]"h6e@H2J,>aEsK-RH6%^&N5cqW297?[M;?d8Fc=O)Ak4i8Jk[
%0Yb'eo%^$PS<\;jf5gQTUW\@h4"F+^b<MS!?2$qfeBG>C>Pc4UZ5u_C0"c#8,L!]Z!r'dc.a-B8-RCfaIHTkMdUJ<A\U0YE_h[Ua
%C[53*pPq-II2aiA.;XEQmQGXC)da@]hc2il)^kADo=WE7%g\tDcJs72Q;>ego;3!s4j.3V4%kGrhc7*BrU[^n_NWF5_r@5@O"DpC
%i/96N$[8:U[$/++(4TG2<a8X#X%+,4V#U;N``JSQpg@nM"i&Y)Sith11^_RTSuRX-T!#4q^:jN_V]"lhk1e/8iA/n5s"`<FkBIC2
%gs^]D$7p)$n)OksN:'$ZIVq.fST!WF@H#s-iUk6mmi/+OU\f?"jR!n9n%nn1\_ZrV?K(OLqL.c.kN+L'-?";l4;NU!F=J@kNqJ*M
%H0]lr[oiEKFM(rYjucd,]mOd">X*Y<'+UX_Fl!!g,@8_YpjW#g\%DV6<O"5bGpV)LE@i^A''M0YD\eqZ.t&4qSiL+kD<8!C2g>&&
%e%H)n+*&$^#S5sDlV9Fi!HHKS3o7!FnZhZCbkSdG]V$#>=>Q?T<kkdQ$Uc5#(DlWOs%EB;occ>?\D^j%q)gl[G8X2,-AeahgRGb6
%QTEU?l9]RRCN8e7<ApbW*e#s.mseK*Sb-C0l0eF7EUI7VIf8'T^XuZ@c5'o9,sM+N?t",\;$!An&U.ME,iJ+8YFhA([,%#<g\mZ>
%d5^DULV4M3G<M/Ih:u+94RiXsMgl>O>,PqPLHCb)&iS)66@SgL`M!0Mf0mBu&+1l$c\A,2S(>kbo',KUkP&^A`Ie'9=Eq:M'lP1O
%5pNn^Vo=XImH0t9h01DsZMKK'MnEf`ak,\8r3oG_11.)sCZGuOhqt=l?7ePY1cH0hYDqPZ-21>Us7H4$%K$&Wmjr:I/($@a3.:G9
%U&?mp73lc`HiG:Skd84-c\H+PmHj(aaSW/p'C5QEp\$n`h:qC,DZB3)c21OG>%Qq6lNJgQGA+Y=<q@,Kc"_6@;kH^=qN(N791cLP
%DFoY%>s%:gbWYoR'Pj;SDaD`k*VYLN(`ZfFi-em5fkR.Br%?m5o6Rn>.<k:Sjgt<>c[B)'IBfB?/mmLu4P5+Mf0=G>EsLMg/,khr
%6`*`(j]\^tr(rD)af&!!X?PNIYIj5'dQQu/kL5mnC@6+pri5%e=*c/?:G4ppp$(`>1MSGB-/8'u4HI95afZpIo$uOKH8tI74jEkN
%1.Vib=-/8L[UtZu4l<08D[#C"3]GSEd0@uK3>!oc=m2J&Z2J@SbDStYD+F;Qh=3&'$!p(DjXII:q>>fNWS&+@?3\=EYnV&dJ(<pd
%KcQUXT_\4B1&PTqGEmKfI859?asF=7ld'u^$PBrG-@l:cl,Q;t_ca_7@cV!dhU<Bj^,J36^6=A>1%&k4pnFmjrh#d9W9V3ToSYp@
%d4kB(l)U9j##1Or@2S&SS5Odio+A@GB/>3'Y+^i9GIE]S`Un0c?i1'\1C.=h/gDUZ8-3OJ*f*lEO9F&?LG@6R!N/4u_.\kcm3K2A
%!<2VlB3!/'X1j'1HkRT)n'ML=0W"ChA.2ob`L.PI5"LhdYOtV\%6E8Yh'7c2Z2S'[92Jf6qXG]ea0YGG,"=a3"gB,/GoEa041jGb
%K*4FBejk5^g4YN.L[SR"MeeB*6h1=SNMQRCF*5p&BA:D/4!0cHG91Cjf!O@GfaBB^V>FfL'J@ssm_(bfYC8K<gF-EVIjhl[@:Rr\
%^#ABSdM>tF@Wr(6>-Gua>:l?sbs*#6E,TOkO'(Z>pg`$k[<I\or:T[Lrl;mV=5WU@ORgFXDSKN1>s%i03e;9T>J&C3QW[_J@emE4
%4'l4h>&<h\qrI2C-ZW2D2)i[9LJRKdU9Tr%/bT%`=Wr%&nKKm%fRS;$ojcc*lg,.#2rWR=/IV,Vi;ib_@cLG3[OW$([qODlj2oUG
%+$"-G"r,b]p;ar.]VP%%fRWgfc:\Mj,r>iO6<sY3i`Pr"aBpQ/&&tY]>;+Jd]R=ambbk+fo5*C*W/@LaFcH_(gS)[\ifCsW]^pq[
%Qp8^-=o7hNs5q/\%\(Vpb>$e5J?#EG_USV0H'KstI</%9k2:IaH0PZUob[&.g@ermp['ITHX]pId<I%VHk&I,1WOb\n\JhOk+$j/
%hgh#Lh1Mb4%<`,K(CpT,ZT"ojJ!B23Z*W,rHfFo1/(X%CH+/S(0WU8!Yh@5@eCGCKpt9l)]`3B2=F5D8=75G6j+-WA@>tO&(`tF!
%Xe5W5B:3pjHlS<bk:?Y(KbVU8ln"6nZ?L%PN3Wl,iCj0eG^:b:,,0@"\T1j%E)\K;4D?0M>i#0")pR@X^O1KXYIIHuJj#(urhV"7
%[<V_n-dOA_^WaIG>MCsr5?tp'>O?laOF-Tqi#Q(nn;F&[VF#@aU#o[':\M0_B"#/$h@3Y:98Dle\,&>&1bBA<AoXs'3e(osmi4LR
%'iq^).pq68Y%ss7qGq(rh.HXThWj5\IIV1O:<tqJqNCGO?7eTQ**V7+eXUl")iJL6].[M*+3uTD,eB#W!EuSS8R:^"MoYF5c2juV
%[X.M@^39-\iSjA'_EjHoU&U+o4X$l0KK<Ej'je<iIoV_VQ#?#+4Hlo[-hkiNNf=JqpQ/B!a)"4bZ5L\3Y@ln6:;Fm1/N-AUX6lq)
%iJ47*A5mAm?gjI>75Q,An!cD7bX49Hp!*/22=@cOHZrd`$I""Plf;B#cms.&:LCf<'IoIK@Ru)lGKHD*XqfMpg_8eVe@>*$.ffa/
%[N.N=Q\2IP",3`kHVa4?m(Q5Y*n8jYTk.cZf5J@K)ol;,I%p##h-'WHs"YCiYk*\I8-V0M*tU4*/a/k6NKY_3X1af.bO86ni[YbX
%I0Ker4kaTko]gM^lE6Qp_8_htP@Ln#<Zl`ak;UNkg)i=jc@83UnAl:?5cnt]>?cOTp0hCqZMH"g^O)Tt]m787QJ4W/."Z@YCjpR!
%(ODpC1gi_f4FL,[qR$2<(<A[`+^)L)0PL@?iPYNt`T):U586j!Abhd=J$JK`DLRU?Slc?(H#`Q9JgeOO]5i5ti-`>?(9,j_p;XsZ
%k;91,E*gfLr0Og8pH+pZl"rKDZTCop]*P;gD]`SXHG4`J8)*mI\Z4eJ<%c46GJ9W>/ls..fcaR<0iooRGk$"iE'=0d"^5O"F5t^k
%fCaIafR7%3g$S+2&q$+^i4.P4la)lA`a[u':1DZ&EsHmYoB'WInK[]'(($H\ZuiKG\n1&0ba[e@qp"fclgLG>&W"SX[-i;cPPY/?
%Sb1Y1K\<<$d^"Pb,J4\[o-XXc+\Rdjb&O!g^V<l&e@+bs5ZS-cjkcQFl+tukHM-]SS*8V\c./G'2$OX*T+,IP[o%&>4/YmHh!XaQ
%X0n4?1MN/U]rfS^[?g_C,kP9crEOVR3;($Mg%ZD+*ql;Ws42L<8@H=#&%T^UmUIBAQXh9jMEh(PDkFK2Hn.K4c^m2[+=cn7EZ9co
%fAC4fo!iZ8V@=h';FBjG`P(8WmdjS$II1kN`Vl_2<mH28OW3(%p\<Ls]>LaKEOF.bCkq*B]t8('8&<lIf5)IK.!*0Z)ohec4tiY,
%^%8V8MZ)-gbN`\VkAoOL]D2O)k532a&(,*Z,W.O7#k>YQ)Ys)GmG7#82_k+ak@M,ah6/B3/\h:.Og*X*Y=%JjZ+dA=2\FqrcP]8B
%j=a(Hp)LoDg6;-dbL[<]JX+0pMqr:0`Ktb[Y]s($=Im5,i%7geL[Y&^h.QF]U3UgHeChf22P=+C3>-Yh"1$kqT+k$2>N?<0Vj@]j
%ghM?<](r"DkLEc%hNq!r[*d#+TNe&\kh/(]6gos!VpEVTNC*XL(5%P7XdEG6qsV:"28d-f05Nh!&<P`,3tf(U^\cZDk$9F]D,lVS
%JGoR`n\,R9IXr`k?&3pI-r"59St#K@f#eRB9:OgZ]6`<ZDuBFMg?Q$,]d-O2ee(&FSg4lH[22%gce_hE3IC#@)i+oN^bX]'\,)q7
%*"GqGGDk5KNNuifV3eLZ"7Yt3k8rt(ko;nRjVk\Y\KT--p0W*_k*RBg8ip86=YNFV*^76#MIh.5?_,Fq#)M:4>)1c+Yb'=&kJ]AJ
%>$n[snqWN:=F8Hn*d1k+^sI.URPmC3eN!LERN)]2?[dBj5S0ogchX$AG+Uo,Pn8)"R;a6l+Zf=`QVLUd&Zj)V`QjBe/RPP9^\7L!
%#tdjhnro%HD=pcS^/n5onjT]^$BW`HLLcI3gM^nP$B)OR/"ludd>bTjUMkCFLE#?ec=c]im^.ijhYrF^$fq2CrG?_U=&(Cj4s]Ur
%RhM8^"0@(pP2@3]5&`&oNM3Ut['?k4BRt-tAa-dTcZY*d?eqWVMqLBhdk]>97r,05idB0>n"8uT3!4c!^TYE/n@u8\=a8Nskf88f
%U(^?dSU30m!?TJN-e3ReX30!&HPMTW:E1"7:2S7(J$tL22VT5td[,i40:1OtlYeH2/&Ceo97hJ>5.U<ln!@isZ@m[5%XLQV2s6_g
%cOq.J`UCi+V&*YF2RJauDU@Yb`/Vfk-]&F4NgV=$;3(+VImD$K6*[qC7`9c&4fjSh@u!3W`WWr-*MT5PK8c&FS_V'@)P,.+j*K$,
%9VWQgmbQon\!4Q6;pjhS1=Atk+E(Ob.aGZ8TAOq^oCWpckFX5JiI]lk>CC"1.D0u7H8iu.pCDnI<\-Dh=BkV!Q7Pr.c%9OYIP6o3
%s*-hEpp?IDYLuE/,.[>pXZc^`DW0,=PGnLf^,\`qL.))h+5OipDB3/tK6uo[$YQnhGBL1f8(DnYrUC*&8WUV&=,UWYP``&)`)J.V
%PY>jCT4@?K_UCC:DLm]XBIBG(h1J=0'rH<Krg0H@,._$YPRj+?dc8#gD+QtII/i_bS^+*rO5k`<jn4t(DXm&UmPuaV*jP=D<*qbp
%pb7j9Y47R_aGHEN=ZW;+Ilj!tT:E;63S-(K(ZU[d@\Rb8BARiCf7)rs%R3&u&bi.AJ#b!b.!PI;4cIeO?`\\1-K$P<HGZ2fo[b>9
%=\Z#hdoKg7'7j-&=8pV4@Gu5!8U5IK_lJ11>MR)C&$(58\MgaWL1*;/+D(CdOH#MYkB:4G5i22#"#+0Um-2c#dM9TrQ-rOi)dM/G
%)rD\N2uH-fj3.>k[j6<d4q-ZTeTne(l'i;DgVlC3:0sIZX>DiXcFf_*R@g[oorU.\m'-5>Z/:WpYZ#p;<.4f,`mP+\/8lPs9*l60
%IT\eV*>[@iSaWaSc_$@*4\+A\Wnt?q1s=pWi1#qlMl29TeIVBej;(J.mQ]s/b@,IZDq<7d.SGJtgA4[=)5%jcrjZ%"H^4>E2L?M^
%)[R5N7*qJq7TA?Ag)DDp)g3bZH^=X:A)]q2,Mcc^jeL/\(\XY!XjS/\=l(QTrO/)o5JOO+r&XT*!)remG^8IOM`2JJIf*bgC\Pf^
%Zi'gi#sf4=Q0h*FVrYij%09qjJ+L%a+3?LWZ[D4_Wi@B"5@3!p=n%:F()Dan%bhraB.mqu[h"u&rO3`<me^Wen>'c:0+cUYI`WV%
%QTNj]s#l9u7h(]BAp0Xl?u0H_r%bf^27eDi<3,\M>.]tM-f-<jQDe]O0/E<jW+:%Nlh8n?-?kVt+i@QfdPqOgH\J2oTu?o%L@jf8
%:JFS=\C0r@oHW#QeiM>n/]dV8&W_NhmaG4=f&`qkNE51Cmdpq#T5]Ea'+M[d!"9NeNcuE77es^I\-r_(5O7kr+]kj_&"^SP"S+T7
%qDtR!eGEOVq7T8"HL5"GE!,(RQkF)L/"$Z%l_UJkR&PE!%?XNV7N6N//)7pKX*V<TC0_g=^5C\R1O_&6H):$,0uU[,<2o>*YJY0c
%6k;2Z?Ut&Kh9Q\B_IE0/c"\BZYijQH6V$XHOCD[E<K5kH@+`c'EJHq'#<f7D)b&H_?:m0?/l]L+_"Uh;mD%=(r>Z*%IP':oFAGH-
%'H?_j4q8tU!jGWbq"Z&i[KA^`_nNaO6g%Nnj+iI-Z)'_dY[$GrLZdL:PBs2H]sDDe.-pD?YQWYahP1I6mIEF+,"W^dUOP1*(YdR!
%,nEkhUpJ?jS_F%t?k'bcPn\0,na^HaE[Qk1U0HV?'YU:AOZ-lYF%Gr:.&I-:Nb"`t(a".]CbU:8Q0]r,89Z:-\Q'd^;*D$N(KPEC
%.f1H.?Ok!'S"=iF)o`G+3WN;aW5VB*7u*U4$5JpY[i-Wjc?AGbct`RnOq+7&En:EI-c<,QRc\"]W;I?gXEsJrJ?Ej3$<eGI51?"[
%-pQu;.78bn0-Le8e9]"KoVOdE[!XsbUe=PD[46k'Hk`*`Ws4&[G=+IY*kuGF`S>!k^rhIN6QMa3eRqEKANK!?7_LQ&dgk9No]LKr
%ca;fY9r3.?k2AF`$Z0Sh;Pqs`Qa*q?^=>'`Dl)ag&oAN<1\&d\2q'$&3C?:MLq1X^O@ddf;r6'9N6<Ite&;_I*)06WkVJb6-7T7g
%.c6=<ASNM/pCm"&/N)Xd?QaoC[sX2FDq,6nQB6>H=]qjsaR7KZ)lN4\WpNKhIY",,c43o/U!6\W<LYEd-)>G<N7>n=L4+:s#G"c+
%'#,B-oZZ&Q0+f&4l-N`Yi=d'VQOY,T+bM@9S9b]DM@D7Xk2Z1\>_h;%6<f>]JqRn0mcOk7*FAVHM+G=AE8QQ1/:k9l(Q)[MX@Eb5
%s(0!(i9,[(mPhp3\9!>C;Cg^+XpjfB'0jk"pT)OLn@R#VMtc\YDb%.*qtIktN;V)u\$+&8lf8#"D:<,:NS>i\rmr-6`_6*8lg/d.
%aU\0(T=8#.El4aJ1%gi7Jp'iDho7<?)u)l\=lEYoNOQ+b^7Xf(!PL.,_dE24nJqOSs!OJ_25B&'f<*9MNID3T`\%4Bg*JfNe$f17
%q6kYg4bV^`rqg'WM-gPO4nekcpHZ+ON,V)]<O<]Us##;_#ku?D$lSpCBZU?1o_8EF1^DrNQ?::MqXJ*,CAd"&%F]CS9_e(>S"]<7
%mkWkPihm]dXK:a/(V5kK`ZM.MH`IlrdBa`*O%)4WM?f);O#/-9!'Vc#X'*V>&3:hK#_kIbH?bDBA@m*WGdEF-J2)FG!Ftm/AnG-S
%5;A6a#Vbft^o1nRSTltLb-Qi<3*HGZ]E\Yo:<jEe+<[)@OYpCuMVq)`nG;\<E20:BASp76#Y`KChsr*F1]BpT/PF9%VQ8aPAbF@_
%[g:K?cN8Eu61$k-&WjuT.3ujd;4*16MM<C\C;O<P"Xhe=QrULcGSO\IYSn/_iKB%RrXC:lcTO,.SZLmsq*ah/FGn[adBbmmGQs60
%c]&/u[s1Tp/NtOPX'$*XX$Dj>(SKhLg/^m)fJ:p>!%)e7J0cV*)MC/hJauA4j(AO_H<(..):6ZMLO_Bg"BiAV#2`2$&Acgk_[=E%
%TaIHLL2biLA^G6"_@_kCUa9t-.$#8ZU_uppBG(`l%13Qd"pIR\/"hh;<="GjV6CU$)@]9ReV(WGM!3MI4[m\ojsbU72&eV9@sU$j
%PN`tbL@gGf*dZsD<cYkLj@/^"eO"QdKRNK/=f0P%*Y^ct0hK^dS/eYC:!g3JM4YMZl8dX#6p\Isd$=`lBhe[E;^33J;PP,Z-SM3,
%"dhE->Dm.0VKqS@0Lq$DMg*(sgW:<WGl$Z-_&,*Z5a)XlY;'SgNgOc"a>%BX\7<ZK6VNrrKZPREQ_"p1&e-!0nZ76r?;r'nhNl#N
%]PB>L!"UID`C9U3g1>NLpPgc2@q,RVZS)8B1le+Gg1HIl^C8?mHJSkJH<J]O6\So0=l6G'rfhPRfA\,O2j=[-Vf`DhZC]%1S?1u.
%#'6O%>!=mm-hT`Q%8T-*@iK`i=WHEG(9UuB=]hil4N;$uVTTf&r+KqL7qU?"Yn!@IS#fS:kBj@HU*j/>OYnu5P?&.bV0%rnF\F1Z
%Ue,3qe[EBY=Prf:6A<!nVUDq!bqaA3RJ02k7SM_W5Eugj)%irW_D;Cna#&5K+N?8sPRcI3)<3gTFAn.i_"9TVpDE5TVpTa=E'0A7
%("_Zf?ZimC31"MLa^'cJ_BW`$;b)Gc*Y*j'JVaIp"!)u-MR90L$Yt*2(9Y^KdZW)KE>G:!kR_n4(E?n`B.RS]O^b.^3-S;B6H.*>
%Hl:s0#5U*p&J7TI5bcN/eJVJT/nY/ilRP,u7qY*)Duu',dKq>P9s`g^U/.A&<_@d%HB-L'Y:6+c##Td]\b%=?0@GG27du&joI.`5
%0p;&U*LbA37WeFi`i/$Nl&gtn0tO,U,8#BGEfWnd:tCEo*m#O26Y'$a7$J,F3tdZ@Y*V,1=9L@UD*L&p(-q.Q@e#'T(+R^WW)%jf
%m+#gkZ^aH^oL*=(Mk9!4`.CLMKG$0-,be(@,ja&AoG`FrL8$Srm#st@_EOjo?UJo`lr0W^8c+>Ae"U'gpPA`s&`lSuT*"7L^.77V
%(@f-fm6agmLb0W!Tn$8_3CZ@8Z8Al`e1\uhhao5'Q:7N=*L9,dos,i@MDphgge$#.(WHWK8F>uS;S)/Hka+Stb)Kt/;WYn281@di
%F-OP$5&$.h=6d4Y>1";20SUN,8aM>EO):Co^p'!rWGns"I:V31`Nt`sOa6PV\5(3D'\HG!4u.')@f.#Kh@7T_m3-X34p[L9_2-FR
%<t@khpM^8H+.n,)-f@EMme'J&LhSGtFu,k1l53AW5YbdY"*QRV*[9C*Q9O;/XYIDl3h]ag58c1q)\Hr-n`+.fRK"-seo"12DBDHJ
%`++ChYJ[01A?VVcLLX7[Xhn`Cl%U%782qVb6_ZFN'RW&MDbdsY6+G+0poXl<-jdrd_]U"Om/)5uY!B$+T'JgsKb;<F%F[kh'hkFX
%RZ\Jg)q?u#?7[ncJ5d-FYqR0]A>%u"YIuV0(c@/GM&V\`8N%u@$C]Q;8\)h2##0h^)SP\GA'#K?'$aH3\u7`kh?`1g:IJJVcbMMP
%:S>&W#R5:hPs[l48)H%pkuS?%j)00BfMUO7U$8Gp7:Z0)XLIGk7jb!\iQs9_n(;rT;BFWN@6_5fq:m%BEtd`Yo$;Cja6>*MY(uC2
%q%k-LQT.O>QfG_bId9!EmE4[]]tC4q@^8;A7<NQ=,T!5.Mr^Ur?o:*1MTI)@U=%'S-Eh_uc048r3<,8bN[7MM4d3GT/EZX\=R+p;
%109>88b/.ucW+Zh--8?5Y50(B'/A!2O/@\ZN.-4JEBM#"G.WmcmIn-HDBe9\=qG\t04@18!Pe-:@Lpg!s3HTCD6MR9%\n>R1;mfp
%0"*ePorLnTq0QH-,a?(,oH&_Wp>!SPW4]N!K.*K8`D_c;_i>Dgaiq7QN"of$.b?^<a)6p_6j31/KIV1,E_f1M<OpBeSc9mC,=ad8
%C;W<9Omo-L8+5?_$7`p?Rqmm<K>\kU:`=UVLr0M;OW0!6P3P>o!ZZM7N`7,S(.]pt&ITj!k_KBT)IhA4`B'/VI]oVF0on^i)"rbc
%Hkc:1<I?Rg&M*W)k`JQ-q>CY,Kg0l>D;2`5;)YR)?.X-%f.2e.%X$m'6D\\^PDV3;%F-H&5,,:2c-Io>0qp)Hh`8$==a$Q=9BqHa
%Ecpu;]-.9j*RWR(9Dd,OQ%/hW#moWn;Q&,J'&#8tBsXunBtKhhI#KaKV@_lK<QUm"n9sOjAUlD4"X.ifFgB,D[if_UUT(;tUsY2A
%>k1BAaeD:B\u'+'Rta@1k_>4VVT/r&s1&rhDJGjE0ThJ7*B,8[M&X@7`:K@Q7EhuB8HX!TE4<m5]0,n>d.`Bl3A@>b=V.:iAVm4f
%#Mm^(G;$5cY_?\3m&]Sfa[Y%-H5br[eP)9mF`fXR*Y@CD*Q'+DaMK3$85?\!(jTC;qOBsRC>q*JOql9Y97liRQ/k4\c"P]ILRjte
%@E-VqDH>@/l"!s#%lG2?"B0s@R&o]%ab%2sD2nWAO/DFU1sg\69<A@RRMm`</-oBOF(%18!5bO,&;<#lp2gtu5dVe4lXsMJoVLIi
%lWORFfNQkW@FgSe[378AZ5tR76A&l06?/$&9%ag@B\ndZmI$1N+KGLjKooeADecL>=?5G&Hb/[E;.L0`L>Y*S,frT;R21DCY\**H
%csZZ[hCR>j%bR@t.'t-rGIYn?aWdHnLm0WOYi?=@;%G]TSJuAi<*!-pK0l61*SB5QBf#krds-VdE;?Y+]5^B1!Z6V#O+cJTA'fs,
%-t6d?)_j"$G%#*D6c(c#XK63iEl^X_4>i7UNsBF(?).WEm#]9p#AQ?K5QY518G&\91`XAe"o9C0Fj8nM(Elssn2RH6&=$uklR+_?
%haAUp[@&Ah%ipk/lQ/";FE2&6D,?UXg([a\Ogqkc$80.e1m"sS"-CjC7d#PJFI;!CWDs[l%2AXk[i%RcFHVZDrQuaY2O6Y),Acjt
%7g?Ll7dSTloHh`fJoIBo_8&+*R2ScVL;2_ZFdSp@7<mED&Ea^OQAb^oV##lj%A4>LS!o(nUe0#A'@ZNjOD(s+EdFt+>G*ukn16-P
%P0O=,H,LVe#U7WJXe?2:6BG)tAN:7l^.,#]#2]PnH\?R[ZZq^))g#cB4sSV"3*OmR9_`$a_]%p,W5t7fU&k)*8*g3\Uudrq3%!CH
%W<eaR'C&78ca\P)_(eYA9%kC`28UZ%RdPE:^_<2Go@.7F)Rn?Y$RT1poF/VN8S=`Zkg<ijl5H&q3c,ZI8t@(GFYG9idX`h+4GQ[F
%VdVuCT$PiPn:i0.&-:pV99Q<8mkK_4I1``*2iFVjcC_\1%q%qd!JcA4#Qe:+%3!64e>R@]V[b^R,*N7he->m)gd3gNZ;D7hJf-TQ
%&)mWZ\0SpHB^m+/mNgjUhLb'?9&/0]O;I;K9InXa-mMYVKA>IS8<OmE;K.A&]@'#("EV#pLM@*d9q,f(ZqjEEiY_<@(<-DYQumqk
%)Fp$J5QD\![#U&NA@sqN:"+p!_,ZFElJ`BI4H;f\9._uPJr,CBKXCR=4e8B1pr_Zd&o&T;`'iu:I]%r.ha@bg@cp@=P?UKf'.nH6
%8#h]"W?df<^46V94_R/1;D4Yb#gjlRBH(^<[QtkH$Z>&lUp1>qX?I=.=jg\g7i/2V_!AqXRKr5>T;s:fM,>=rl5RSJ(@`"uajH67
%BcA>qWJ@?,[h*/-2Us4>l.&9Y5I$PFm&#CJ4`IBc+o1&8"U;4kBk+"n@Xl8r/)l*k7/r@E2cuGL(-.lV06n#j5[6utM?guKG!lI9
%/tp/"M90D^Uj[P;=d./YC_^?p(R9t<h'=rd'=>'_ZHWFO!*9q/5PbS!8<E7A/2jJe4(7HT_#akj.C]R0,V[@UdNCUl4N:jZd^bS#
%phZ\?SoUNcOOqB_;^;Fc6??.r7I&Q[Ds[iB[Y\1(@^g#b>FdE]']1dt-k[WOa`ASP>tA4UVt$GHBaZ8@Thm@E$U=lPG<T=87rP^,
%E%Rf3Rb%*k:1XFlOM<W)pB(jkJ.c3-OJ^gk."8Uum(nRn(!7%lG=@])m0Y#0JH`$h+D.=nL<N94d^DS(]&5,pgPDLoniCkZN[RfO
%+o?j0FAk+egO`&KftN+o_bE1M?#h*^TfnNieA1mX-/O6WLI0nk<LXI0LtZqN%[gqfU[D5>$11J1,"OPP^&og=Pr(blF+[%'7fsWX
%d_iA=;.V$&Tc_Wn_sJU!jg4`tIL4\@YkTVT/\#9M5i:hKK(*24OWHA"35gIgb90MMb*I/jKI$3%-ti]LMc!*Ai)"[$0).7c3aNbF
%+h!VK1U*pull[H'TP=a2D=^GucYXpYHt!P0%lU?o]#c,mN_CEJ/u?DTI7'Dc[YuD9BUV'+E4HW5)';liX_P*uk9,-tKBOF`DR2L#
%.Q4hZ1#]t7A<r?sQ:X3n2O,"O[-k7,81$6=,.PSjZm#0W(=L#QRH_OgL*LLnC^9Zp$QLAa"tF$XQd,a/EKriV36G>IrmZ)TA6ZDQ
%ZAi*&"D.`P3nlec<atC+b'C7/1&7)Kb<?FkQ7j14882Ot#I:_)brJXS;oWOXC$j93=FuN3RYE_4E<G:k&k=6j8$1mhQ/E\:`1Sfh
%/PihAfKL6[S3a#H33Hp0N_P+^@Fi!'=B%Nm>R6[/+kCTtQ\6]k1i,V*-;R</9FLu[-QVN0B;4)75SDRSpVl_l<oIS+Y%dW=%-lb'
%bCFE732#K>Kr&i$YbP\V91`69cB]Sa(*sX3AV\I789I`>gD;Nf('-o^@j!,@9g1*B$hg[o+^)UhQ-4n-S28S>b-W@@S+$``_6klZ
%AGYp-#pp[)3uZ2X#jiU-LFiQt!mVXYQgU<t5Xq5sBug\@W]ed.8r2+B@Xnq%_;eD"A$0/_1*GN\_8o$$*lK@u0nrpWg1Ym:SNIi,
%'RVs63!#%nDTO`$W+D?F4r4Zs@WSiB2RpC,L91tP:/]5u#'^uZ,BVh-2?S+W`'9$b/OPJ;\1@i2W74gKlB:?rB=Cos#%Z30#6?J\
%Zj,bWm$NT#28H(p(K6G,&:l_?S[]O0>!@2gk<\I>RKrpb^lT+>>IJW/9sK@G\=lRVm*hr%^q5RU))Mo&Kp8:k!);Gtee0Z_D!jWm
%\nDP4Mq;?i]9]0VU*cN,B;#k<@SGsX+3@IJQS@DR\`p=@A<7r^"ROKC-<nNQ3`%RFE=?gT'`LX?1?2<&+g_[PgL3m3e<3LB3`lb*
%/4UL5M-s^*aaOJhd=MuRdW:L4E'kn'LPZCmZo'gb,,W`l:Y5f&e"VrDX8rka1!)Ue:?*at#D:Z.aO#@FC"-a0Jh[<7S_u;=bZZ'H
%$8dj/EKirEFAk5'JCS)Ga&UT]_&&^a-Y&MVmf;HQ>f_`JMSYj>G^OB_i.8/5jB+3037eQj%WXdVDBk24R%/P#/iDi(eEiX6dR2L&
%4@C,>aX,DfFi/q?@E"E7(iA%N+-i`6CBT@l2%a%s))boJ?:Z>I/2h`:BWrJ7M&d@s$]ThY@;j'G1/2KP1m]dPdE[9j&D9J&+j!);
%.Z4NJ/fIYD#q<_'I27UqjJ\9A#'k6=M9H6\N"6_bMB`QoZn753jHGs"&CeNE3`*k\;^ZCdam2Nt0I\"a?51$:Jl(3!h?d<om!A^`
%]P@gCWloUA@-m`+Dk"u#QAC9<[c9MDiQ">1^a$\_$Naa%H.W.>/ktUtCLW6XW/SQClUYL$o=#^5&e"5VC4OQgcRMm^%Z/3>0#:8H
%D.]`_AC&W`"<TL_"(@!*E"/L)nn^/3&eak3_EA]A#d0Pd:n,;N#Vk7ojmPR5.8`A$%eJDg#VHY>4Ggf^#0;RTB<09;^*amhZHZj/
%CeIjB6(I$3WpZ/6Te(jTf+LZ5j>n8:R!/6uK%nQFO>imt%'n003o7)=.1Z9&5>9@A^l?X0)DkA/eNe!To90]m!JF[UX!,<?R=RGq
%)'K@VflTY+S":9;cZ,3s-Pl2+ZcrM#de+C"$M$F'FANQF>?kYtZ:KqIND*FjSK*DR0DM"^/+mju9scJm16WdT_fhts0dE3#%H/j8
%aWs=&6@b!RQFI-HD6e!fM;'4pLDI1G/@IATHj-_0iD9b_TGZ98O;bsM#k*r'`Ffs>Cc3-[#qZ?o^gJKs,ANS_=tj0&h@r:F[_jo+
%'nmEm700g+Y)ilt(RjMYW7V^WW!19p2QfTN+pqe*X@`a];#@mJJa-BY"D$Y`geIAK:SHC)R=*Vjj'u8ZW';?"NOK).e7G09l[[ZD
%N:>NW1OS_3&H"8N@5pN/1/gU2/OR,FE!XjcYs/]`&s_WpVj_=Ua[pr\a8</fmi4')F[hA6rY)]$-BX4[e7c'sa8?iRm@#JtHZUJe
%A9!O$q9m=V_h#0U41s'V5nM--E+kk(<Tb.@B8$fk$3t;qGXJD`8RuC[1.1!9@jX*$I(6'$7O<HK'B_=p4!t`q&1'">fls(nS..@>
%lk[JTn\fSD+c&Lm^kS^]S.srG5-g1cK`Ee\DX*BsTi""o6HI5,OQdqfFcko&X5@?r`A.sAJRsXY&%Ue9'(.]##VI%_RM(3rThcl[
%JDdE4@NcXLEWo):_bgr[IK2Ia*\X[;BTT:sQ(-ao2/0A;.c?^Hp4Qk=CFk05*O_/ai_dff5^lhL[*aOX:`P>cP>Uc&/BiK<*?#pH
%%2&&UaGduVL<E0/A_@]5E8]@nPRBR2A*I`X#d66$qf!Pk"%;5>ps;@AOj9]<:_@s(YsXZuK2UDoq<L_"A-)P^@`$Z.NgI8@%[CLW
%r(RBVKLdYXM3tVXikW/3Q@hOU(8ltWBVO"l9;Y+ji%c6(1FcVg=HR]_cA\cm^'_uDBFoV[0Yq_Y<ghhVmGKB$:>)js.VKKK-7sA(
%?A&/Qf`<,h4!)BJ()KOr(,7Km>o!,IVa]2pfOhicj"0[F[<O;/G^Kd1Rp0,,El$3b7%hQ)7=duPaXupk=Bnur>]+>_S.?3ckb3q$
%6!:uJllfgDl)&_M^mHr@Uib*O9sZ.&W%/o#/:clV>X?YKYq<0eLGT1,jJ/379!I6tWc;S>30I%@Ck[&8'EEnjY1eJ^]n9"$c\jN8
%K17O1IL4<L@pSB;;0<jr+YpMdb"Di,nE:<U=#j,ZFYb9RTHS"2o84I!*Y']a;K0K!4UuqFhL[4g+?dHrM1@E&)IV:i,nUM6jsU7+
%HHip1<>Rr),RVUiZT-r\_>-MT_.5RnUI8AKXE>0="rN/-&UKS>jQI)4//0[uf-j62VO@ijU<Stp-?XqbF)(3,#3#`j^_f,Lfocm:
%O?j(re)]R8>.b$*%+PbEDY]l]b\Kt,YFa6eR1nJ=h^5?*9K(JTb*Ej35dQ<$De)Q:R4Lk]&jT$!e,i4=J<(X4\D'E3-Cdm]4es_#
%)W:Z4X9[gZ_9u:CI5F'(8ZWO`7[rpFXTGpePDf'Fpe;Nm\ff?f*!B)aT[baoD\Mf4*mMZEdmrpI.W_<j_\VUo6#)Jf,j^9,PJtZ@
%E%5O"-Id!'$q/I[n:fIgQqeu;!C$Ed(YL6#foea@e;/Jrq)4Xc.LX*"Q/U,JS/iCtM+6+H-(Np;f4)&Ff50Q0'6Ot4L^h0D&)nS3
%.&1[o`2JdTo.1qRZ:@>u@'@b2CraE>(,Hkg3cbM"/7^;/2g@`f"GY"`#E4IG6D.LQ(o[996p>HpbZU*8fIH/:<!\FVEh-Dsc9e2D
%!3oQGaN4gpj:#RkcpGI1+GTqP\]$m'L$]r)M?]6QBoC5h1P;=?Q3^/Ha5@`RA]o^9G`JH:5se0P(=E8MbcVmo*Ehlf!K=-*3WOL5
%!MOXed'GkipC%1Yd,N.5*[C^r'/L#!IlG6&cUK*0AAdM8S,n:OK7Yh2%(Y@1O\jk2^`i441W>_8?I7W9AV8@-VeFT3>m\sEL+B'3
%lUk`]^)mqAZrh9#d,J5>=eWfi_894dp'0a!e9/<aUUUj[S@)Tgg_>2j>0-6]V80p1H;?B/L+?77S7OU@k*H,N`+!_8LdM!I`6E_9
%Z"9t,J9!T%Oa*p_.)UgafE1`V`FE5n5fZh+$1/di)gN"@<"(>LgCi].acW3I,t>IM3$4CfL)=Dafe9WabE?ZG_YGMpbPG[oH+%80
%dAT_@<0puo/i$>9Z=t:mYruYeOX+qaICa;u\Y/g\GB::b"VqOA'.prEp!l<iE4tY<bQF$-YcLMd_)t5H)@PMOZ;%1X"@e@f#"8"B
%:n!QnF-si_BlKo2BnZ5PBV>Z(r7OI_Y$?Oq3=H2Eni.7rE/QB7&Br%c+Ot<g$m&lGUi=]?fY/V4FTfZWR+R-G<=L"nAKJo6Oj9Cr
%F.``S#U^n2m9q@$;NA-[Q=PA.C0]?l)2""Nr,d$*b=?Y4=irL]%a:*HD8d5"VfF'q9Tm@m"!-']:O\rF1glE=rk_a?eO$X6PJ])V
%+B$S%]h#]g\@%82P/nt[JSYWM%Qr%F*!52_mgb6i=45<S5:.18=OQ1G^/@]GIhF!Q[nVdmq3i+cQ^Ai'&2i\,a3qp-k=1pk;io5>
%4-CR__aoE@ROFA@N".d+jJIUrq,.H892<FdaJ:C>)QL,;Xoi^`2Xh,HPF)W&E_m5a?O&\u*Fqc2N=1#HU1hC(>CNfl`"#3\M.pNU
%is</KjUi-d0\t+8ZV0_#;LD=W1WPY0[uZIk#+?_qU]mTQ#UV=[E6_a';6Z@_MnSR&k\<^^=d%:'kLnWWfTm5Zmc`%`O7RCp/L=7^
%UGt]'=kZBCh#p5oTf43),r1GlobN$H8(7aoP$pA6$7:mNo/IQ:HCU$bgl)J)r34[k-"_u;*J4Ng$h'TElA3N%EF9,2E,g/L(P]'0
%LbK6^:Il!V]MV!;-TU+S3du`\/qQD/Wd0,?f2Qm(/kI^60m2@[a+]<;F'tN7.s*1C\/GNeAFaBf;4b"+.ZKEM$YrSA%t_@1F_J4>
%A;;E7'.MU#Z;"-DA$4bB+qK@tF#Z6/'lk3IMR8b@i'p#'CPOETStok%$[+)<ll'nA%O?VK%3"/8/YlVmAg[4V=>Zb@'+E.Ii!tsJ
%a:%Q/6lC<^Tni3UilE4i'VlYWS*$ZD5RTabA0'8o/kObba\nTYih1(T*Z`n\?l]K=D(UBEFAjs!*]`L0&5B,Dj[N4'Z:oEnBsE'L
%7KCSV1SenGc&6ZILR,I_ml!SLKO_kQ$;dLK(/@8j`UP4?D/pE4Q%=r%q\.P3Bra'E]QfX@#h4`J3jMZT-.'Ph#Zs@:\V;0V:P/@<
%>ehQ,<r<qPHa`NC+GZ1BoJ,OB3IM:<kFAh2Q:b8N_,cB1@Z^Ss4kB><O1Z3X5XYT(A8nJAq8s78:l&mZ+W>L6D/7&_jbP$,oY_Mc
%f\Y_)5??3g0O(OoeX'5Q)JKkJ!nTcF8qOrsU9Ka^?=ac^3BZ+'#O2f&L]At?'Us8N*UV"c_"?5=M$*r@Tim<fFi;#DTK(;X9HdDS
%b=2`CY8&D-h9^3'as@N(3h#EYjQ$SNh0``KV\6Pqf*JJne-^F5k9WGPq)D?N(AnYDJG7)dJ66cLd&c5k1n2sU+h/0Nap'tp>oR#4
%1e+UM0FI9a%ZPd5keT/VJMF0HcleTf2M*uY*\M*!GXhD+\rl(C'f_L]A#qQGMssFd7=[RgPHZFq#b>^bWg1$_'j;T[jl5iIV*8^K
%o2POol&-GBk`R=_*)ipu8bh$_5;2(OQg('I)mEo,)J0d,;&L.4&43gMBsqH)/F?RiQf>n*2d$@<P.UCKcs\G"WkMoeKf0DjOtB6,
%q^)\4<&h)qBM*.Q/aVK$GH-P[=<]%2<d])/0h$0n+%]q!&*ffW/2X:V9BG17'MCXC2khk^4:^Op?uJ-c-@NdolnM1!FRhFONc_SG
%AdSSgS4__Vo>pFm/P1OuL*d\2mQ)gLNZo4%opRC0ZSDmt37a%u:1LoIP4t!1o&l_[/@cS7q(a>I<)/hNi\F]g-'mWWIABiq''*eK
%:6[3m`-T"uEr<X%j#"LLL:jt2aq>QtQ&YKSAJ2m%Kn_BH8\bUdiD1\XkaBknYnL][P(?aPKgUl\9"T*X"IbS2DWJkrV/jLFjs7JY
%=oB+o+hlLfMq)`-.Uf@sTbcYA4]F+Kb,'4h'mJVqTdeiSk=R=Z_4QNe9pK0e7NW"V_%l2W:O8FL/nA(RbX874P!D?._B2ShSgbON
%#<*F.L#_:)Gbq_MTa;LF'#W4nJ`PHUUZK;lK0%N";?@>XYcc>P3nj1j(X+%(JXA;Fo<Fg<K>Ku_nKVBiF6"*q_MZ7==%JI[3-2l2
%S0[9>U2Z`CL8jOd<lB+]%^/^(aY1Nl</'A5W@[R6Lh%ehm2HY6BjBX`D3eZ;9@,HBMp#g.2X;>_1SFUg/$[e`\L:V%Oc)po0CF(^
%EfLRm'8EaDK/+`WDQr9a$79-Q19Ie"OKo)Q,XpD#Th-`*$b+eti^tp=f/*'G=>Zhm6`&;DYb3Lb5=Lf<(Lp=+!Xt;tZ45rsZ<FE>
%E;e-c[$^$-;;W0sLeC_bnMW3,m!$KIAIr0)cLZED=3XgtW@_7tfRp>/V`kpjJsC06-,N1WTehOu2?WZ_'SCIXLF+`QS!2%2];qEp
%]h_n0:l#@`Qs?3cCiM-9*WR.N-7fn*;A<X4"We=#DN=%/'!K)1*DS#WW4m&Hnci'9A"^k2lCP!\J]EeVBs(%5iAMY1@*:(cfNAiY
%pC(%0#%7Q.L).[.2'T1*60CP18D+*%2ZXK#'*Q9WUi;tD-.d`H=?iH'31dkD<C>jf0[MVd$j7%AX;I#AogJZHbnP!17gbb4Uun''
%:2PG?)%:q$'EE0>Lq-(j#V@[@A]ZE?c/qJs(VrH;K?a:6V%<^)\$!)O>d%`/*=ot7G-CP"K4Ksu=Gt's"1X;H&3N'oG%iM?,"(q'
%)!FOZfL2PCi02T1lJs,*b:S/[,?@hK[\0Yt1q#h8co;tY3)Sm*O+f^2SsOh".6'YY?#@E@*$(RWbXtkkL<L_8fGkBR"qPDeocY<N
%^m.io,LKtAjZ9Gk[.nIPMX%[IU(;*!Qe9.n6$H'9Qsu#aO@gj4[<Mp'8g$NBUP=J6&')/!bU?sU<Jq(!*%a3QXMQ/YH4Y!:iD:>L
%,](Ig<J["\I+,sp(4Ih;C(k_[&;gUq/pCsMreL-@(;mPE22D,RDdiDJlS`RDF\-3/VD$MjV5nL&@tZgROAWq@GBi5ZGbD15UM.#r
%$pYT#"V9a>H)DW^O?J-jH)Cp&\uK(j;`ff@WM1"-_(7FQZCWSG7(#ldl:;Ldi+.h(b@dDGUEJED((Gr=-Ea>.*r0sRF)h:Y'*RT$
%<,3[jj)]aAY8AaJEe7CAdR2!OS;esX"f0r$@#B(1?ElhKOdg#"WtU7;eD\#Z5_9<;_;jeu?#A%kN.bhLp:uMDZtN]tJ;RTbjM<-Q
%64'[)d)P*BR4BRC-DGl7kA\sg8dceL*p@j#4C;A46DJ<E:Vq)_MYFt[:3JU]oWV'[VF]\@O\g+aqrE=$0GF>jS9s0Qr("$o\)B.k
%Oqk^1Oq0US>0$`a(Aq%*Q<4]DS0Us4K,SEmibE5d.\>L;jC4qd%EMc34>[;N4Yqc<igUX$RW(EW>C:TX;8hUQ<-(c?ORG;bB42sZ
%-W`'+XLX.jlJg8;f*X6BnU2Jhb'6r8Ai,JT/4=r^_=7tkk;`Bk,p,I?$i/0r'Jm6)B1`X7<Z4M.A%*(j+<LpjEe''MZ(<T$?4]6P
%Om3.$V$U)Q\C/Yo&RDZ.aU)?7DW+'5<,lZ-M@;3uTmXp]>JT>IE3IABAJ'mk>pZ/*A%*^m`C:AQd\O]Ikg:&(^t2uQOh%nB0'KW@
%@CojAKul?$e@pO#dGf/3$+:kS@?n@,jmFSL@qO(!<NI=f`'*mi)1lRWl\<;.SHEZ3OC56MI[?s(JV^'Opj?/nH#W:p=lA<g%]<&u
%e\M7.FW;&rRn[V%%EXcHQJu8k"4,;9oA%No3L=2f3Ip)KC&q[>76R[A.!u_:C3#$MKK7>6nMRjTAX]J=7X)aS=AFNE>?-=N2U`C]
%(234L:9qDrkJB3G6:OL"\B1[BcIf?if(tCO@<.RL3$8>Vh.@t8A-KE7aj!ac;gWOIa&)k]KQ2B76Q$MUpJht7[>/#>mm6ao^PGc2
%NqR_/kWt-qlg`4Q?SGMMDB:[iE^:*O1lI8'FEPhDr.>d*<O]>O9iEKh>)$t.\@,A#=F?s0Y7&6G_$+e;$SWi#DM%r?AN^:k*df!R
%B'G>=!^VJ#LO,sJmpEe4rP6t#I#B'JM9IN"^B*cMn7@([<Ra4i\T+$1W=-p>\\$/K('^d)e;p7f[3BljNMn'J8^@&BYY@L*]m?$K
%H*]"n/Z:L*V%':mFDg^_rSst?c\+%m*H/_Y8lrF!468/E5ok]2S-]^X82UfO1csFt4N?I)I(:/Kq`\tp%21\n>eU[8ENPH+9+(Ea
%pkkgI4_@82P*<U<G9NB7aJFk!R;GJ&?]mp(O3r[tcD.K4SL4eF@+5I/aCSU;I%AF<TEFVIUXC/FN,9KE(SZT%2=\!9=![!,s%!DL
%jG#KHpGueY1F!cQZb:!EUPl]&`%/C&bi$W8gb=BUG#]X5:j3(b3/X^T(It,eGPKZ2)%Ak@hpFrPm7<0R;+\[bD.&8;hjen<`]M=,
%O^k\EQ'aoHhrZQ_NI)`j3bib6Z_6>.(E$-+U'e-8**'G):dT8(T5.C4'q3ojY^BH'8BqQOc$WZd0>e..Hq>et76WLJ#u?nc\+n6*
%aOiiYh;Yn\g-W[eb"]`OPQbnQf>E2F\V@)66.@qT6D'"b\I,5__WG/MD"qiI\eiY&,FjF5$SF7]V1OemgaRjaPXZ18_3Jo0,:sDj
%5]#47epQE^`t]@8ZF"0>#-M[&+L01Q+:MH.+I(Ng3lNpiBTa\oo6iI=kFW$S7W9+%jJJut)5qT;Mtm4)I`%9E([EV'I/,',K<G9d
%\;4VK$mJjt/<GrIpc!I,<Q)Jo2d/a%>LI2YUlH\-9]61\5)o$Wa;Yr*79?t'T^ZB*E$J%f>k-mEp/o^pfLFkjj+]\,mY;Uap_=&s
%cpVOWJQ^I_JT,Nb^A$ZD/26RR+^Zk_Rn3MZ2^ZDbUobVK3($g!LTfWhWC@!;!Jt6+cj/k[4Fm/TaSdDT[D6G5pa0JOYnTj2H>kN2
%Lu)*Be"#(QN?\3&Y5kP7(`4gD**Y0s%_o0_(YRenEi"\4*--rJ_2HLR,,S&ZVM7$n>nfMdR%e(VbRcX7niKH_W;5jCZ8bP:n<I:9
%D;^kl_gGkNDSF4GcK%H%NAY.ETZ-(MZVXq%B*FciPDa*o9Za5ZaA/,:m*19G"@JKqiAQBZ;@LO7^4O]d`9MplC[rf3-DB9t_ft)L
%%`]2>64%[[f&5JM#YWY`=E7qW,7e.Or=6`pjcpQ%e3B^ZNa?qIgDm(;I":i:E<a&2/1D$.;Lo:]SOB=l8IESX&hk*BRL.>qSUka1
%/kh#c0K*:!nMlfZ/VZ6=m"lR:j?41qKZ9&!1+rR!8cU;/DR%^Q@ZRR>?*tlEB,RkdF4<Ih0S(0(VPVq^%57SDibqA_9AG@>>OBpl
%"739SV3o`ZV$%:3'gTUERZ)EIqHqM\12`1@GJec0^l>,GQ3$=!Yb_d1Q9I*30aHHh.:JSTY(;C\U`*KCrmd8.d?'g4/U:P[=@5R%
%b/g&IP\@Cg'Tj1\-p_R@<mO4KN8NZTDDo7W_.*G*];R4k>V3(Y2E8o5_Yg]:Y&`Kf6n#m+CRKWr\]_?3A\RZq"293*GgUqrDn*Bk
%j@39<l7SJWGs4->@-@*]1;j[<2(;dj7;deKWM@&XLp"g=`NNB?-JtoR3:Ofni\aH?].SjB%AN9R66^EN+,qo1r,l!C0Np#(*FHE8
%N,W2"ee6do<%h%2MjKGCignk38$6;."!G>HL[Rg>q6h(RN<NV.6<GZJ^+pjU^SScT,jBs:L?=pk+9q0Hj:'g_S>37SgNo[mHjKs"
%D(*g=RfJJW72rMHa#Fd(AaiD;`ZH]+3,]ZUQtAoU,aYZj&k6"Dd>/5NL05!$d/T`?5=a0BkF%(PXlK\XpYn<fl.-&f]A9[GZi6_U
%!'!M\FX:5&-'9=,+V;F)NH6nsa?X]G1eK#ddL]G]*$(m2d4AeOc_Cb2gdOpof<!8AiHFb(ME!/nb0`nMg*AB\(M8\)4-2iQb<0Lc
%f1P<QZ_7ri7@ACac%4q^F.sZeZbZR/JBe-5Oa%^4jBqG*c[6tH6V4c#%OiV<d)$tW#V'?>.jlD]F1D"^,ZMHjYZN05*pZOOq#IE^
%_hXm?J#Jba`4ENlcVs`Q08f!\j?kQC'^5Z5L';$?/o.gtf8+OWfq8e.8I/$9RP1?@>MbOq&np2eD\Ck5#r73SE/R7r&."ZED)b'>
%PdP`<cW<%P#!#-d>WqS$Dujo.6A6&8q+*0eohMSEMf-8QWMom<d:C@Geh;T?70Gu1i!r;P!N;.#,#]D5!S(c&4_a]rQ92F5RP@uP
%@MP.2m?!'9@d7C^JD^F!-mTO+!-fN0Jj`]sD<FJ]a#l[JSqY.nEKY-N,%4BL$mELJ-_.ALn!Rk@5o'Ki,3k5Z4Ho#7fg,b976'pN
%R'e2m!G!&k*L?5Yd@(f+cat;[-/p$M0P^.pSV.RFa2F<$Jit_12LlK?+>kX$032m"<kVqfX,,'[1(iQm.N5<^@j+JX/DG`Bi5QF]
%PXd9U4A25@,j[c``C`L&"&-Wd5;9+Df-DFVNPCRr98#QVi^g?>'7Yc_&m3FnYhR5W_E\hRAJ&HB<Gj$#7['V_)c-`9Vh>5n)W1\)
%g/$,-DIfI!9D7^Pj-^VkLc]_3jI-10J9LTV(^hV<+tgZ19UhB*3]EkPA$eh+^bZR>`Gua4dY+)ZR$#r*2$9D>(hU-(-e2"N`di]^
%4VQtI$hJ4]#>i'@S&jD=6^kKH[:#AtWF?Lp9;qQ0Lb.TLK>%j&,7G1pWG7X4=oqpqXD`kJ_R!W2RT*>oira)H/>3WCRQ8G6oNI&4
%EQq5s8=UBWJ2&9-F:!k&[2;O%HjLWER7em"Yb.'e(PR6[SFchd6pMM#o'is$,V=L1ZJ%jK-f,Z.i^+;"gT^QAV6W>l.Ql^LLC%p-
%6BFbG"psQ>IX*#n3[/(\TKsD1.RMXa@J<,?[-0\]*lLQE_>ob&+ZP29Su^1dSOF>[T8S,5OQ"#YPQKfZr+I4!=c8X6'kS=?^fo00
%L?\-O*VSi%bsiCR*%iJ'&<_m-Csk5(Ka^O.1PNrn<)!)^F#4VCU@T&WMK]9jlk;t&j!H+")US?^2]6F@DL7#DS!eY5U>H*L>dapr
%\?ScM+rE9NZ_YX"nD9,d2\<ufCI1qp!b.m_'LJ2F]+<Jh8q<lgAXED_7R7.sFA>d'PX3uW?R1XI&q[=FhD"d8aY]WJ./p;D%Nq*9
%S\';f7p@&P[a?^qa]QKC^sHDHbr,(D98tj"'7)OInY\s67/k2%Qo;qj%#%Bq9RhaC;M(u+92l#@^2O3^3TS:*m6E)&=cnF9VZ'9)
%EK_9AG`7dt`<+:U>*[1C4B=3_C7<ApqIY1fAJUiK/:ukd0=IXO.,KL*FC9Vl:!rAH<):@?Mb08WA9P66&;IlI^ojYbGTAM[')XU6
%rK+'3^@c]gK34h;-&C\f9J6p5H;I%qnfTc@*sf'3f`SuD>A<*`K!":<=bBCcc"Z&DpBsHC3dU"\WM'ld98DtiauSNo).e],8pCQ,
%"_hLKjJsamKcA9I8Lga-JDMWf&O.Qs!W-OG;#I4HDuksg*js;8lVtm?nHq`60URm\qhJkHp!G6hGk>Ik@"BZ*Is=?d(4o"A=S:HO
%(P_tkj*JD5,3(\QIJa5j$!#!oB&Hh=7]i?+qe"t_75PYOM?/n)'f5ngZ+T<j>D*"7q!2PA1k\B?Pu-8=$4(la!62C0YoC:hKZ/WF
%Z;$EZ7^Ih_eA,7hY'bYt"p/A<Z.Z2*!L\J-lQ#suIh"W+DGTZ58-G3S6d6&cQ'/WCAfReqGlDHn:fF7c`([DF+];26&*H7Q1&.*.
%rM*)n>glZX;q)U^6=a5mQ9grE<tT?N7@!h,Ya'fb&CP@1p`Nm)=^!mt^BZ%6TTW".,`]972*_s^Z?uj%lVLn]4bTSm@+Jf0R2ZG8
%PBcIWIBnD"(_N*:\-nSFR9qI6?oi>MBJg?T1l!aKQUf?`'P:<]:%fGY?`Q]95[`]:&JZ?i+P@)[Smq6a!ob6c9X8HF_/h>T1]\I>
%a/P,Q>BXBH0t+Ag@oBh1-nXB#&Z(leQP2,.:s_7,F&<KG7o>d5!rqT*g[Hh"2]!?r9e=bk+UAYd8Ou'3X<LuIf"OcN70SKKSiC%"
%.SO-rOi9MBir'cs[\<BQlS7S`SnqA_Gd;9`<]i/fdo#I4GQY]]i(cZY+,bq!9@2>rN%)5&WXVoHH*SX&?)sQT*9O,m:_qHr_P)c:
%K.P&]h,8==X?[>EFN(=+C+)sJ+'IW8agm/j6a:bZTU?t+-<qR,a%9g\BFEf"'TmKfTcCjJ.:Ru2j#/^<FYAtInP"TBaG<KP+,0n1
%ioG0G9hUIpO53u+ZljfE70pa:;.38MHVTD7?<:MVnL!,9j:)4^_,q:'0nddo"rr1)Vl4QX1YOe`k9@6?!WV=/#%)9]n;-R_^m7\,
%TfS/$Rk4uH'Gp:f\A*D'D&4>8!p*^`@O`3h`W._M7&G[+)Z]IT04^SnfS,S460;8G\^6g/[KD,RoeI9Y^m]X^GqqQ29\%lJ*g`XZ
%7sOJ6Tf^;uPD(&d.NVTKK*1m:g@lF8&5Ep%n)]DQ23T9>KsOp,S-DT]-7'</+RagIf"h&aL?k/+0a(2I2ATS+:b#8^`/8CZZTne\
%g/=^@R7VOo'Mp)'F!3&5Q3;mu.a]01K>Jj::rt-7'c^^O)0*"b<^_Zs8Ed,Q12QsR2SL9i+P8LMd#Op6PuqQ.PatXtY`XHJaC+&V
%5sVI5i>NL(nL2fc`C'b2^pG!'+N)4/NN#&[-=O,I_$4W9Ym8e*OBk:]+.4*u^:F:D2JW:["Up\?WF+2.-l?]ham=n[q@AF%=jI&[
%3ghgSrZ=:j;7NM9S=Jj?A5,&#=@efGP.;krSnm0!j?lKIQ<%RW++3%kpfh7qGlJpUB%,,5-B<p`me^N!=)7mK9,<L6QGNW(#4N>i
%'h'XWgG<f_9VW14C+,YrE[\)#@`PbAUUDO\ZAA'@>1LLZ1L%6pHk^.GRs5"UM&7d>r%-hQCAsoJYsjr>P[tck.MsO(Z.73L%r[]>
%e9ko#dPp7=C:!O4JZ-Z@O_S]$O\pa>$S*W+JiABrW<J)+-NGk$/Cg\i@),#m.^8HFne=+HJ&EX$9dK"<5eMrL\q9;D=(-Qgj%H"a
%&$i_[T@Ne;,R%e=Zg'u1.OYXmaa["'>]`E>U9[^FhLp3;*MSt'^fc1cOn+1jg5Hp?;W.ShkSN[V;6D:HgRb$be/SZjl^&<?G>_n8
%^miA`3(+'Yq2?G39/E:RfQ4:dWWPFoiQiAr/71"E[1]/&W72f+S^3J<_ko=>1j=Q!8#Q[5&NF:\%qCK+<(h+@i6OD=Z6Oq9L7=1!
%Od'83]g>+S>1f\Zdf+J#]We\>%AEmm#t8An_4(S&NMD^lAOmKuXsmhR(do6-#X3en:l),;J.ho>K<(I19!kAqet2Yb/9H%aq#>Hp
%9`,Mkk+6Ke4_P4<YSZua0aA?d4=.cg.ZJMAc$rFaZ1B7s*d'PQ/$);l"_,YDCSAPci(RgaZ,hJH_*\IlZC)mq'9^@`oMk\*)9]K^
%Zm[$uUHCr0\@j2oHS`hhY6uqC;TqJ%6fAih/riFM)(WS"!E^W`%_&4(JQp,RANV6,&[Jhg9iCC//k_)5d]_`?knK97T-ng+[K7!D
%MO%#/HDWSmjK;qW1JZ8^'2.tU:BcgX3%t1SC!En(;PJmA[$M0!32C4]qhf4.mW=1?GR92%L't7R]@AgD&MlX>G#L2hVXB.XP72+i
%UD'@Q(BjUtNe;iFMDXSmdD4CGP7k!q_qmfgc1-gVl1&qF$kee5I>iY5)l1uUF)55(-/Im>BVJkYM%@*fs%)E2A(#GhU,p".P738B
%SCCIThuQ%1E2j=C@ZQ(`l5!OJU+;$K+o5.<icqCO`Y_h3XjY%oGZtWSqFImM<'1p%Qi[raBrrWsftFiTc3nJt"qp1.Es2g21MlEa
%gOk&63EV!f&*.aUPM=Qc%*0_1GuTRM?j7"RD<VfA]MeY&LUrioJYak,Iqp<3r^rV^*ChR<rH."6pQ$ATOshj&,ld,S\8J[S!Z;Ru
%60KGJ43fLZl5.:GDor[/*?*9hJDl`T9Z".&isG7Y;5Ol]#X\P[nDtBkf9MC,Zj.44Xa;mX2N6JHBXT+F1(c+3B^-hd(?a!u:]sWG
%qj!qfDBL]fi]b3]HaJ`96qj0;XseN:YWYY0,3ab3gcPQfTkGpY$]G$fTnMe*H:[C'=hi""_"lUrO:$O]._C<1::HDg+B`h56-92h
%V\2u;*ESi1][t')cI5;a@p@>:Gja3pE_MdjI6<.ukpCC+-V?oHB$m#^_L/]_&Oa#B;nE;FLOX!3WFu>Z!>d%1O?mXVpFYK"658N7
%P!Bis0\&2[/Qf=p6M<Hm,V5q5lMpq4c0^oUAe:^\D'*rgkXR4PE^b:Vkf.tCXbN$t!,Ga$AK2o+22Ct</qmuCZA:!,6o$k.#=)31
%Z]ZK#iQh>lbCr;J[#r4&5Y.!2g>!l&WoJk$MJ\Sd":P;uBT9V5"qdZ`6p=!^?oBGdV2@u%6Gb/VDTc>QL_tqsY.J1\og2gffoG:t
%NaE"U"IEFbD.JWGqRKDe"T7X<5PIa?VH'M]gU@gRd?q@8@\aV9d%EUAe\V?=?/em:*'RKLkHk+44C3'#K]`U-POSKj^\nukCf$g1
%"3GV_X@]W.a,pPKn<b$0aIO">I#5Z[O.""ZOddD$q@L!mTSMObR#!3'd[>h50Sgq)6OuIXM+GOXYW/1W)QrD'fjUnbAue-u/5=Z3
%Q'fMA=.-7m[,<@#kJ@X.?,R]6$7<Y<p;FYg,Dq`.[3%eEQ#10gqZ`k,PZ*Qt$-Fnm)^6C(LB;l\$UJmQNrQhic_4D8]1Ha*/lqa6
%adG@:.TM:AL)#Iarj>d@i$?,Om/`=(*(oIis*Qukr4\8GK.g(A/eZ*iV%7(L9)B3DOSD*!QR91ZGb>K1U.JB[IU96.7)I$)#8VhR
%%#u5i5LMhi&nT6`:mt?]:rVQe;=L1cE%WT>Ak(!T%Llm/JrWg\_]U]c_h&2B&0'S,>;):HSd+'7!%:K7&jPVR(J99'\BJ`AQcO'8
%BdKKriA<SP-@lbkikuVo\VL$Efu/c2RJGmapN&J@1')jR/ZK)ks8GsA9`N24:u"%J_YG]rN=:!W+FP"17%>5Q>Hq->JQ,mt7K;W/
%0paVq$fNMPl/qPH,q#uFNU1hr%*d:h9Q"Hl@lhGPO[=7:*>&HuBF=:<jsc:Fd@WrQ=+*;dCB+s5r8g:"1g%%"(r4a2CiG]h,=r=C
%q7UP_-Tb+NmGaDM?MV5Q1e-":+eOV07b,8jSL^"S"tRQP(C$`[<bRr*2Ao-N@goipRfu*@Y^LE6%ph4(d0H-_/il$UQF3@p4JT]f
%<ZJaXMufY0F4as(^^C!,=j6N\GYX*Ndf"SeV4FP_W9I:?bj\8OkrNXB;<tb@1+U5f"iXG,^/gHR><:.7kCo02em>Wn[F`:@7Q4sA
%5Z7AlL/`SnJ=Z+5osUKk+;%M':i5*@IfN?iCNi)V#ktWSXgTr-HP3B;C\%G,i#uBC(i<?%L*a*4X8:s--spG-St:@s`TbQnbZK3H
%<Z?dhY"d\pm*$*5F(_Brf!e1hqt$IG[!Ksj^!E9-cZ9=i>GNmlq#hF7^Sld$.EXjB/eL%DhgapZD.BO1lDh(@9rn&'@K*OBm>Df%
%\j*1$LDDY^=K%lbWOXHpO\D!VX]uWm3/f>.S"O2]24IVki?H_R2IEtslZp(&5W9Rgj(&jfgJHL<:=X(+^Z_-2:1aSg+kbA:7Cnhp
%P+<\AGr9pWQg8^LMR>H)Uh1&8Gme=BisD]V7eiYuVd7RdZnu*4\N1%([tEA7Xe6Sls2oGf'kJpLJH^PVK77ni:emrUbiNqCPWbN!
%h?eXn]i3.7d=mGT6ZR@CE$#OpXmL?T1Ud<Ul7_R+q=/`GfAGV-S/KA7*J_Wh\:4<0"7BM9,-rN_q/`%scWa#rFK<J<@(.bZQ7eH*
%>UD1*1E-=H+GW=>Bji+K04b[$!2]$c&[]gK[;oM_[q^WalddheK)i%1l]n'[>-><:l#@t#F^+h:91D&,QjufhXrjMLnoRP3V)%Us
%ih]k7j)c]CHWZ''\f^Xr+]kgWS09pic*'NtDa/r4%"HeZX\R\=Oj7nZ/_dgm*[\clNY22^M&d/`*XajjhO9)Ih9KCl'mT`QKoFF[
%?AKi([lup?"!%GU7k1^0%o15-gDM!*W22;'KNhq,Y?2Go2J&IG.2(m!1RuFC9qCkjiBe!]Tbiatfj43*Qa)rTY-5VZQ`q^s,-!)*
%bos3)EOpJXN#9nTG6jC*-*>8GY[!Gk:lGq=]p>]s+>L$GQ.09]0ds#4W@u7;Z"04Ho=-&-Mt:7A8?HL!0#LT-DH6j9-rm8tP$38=
%9kn<R&Q`9Sm6-c(IFQ[:FBe')lm208Q<DN:O:4O`rL"rMQ]p>OEtZ]d3%m+\K@q]dijLe6`gU]4dqi&0>/B`&o2Y9$QuJLTA`kNf
%ie(Y4YVIRjLXF?<$<P9RY*Fe4/>65*b1F^d2d9QjS_L)-dQcL]pGC:V+fqGXGnS.`H8lqc6$dc'IeVg=+PCm`3]eX2\jViFgMW4O
%f1tdLkMZn0N!VSkp%$Y#esi")kA'#0"8$0b4JJP70_5]AY$Jn,*d?_,_?cG*VXTicb4tu^%B>I9$R.sHcN55_'F+q\!YhX+)0JRn
%@nNhk_?YYJ%kU*H."J+24acKrIT06'%9YIejGX.l)Oc:<<p#B\?8+qRJ,t7*&_%gi7Du8_Ka;OBPX`VY'-g9UWOq9VMH[7s"f"J.
%!cKn6L(%Mq)5I<t?Qbj>IT.%[<cLqK>TPFa=4'BiFTAFE_qq*tYH52]qDlL4clED"#IA[*h_THZP.+jZP%8P_qE`SGs#T/l"K&5_
%40lY:r!<!;X^]Xn-\-KB&lXXH(i_&tc*J0_*Hl3Abuu=ARfS=bA/*Ae!u[)uSB9PJCl+H*;_>)0->k%dgDnS+8<=?u\O^OgnXp.i
%"Wgf_(X^uWA%GjMkV%;3fBc:]XFpO#72`3G`Zq1aLIb.-jA>$Zf_/Ocs1;)KbQ:7I,.Pa^JIO#B)i+&_KHIV@_/eXE_BSNBfW>Al
%a*qN1'*\T$lMe]HEW3njU7XZsf+7JFl\YMQoh+sos72?V=@jbK)5?s<*jnD0<7s%d+KIAD!EKGW`7<+9XDBVrDZ.X'>F?jF`ncd4
%4Jc<b"qZ9,)eHf%:6b#B\V+q/m'e0QKo%hn0,*5p'ZCUuCT>@?ALhJ(&[?NS6)q^%1c7&$lQ<i/G&R+fXQqn\dh8KKd7ETTK"KH]
%^p!efP+r.,(;OJGRfmbKg/=r35^qFc%OiCK!!hm3"f>]Q-j4])49M8s9LQ*GNP99D7i-E*:qHs(VWU.T3#3YLrV3`s[,?c6?t@`+
%aO,3>KNGLZ!Ri!D0$/jFn[(KfU+pn3929@#[GX%&BF'4RpLJD7RV)9?WeB;@`ra!-cq_m;UO<#SWH/2:E.[U19DT5n9[\.tE<f'D
%M^K"eS:4tnCKRK0MTc`F)BMqq*9[k[aP]9tFQTn8bZ"^GOq@UMf75*p>I]n!+3rp?clN>ik+uP.WqQ'c7Gtn$H<o/)/)%FD_sBtn
%]``!ic"jGS2Rm*%C.W6trT[,b\NlcMi6O!uSU$$%p"<U6h-P_6@&cuhrYFS5dB:lBQ1oDFKuX+4Qe3gePM^MN[Z*Xp/!S^7[,Orj
%ae#-=5rUY?Tnn1SEAi(B;,CC0"i2$f)^(:K,6D`*?l^t<8@XEnK+`<ns0$aT[-;EO;(/-0C8g+WR?o4?>dGi5mF,%X0dS<hKgr',
%_a4toP9MW-X5g0D.__a?`d2QU@RKli1.(CRHrkp]$42:jYSJ'OAg%VDaE3rZjFO$>ZUb\_J5LuO7#7q3g-p1'))8lY<4utP7^8'I
%3DDoVb\it=ccE-LOGH9jR!IQ34[stqZ'KFV>ZU@o;'Q2oJdpR>F]!h2ac%9:dT'hult#h<KghAb0*1Bk[E9H;TQI9@KHM&J$"53:
%T`H1u`)OQK*V!+0;tGH>3&@h@$ITs>HqaGi@r-f>%Q1OA+>_-H5DRTQ(0"-qD?tfH@GHUna7qM-TP<auJ<(c-U+r>7<NeTF%?C[Y
%5M5HKUBf4h0"PhgJc-lTcCPT)>4cN=1^6=G:%"D+65lk&&(#HdNlG*8Er;1$dOI556-hMC*9tPQPSDt#35KNM7W=o7Lo0j-IUHAs
%q`:Z\i.&6"X)o7\*7D"\81_3fL_#uO'jm-N(j8%"n^"W/!@6$7HB6!DUHN->kFc&gTKsP4DAhTi^]@Hd0p"Xg^+7MOmQZ8ZKPBN+
%gnrLT&MqMMUij7@$k\88>oNLM!`k6fFr1=\.pU%foapQ#5Sm0TrsWTrV?O->(7GK/#-C0jq-pg*A0o-/TQCq;".MF^=V"rDG]!L*
%T7-]`Y/14t9S!5R"pNtCNZ,E*bCsj[e0([Od$1bTKf26+YR<AMs/@!^gioi_A4r/!CaGdN`fqH#M1&65g(M$&&CZ,8eej;Y^EWoX
%W.CU21K?\C^g9m>",-)mYD3",_0-2->"&Y$#/)CBr\_%+f^"b^$R!qjXkoshiE.)92W5\LG[oPX6Pi^i_4M!>M`n'/WJ@lqU?)%j
%qOhp=*S>VnrE$k%cQ@[*[Yd9bP0=92j6[s_:?9NX+C(AccMjN%1aBp1n_b)6\=UUhiT5[^QjuZM>K7rUC$.U0G37dsDE45b,1!i`
%OdpKL3[*!^(Rn&im)IH4\1_@j$^Ct)Eeo/7[%`R`m2/Lu/N7F=i6%J<:Qq>\,GPhR:Iq;krsGC#]B5lo%id$/IH'NW")UTgZmB7\
%50p0Dl`:]n)V%iH9<ej3bIYf*`R;DeU$m][)V1"r8Y%[Y0/`RjK;Is#4.=m*-OaimlOYDnK1RhmW<k/(m$6oT$oKb\RmjEi.PhWn
%mBbR%ZD40?VF`rCl8L&9WR*FX:Eoa3`Ss4778Rnl!J^4ng&]=RH':"gJM&26bkOr1Q-t`1nFR-.5";keMA#_!NhdWc#eDQC)HB0@
%j8urqie09EC2=X$lL$8*LdLmSdh7;SfB>nanrM/)QB!3dQ5fB@1YGHbG4fS^G88AA2CUb9!Nq,W/ciG9dh@8c?r-cCb;-.NrcW48
%P&-?]gg*,/iLhXo(JhGis.8e,%!aO75B[G0DJ'g&^Z!KjZO_bTbWs/dM[he"GRk\h=4$s+a<HTQC.#G4`RoC22Mt4NZ;N%240T\b
%O$sqJ63_[0Fd/[+laB?@k<BTgNT7=9X`7ge2NsYdSJ".r8l]LL.Ol'5/G1/qH5_#=&olZ"@ja2s.?a*r91(-PH>?\I_C<]>B?j[k
%'[D*-73ES=\*E+%j\Nj9X_QL"E?7ap/@TAUmaGFFA`f?EHrS$`B-#JMp-E-_?O:kH]5XD<i$\c6l`ppABZkR/>7beW,>^`@"-WkJ
%2Ui7T6\Nc&`@Vq[.s`.G#\DJXg^qt+bO>OFBirJ?=\%h<#P3:F:i.]#HPfq&4Vp9K@J1OI7T6atfkfe\YCg)0>OoT?I*!r4?tOuG
%[k.h1n<$9!#"F/Z;r#/B3s8#<OC_n0$F1neT-b!T!7m.8I)$,C"*e$?#i*VYF<_.+GfR,'A8,JdB^<2`G0]W[$LW<;8n3LaTl@eN
%O=o=H(6V8`bL\YAJ!kl6*<>E#YuMR7Atp9,4i@&A0-N-:K2$d;@5#DWp[1Hcf\A([:Y0YLlUC^8T3Kmn_rKB!4i4L*bF\^HXS2;T
%`Fh-4j]Rs>30nM\k1J7hX`SZu%/&f9%>kE/O%f^Rp9\d9g0;A.e.!1im>$R$O%kMB-Vm80?:H]"N8<4V)O[AlYq<9]@$nY[CA3BX
%R:GWfkH*R`@7mlOCW`d%aq&WYm;nmkd9[=S5b*ticZrY*GhL(BLKb\pTNhtZK\u1)@W&YgR?jI^gMd;]B`T77]F?0ZNbqJcP\lWM
%R+Z&<g%943c1GM<i*3J[;83i])[&7bkPLJ-lk]*Ye(4!lnE6+j.WIO^0-iK#cLp<hd9;gYCuW<CWKg[h>i0DpAB>&92NWEsQ$1CJ
%V&GXi=oJN4+-lbA2oC@((#_V_gYoDV]+\Lf4#Yk/Mirm:I^jHNN+)TSH\4Id.GKUgGK]^F_^jJGqVf*?c@7fuR`*,1?aIN'K/NI[
%%q53L2oEqA_].:Lg3-Zto\4hS:<;i"n.[_aQfTC\XL5+i7I`oVZ(^ts4LP'd(M#B`q,aK2\="r4EVtHNA[ut@')M/FklB.pYkaKD
%Gg>i]$GS5U2m^SDfss.`?+;[lkYh[XeXb[A9a0CFB4E7sc-)Irnq2K5!^Ps#!WF&,4<$O8f_b^(ZGt=SQ,BXi`(E,A8&M=.4IHh6
%Q+3uhPqp;85g/UlG)>CD(sT`H@ohiY0_H]BS)]3Fr-X4tUD2:@J4dR4?+#N/aAQP@Lgac/MR&FXCa,KpAds,)d=Z2*J#dAc@sL/5
%kWl-%lB0/gRs@or5.8JJ$4#pT3C-Cg-q<Ka3lIQ75$-0p.7PdR\+H.anC!8"JTbKs>O\IkQ=8KkHPU?\^p@&(H`X:ah\N,sB>-tQ
%GO`t>n[f6\[F/_.SRcHA]LMD5aDmlT_I+\XWqF0aaZ[odp@smTjM]dBc:fD9*t?n4bU&;58pVb=%Q.F(UoeF(C:Y]S^!tX(<p*K*
%Cb>>Sr7A>I4AE99P+?<6\SVB!jEVU=g-#ta]tceK\+]mK"C>;dB+4Npib?A14)Q'Zo@[XFY^D#'q(&.Jpb#fkr]J`8D5RIkRk3]m
%8RVQYSAki5XP?.9F5Dos7"GeYF^?S"JX)\)**f<r&DAJtDIkuPDf%D^8rfhpZLIicTN'nedue9oAB"eF<&t4&I4g*c.q8ZQ26=?_
%l7VU7]NQ^*QRP%(fpsW7;1(oD?YD?pjhSNg?k3nP4P32,k]m954*Z:)S*(S;WG9W&:-qq,^QE-GP8/V*Y'@W-2:)H$><YHC&%JK-
%0('->2+BKN;.WYP@0S#*45BtH)e)^1QB?c@.qr8A)[LMHegSLYlHu_ODNK5)nPmDkTNnt0/EV83-TfWj=ZK?n/uZ9\hNXY^O7Xnd
%>jArMY]S]RZEVFUT5D,_:7"<gG=n44?d?_l2E9I$cC"IR,'.LSiMMRcSJi(3R^5jiOV%u]86]#V9QsQYS%@@(G4qCdH))n^\)!fQ
%k.X6o::>9_AS4C]!spKAWk9d6@>[NB\Q(7AA"-=&(@*^m9oCB6M=fB@TNj)c3$M3MkBlV!.lY,LMj6P6>KTPpT0&+sUY#LPEn7/V
%ga`#EJ\KM!J^h2CY24^=r[Tbj_To#2`%J7-]l6+G5M2,oi[oW$(8B8-qJ>Sl!aH3e:\GH-nfN-p6Y0%r(BT&:UrND5/NKE4L&PQY
%Vu5YkhtZ)@YW;]\(qH7,miZ[aP@0TJIp4EU!970OpWC&mPN)unBd;;+rn4>lT1iMB'W>4#XM<rF2APNVVfsQcq5-'AO!LYUEht9a
%_.qc+IN*4'@isOSWZ![;?rP^EUT4Q8[;r!:[RpAdDGafs80BlRg4S_qrB#mCQ0'8:XG<S30s1A1M*u6/<=j8F)-^]G@bOP?2[5LV
%;UW2:%sSQS:f%FFf^k*5UjS-lHR^jH#dhH-H/'6ES#E#oDaIq!ge#t]d.$+93+uKgpZQ!`Pf1(&7X.q'A"E6K=gEpa;'We!a^dmS
%FrA.E%WHqk>riNflGSZ7>0is*7NA7R-CK,Y_4I.[e4Ys5c#"Kf=K\70*LF#\#D/@[+RB_CG-V33)I03E48:MG!QW"rP"^fSAhg=1
%3=aO';k$pE!FZ1D9deb]8ZHLH@lY8qR^E?mhsA*IKE+,=nf[NnJANI$*-Z@3pN9sr1lC4/,6S3hS"O,sr8cY-D$+!*UW[&*IUbt%
%^tCjb##dIf_uJ?m'Nopm@3!fCW?l2kCMZ2M%\JQO6.5R8#a&X)3a5oWd[Tur;?(_(&]e29U/mF&D"if[XJ7NQSn$U>QVAU#5u'$G
%'fD`<fcadF!;7hDC2AgJfUWrf1(ddD8X6@MqbRN>Bo./^3K;NNTe'kL(m':LBfbRj3=K9qn'QH<@IV_#r9H+$0_pP&P.3ZCE]*dY
%+[LTS-[^+UUOKjH44gei#!>*]`FEDT,S%Z%3k@E#k9FY&ZG0-\jW45H@m-N(",MlF<kGd76%9n:4ui*YY`EU2PI1qjVa?%7Q.^Z.
%W:@Nc(PDgY1-2bB<H^f*$VC8!D\#.?NpGnhObO1a.gHC&"uB3e@8/TM;;ZXW+O^*T7fZT;AG-)2(M//$md.ZNn3FC"7@WttMSEi-
%CAj,j]dE\A='[0l2"DZer#lX0'lPC])9&Kb]Xs0J9^S`[r7g-rdaQ#@[,sM&*bAi;A`>RlREigOes%`.k]TB^39F9FJX(/70*AO8
%ng3(kd:N@o'q-a#QZsUp7VaTD&.WYh3L=$+SVJfW\4<QOJTlCd?o=^rDe'FIP!ns<7Sb8;&Bsp$,2Hk+UV\tk-<cDj#&+bo#u(qH
%.I_mW8C_)((m7!T"@jCMf4CpC\I^Li5X5dB0JE"?`Yhdg$IVV)<t3_.iKjaH!VgM@.3Zf1VbCSBGf\8-DR+C+K*W$]!X9Gp70,]q
%eaLX3CkaCf^g5dKR_D?+EVqZ[CAK7M>dJ\]<RZmV/9GoA@'N;?YX\dTN_9[(TZ,WA'W]N3E1lA:,b;(CUW9oYk4MUpk=j`m,-r(Z
%7Z7D%\Xi]4MVAfuI[N3k<R?qJLP,N=R4Y+PLn[YD`5<S[=hPUsZ+:RLd&[I1&]\CnPql<ZkNf&2F?=,M&U)`U-Q,H(WV_@;lggt#
%<NrgkV;"=2?:p:05:A=:PD^?>EO>@:&1",A.'Uk)c;H_[dk\M?JuFl#$5-WJ.RAaM*51MDc.8j=a_[`+Jr;CR$rJ^[^!;E\H$%h[
%X5kRXYb6FZ*RBn'JQOrjgbAm?$"NYH7AmMlY<`.2noFj];fO%i!?W/I4jj-nG5+3=(m5ps%ZJ^"ar[[ALK1*8"7B;BM<hB_M@!//
%%mf]QSg__GLbr,D,h`)![cHIf-E9QmUQit6R4!JX2@Xf-Pr0#(As`1BL3PB`C`:se)Zn%L2!!pM!4;kp8O>;9PPSbpcu#'$-^PAs
%CDKaN&X^@&pM(.U0t[tc%bql39BoW*h.5Xm(!NS<R5Zo8*46c40M)bnm?&HI#pXti1h;?cEFS)mUm@HB]#&V-:2La@20>APC^=p)
%O?dN<@rD';oi0O(@]+*[""ZCk#S.4cU-<\A\<Ki&Bmo/hAnKpafFJ04ERQOU3O-V:Oh1UM)^J!<WOWUlMS,-'[b3=]LlL!FS!(3@
%f;,8a)JqlUs3)V3eN1;4e=O*1QBHX/#PQ'VC7:a!C`$cI,k\03Y1ejkMOC=4o98Rh0WKEnl4cpBDC.oC*!6aXVsY<s%b*_5!MIMh
%U"'")R'N5Kn8i)=-,X]SVIV&L_SM3i7LE)"gbI5"@7q;,fHOT[(@?g8*?uou(:!u1d,PX*q6)>N'GUTV+Q,4-/AU_Yj/Pjn5B_%A
%*K/aB:#a)m%2_i0[U*KgGIrh$#TNU9Wdd\7en1HVRQ=?oJusnu>n;VgJQIuJj'TosC*A8Zm'n*mSN#+Q<jO?/R`0t?VBiPUs$1p$
%)Mk7LJJOT^o3m0VWche8"%<NpV.=Sj.6FBD0;c]76j+cO?/=.Gc&<jp*SZSEI5*7f?oDhYeZ:4<hcmQXBP*;b[<CMZ%21p,W?!4h
%=N/K[JjaQC[qV"W;i#;<U7%*'=]\.YAl^]P'?DVrEBVud!NjdYcUXCPCA9.+D-^"]TVm%h,cr"mMs#Soju&B*dL%X+U03p&d9nL\
%1V9NQ`5"4$>%H8Gm21n"Xfqk+rlK+P[\>\WOn:Pq92s*W?;k#Y;`20LL0W.=7=n/Jr!U,?VVreXZMK2ej`0c`';RqGYnS"=P'qi9
%N^0FbQ`\(R,TW0&h"/'t68Ims/nN-/G9>o6jDD`0W'#om`0L'nL-,8VoRSY.nbI.tH!p2FDA6V!+SbRSp]cC&?A4Krk&B"];e*!9
%`!L'Y)!2<n1]5]IRkT$uPpfNfg_UgQ+M#'/erZmjT0WgV:%=@E#Go)8`u=D#aKjW(/>h,maDF^(*/K?_E7g/C-ULXh%"5]a.>5uq
%M"X5[5!WM2bXmn<E#0`e,Srr$A%!5:=fM0c=<E>@7K9)p$Y>r:`cC9*.Og!^^.d\*_[Nb[VmROs@)/W67'[Nb6?am_'7(6Ria3"W
%#fjm$`WJ'O'EE4PN2sEDU?#I4C;C!\[EAbD!0UAV11<.-d^-XQS-i;il-5=IN%E^>=m2a3gdr"^j.`Fq(Je\M[:/ftcNX=i[Lo85
%5oqS9Xhf`Q--;F-a"Y0J:_4lPrJM9/7MhuEo72AZB9Pd9+([K&cpmgQg\s%8X!3.H/i.&,n-E2c;NU:^'W=VX\(!#9ON)"OalX4L
%[_Y=Gcp^Th<&O`l218U(2J1u#(ft*O6';qUM&IYFER>alTJ-1jm$ki#T3udZ`7eC6Ok)#Yl*1U,,dAVEe%gu*RJ>:R*bZ<$B)"f#
%d@tgHDJV6)M+Xs-%&u4%;is`:5Km(t=AcrfM`$cN0O%Y54]B-=;"@M>a9Q;b\tUr:H%59\?0s-^M&B8NYD%Mfs!0*dQ7e@L<&aN<
%D#HS6MDm`%Mb++X(;*#,CQHgkJi=^pp9%PG;"\9h?t`FCBW8lc$0r7MC8!!uTO@O;S8m7GZ.EEKK5Knel`>h1kX<9f=LOTE`Fe(G
%9smfI`mH_oSNUdo;CpUeJ^e,'Fo1j/^?6[7'l8u*<64+2fN!!mF^Js5]k1i.("%e8!kd08C>B]nWW_2[YsX(]Gh"UeLmA\(UJjT#
%,m&tJ)p1!^liCLi/CH;=BHHN0Cr^B$1'<'L;Nqe[3@o)>Jj;M97[D^oOe"][WCcOUaOY0mE?b$D6l7tq4VY.d&90<`VZB_^m>IWL
%'kF8DT`IL17"*J"6VM\XUd1+FnM$MX,HGl8j#mYX%^n.OIHV8rDLmI09AgN+TZg71Q3Ok=JIpndB[jB#'6^7XauX2n1?r/Kps.r[
%O^/ZhVh/E5)teUb$1Ibs3toOV$oI9!juQI@QQ^fa\qQ!n>Zu39UZ,SdLCa8Tp<_(QiT>q-2d;>.647#O<k8O#B%1B\a,D^+)3PcZ
%T1L:'I6DfOSrCPmb&%&T;E%h.-ar5WC29PeTllIIBY::qBTHXb7<!H!O@.&ZL+eitM0<AuV`u<RAiKaH]aA`ZgDbjOG;WndjQg5(
%fk4;k,LYD90A]X2/eLX-rDKCrQCr]jZPesPLksqRTYh,O?.FK0,a(b@+[Gcq3!@+(6r=)>6*b$bKVn_^,^?EQ-Nc!CH!0PfWgMG_
%[$nU2&-DmnIAnLdS^DfiZTP/a&sKSq)]YHS^F?HgA3eT8[t$c&4bX=>Hm/QIJ8=:T5F&@g+0*h22ZGqW[7&#'M$V$()EW\RQRa^D
%G7YX`(/1+R+q;sk:*3rIY&<)*H;LSm!B\AaZOoV:MHsVL+=@R1qjO1tVm]_rNt9Td)iR#8#I+<FhCO3'+1@Ol&qLgu@C'rk7eGY1
%c]b*[6%>eASP6AB4=[)_piSEG)\ss)?uU]C:C@[g0(g=`@*KBdO:mHf3MC2S'c>CR7[-!MNBr4nY[YJV.+`uJJSe,:2L3!Qe>k+2
%a`<GU?T<A:)[jH5K++XnBId3G"7=Y;a7E7J1!H7,/W@^-"&bG\j'i]5PXCKW,`ei]Mg""tlO"1*-4%4t,`h0kp]ZL40dN7i.Ji/u
%=+]7qpP)t-j,eLZHr0tGHk:2#U.$O\K.WLdmI4rb4,_aUH0QMgYllGIi/j323s\-.kjC^/nXS8%LupasbC8>,4R`S_X8`..\S38`
%FF=4r!NQlCA/)>KYr]Ym^iX!ZnA-#)c=I#B^^9487$0+K,6W:-Aa;UY9/.hC5:C?Y#90#D'JQ+]kS)I/X2/^D];iqQM85D'j8n6H
%*)(&"R#"+^-r-Op$6JsnUb-%Oa]\GV5d"Js6oB3uGo9#d=9hY3hT/ih!GDN*3CK!C>[3YuLMU@d:0+9qk-mMqcEpY]LHLHgMn4,P
%/9Yf,mVie";sgoINt0";r8iMDQ`h"?nkN%<[Ro&f$SbL\n3#69<nN^I'_1C1RH9p4j&5F8\-Pdo+f5T_=fL%7$?ErKLj<B`>tu5`
%c2M@8',(m#<1b<5%n_AOW**PUhT-Ie;4\m1>1&T:]8ctC'$`Nd<!_9nJMmb5(fpmob/bNU(1!UJMFVS=!'EiL@^-ge"V9nNS1F+I
%`:O@MX<+kQ!s;+'4A==Q[MFm$=N&8NDF-<pZG!u'*$LL8//f.u[\bt"3GD^::7[0/J0GTJoaZ"8lnI@S+LrhRY+p:Rlo7$+$?KQX
%nK%?%PYc4e0ji<S9q@WY_*ChkpXU('5D?TmCFkL8;NcJC26,,2OY"fiJerBLUOIhB"9cES,8To<<=R#h+&IpOTYXIHO$V7'BpU+[
%)PMX<h(7cSjU*>=_V'>@-7*E7D6G(%]d1_'WAYV*XrH%.%$G'L>M1qO!\I4?Vc.q+]Y,mci$SVR9b/Orcq"^<5K_WbNY/-CPMMT?
%7mQ;^Na9RFP^O,N(4L_XeJ:NXCb&1:G/_bGHKh,QHdc(3ocU/VcTN4?2,3Q#?J)eBZOpeWBCh7.j)a&]\R%'=h]>26J;3G:\:h)^
%9VZC/UBW!+/MId^eR"!ET\Z_4[_IR`Yu:AgWVSfJiH!n.K3F4NX!pc]Y4Z&,gh(!D+e7,":Q9mWTYnEO0%bDIECVPQC--0!+9mdS
%3S?kn[R:8-PgI::<ZqT-)^*o'491'Xb(=5-*hqhPFZsmV@QF_>GeQP.n8*bBCeVrZ!:Co9WCYc<HHNapb1]>)O`c^&ODi'3@6#fe
%bU.baLHWDr(4FNn][4WWGZMmF?2_gM!KVnIX3.4?)8pSc6:d"GU$Tq>#HX<N3q'-il]OZ4igQ&*M=D?OJHb9CqA]J_KXtQ3,sp#l
%NYt^TML8fQn$C4'H/>P&`<SoGlh&)/P%a>d,$"/]Gq/2>R/<Ee::*Ng?c"tn)4(Dtc0tqWRJh,Z>!`(=>sKR7-okh.VV>ZfK#)1J
%#`:?!9ggu=.[2lU"IJ)<$lku#6FBUYR:mTr)*MF3k'>@3GV)9p$u(WXPgPLp\SZsFhg2KSa.Q_*d1&"\j"9WVK^m6-Z-c?(g8L>^
%:D.Y%)<hHUiX,^3EU\'_+614CD(Aj;kd_WHb<nNc2?ecdMO>CPT;mPYFmE4k-e8nH>XHQd9GUa'6$c8&C]b5q(2hRu7Tn%KOTf"n
%r`DXgiDF0RnA7_)k[AhS";V1BCFP,mN.otJFY_t+NtRYOH.Z[KNFZH3-s;k6Nj7c(fSua!0Vk@AYj?\AD1rG3Yl&'oA+N>#[V+X/
%k.Z[YCLipt_?>PiEQZZC[`Fh'G`+MSJlG<X&rsFC[Oi$r,-18L>l91S!SWslAI^!_EkIfkIsqi;r6'A&E$irn1'hEDm7%9RR2tE@
%6V)Z:&B+m.#F]Dd1Q<YQ`-(CIPDPj:0G>3W)=49S1b<C[HE#:E8P23U;j*8Vd'@I:5_Z81C%*HL&i:2tAGT#4p<92<Z(`7O^(=[:
%1m/m(?G'jg[kmM[eafq\E6#FcN$@S4`VL:m)1eJfr;6>Ljp7*7'!$2l5pE6<1:U;qj)q]Q+md6a-<3RF4B1>hoEr0I^d5J_B0X@H
%,k.lQAo\:sN9nqANQK$aJ.+<H&^T.IU-SA&:RqJH#r3DT*5JoG))i](Vi9j?jib(\\6ngH!U*QqO'm=oA&!1XU&kl[TTUl6=PR/9
%pt'ci79:oT;OkI=l.-2I+Ti;r_g'?G`_-#3GQ=FAg)>,XWoHSA4S+f\!+GT^F$^#,Yktdph[j=NUib'`XuP7iHSR]gL#Ni5CUc,E
%3!O_\(&QL_WE^(Uf3iHs*R*f->YHele@UL)/Ke9!'f1N?L$["!b@1gMTLO/C&e!2t_\IZ3=Vr3_T4^kb@[[$Z11U@>8.q'NpJjS.
%^-f>"jRK5frLAWY9ZP]a41Yk'-m1rcRX"G7==T9)?g`c*TnGdcQKY[kK4gW-mAQhI_BC;^<<?:T;ME4#k4KX2Cst-hqF&N$#t/)'
%Z%BZ[P%AGbnt=@*]"kUR)Mft=98`rWa$J#*Pq(hN:pG;HCF>_Zl]>=o[4G*QeI%O].*oe*C/RcIFp[jm=LCbV"86V(.L`Y&LWFie
%2pSB4QA0af5"_7Fg1#Z*rh]`A!_A95lb_(X6^e7iP(ahko41;KB8d6[X`4;ph%1Y+6sWuoSN'3A5L?2G8'1c<C4WAbM]`.Z)#/\p
%Up)JeQ-N!]_SF'af+n-:=D.q-G1EI@,.,X&6b_L3&1Yqu,RHc#m)P*Hk"f,F^0%+q_M$qL-R067Hj:uu$A3K&cGISaI18+c*@,Uj
%3<J/b;r&cC,n^%=d'QQ`<0U<iaWl#Gag;'BlcCdJ)($>(.J@l3.M-tKKckn+."'0FW<p'5.SH81NG%H`+ASt5a@"__RAF?Va,o3)
%,f1m*[/_C!O3s&Y,NWV+.KR>"9s;%iE*FJ_ZkH&g$MVc!TAA&0qA7^D9tr'W,oT)&-*d&u=\BDgbF8BdcgGSc51EUs=<=W_Z&BYR
%"'9S=J=VQuWS@M@X155ZH\!Ok$;tcM&?CBH@7!ZfD@T))@ckN%EIrk_+Nd*-kQXnK>;DjUQp[aCni8^!V'VYLg_:%6Y6h1bj<tcp
%?;si4%O<kUV55oS:nElQS(SRG<!::tBD]dr$g?$\KT-`p6'#2FXXM7hZDoOUh-k!--=d+e/.eg3KSW&'AdEj1ZW@-m=M``km*rVK
%Lq9CfhZj:!`IUH[Yr,EKW_/M;Oi5"r`Stl0&\Mae\$-aN*(m#R#-WX?;i#"foJHu5\rh:_RL4PNmJ'$"AI3@\L*jDQ$pmK31**0N
%aEGgu#0DO,L/#!B;CEBBU\R[dB/l"DddtU8:E*;aa^2!?H3"m!iZUr?V]A]%P:d\9YOq#bqo%T%ci=:^6j,N;o&I4[g,,#i76DfM
%9gj89:ggQQEadAQo7`5n78Xn0g+tui0_GN>Z#g)$;)\Q=r-ZUs98tJo`dSF))e)Y'!AE@L"tscEP9tZCEf?AR$1pXcJ3Rr-#iH)r
%-5Wl.'EP`2[?47*'JRLCTDY2fdrLnS$4&0m[f)ZCK*7A;_4&TB!Id_3Ci3[5)9$k,aJGPu,k6jJ1S^JhNqeqUL&l6*UBsd'%o=Al
%(jKG@LQ)]kX+g&/X]l&T=Q0IU&eRQBUQj,AljsT*XRGIY%2gIm^N9ine84YHN,[jnH=M,#S#d9JQ@JTIUSIO;^)Kf%JuXsM#_'EP
%GCU8k7T/CbJtTkPhIKXh#JbkF@RaA`+.l(?I?*Qmh5DpQFFbI`Z+'mnb_`*/p.Oa$%1,D\4AKs?KEmP=$<(!L+\_oa>-s%f['Z9\
%9A![giMW%pJ:sk08iSulo<Hk5I%p6_M9LNi*oGu0R1*e6"P4rVEh&4CYL68@]G1XFlAHk5Th<IMXW*T#BhZq)]@c(,:^)U[c(oE2
%P96'VPNC1`-i^+p0\C%kP&CH."HSS`##e%<c9p&HV<&O6),G<uH4>BVS26+=e*7!%3=<"4.3Io5d23noDuiTC9?%P415:f#KZ<hH
%:p&)l\D#)an\ejjb5eEt&`glD.Xh]e'*>ac=Wki'<9*1N@jYAALk[Z6UVnB`$nol8I<!_sg<NAWZj%S>$oT7`lu-P(N,"bOmbr:r
%`]5R`d(BL@KL9EP&VKEPK7b>f'j4X@h)J8&K"2VmGrc0Z1<Et;-E*%q!eS,1Vj392UCUA.<i\S,i1u!]k)?AR-m+U(Bf7J6Xl:ja
%Y`j']@'Z#^Pd/.`\W<!LX#!q9@kg6-Ia8?0R8>)U^;/lI<J=Bhc:).J-`JtF-bL<3PS[aMN<n:gVH+*dP#BsaM]$:$1lZ2cOi`u[
%XuJMf$`(ujc[BY9iW$!'-.7Lkp_S+=6C&6r7W#TV&3e('&p5BC58oXt)GIEgL'n^jQPeMmk!J37i(:?Oni,]V8;V+5l:7\PhZW@A
%gBll/\&^M&>Pbi7p(.p*gGTt=7!*ch2)PQ:oJYCr`/JeejAqF\s'l9YIdRX<F3.,3a?,:8)Znp-W'?"p`PA;P-A?,OQa:=*@91oe
%@g^A!W5%&L@PS:*JR_A7f==UM:V`[MZ*ke5%Qq(bI<jDc6m[f9A4C;'Xodeg,a].L1s"KAR*@+(-,W$TK_@5SXtA:9VrQutPH'f_
%%V9dS2:2L^g47ucEXap%A%[\pe!aHN88']NW>Zr2VJ!V_Zl2dE,S^pLMJCC4f+n9A*mp5JA"_rZ=X<*Mp?FqV;2'+j`!P'CA5o<"
%+9![pMFI>8o)H1E#MA,gH*Rq:b[1O_PV,7h"+\#+TJI6X*puAJX2T8X;9GMElTm-DHGK#!rH3>dB]2@$<O]non;<(ji"0Md)r^<Q
%e`4lU2jUMr<%UpOP4i!C[Df][+]<@]Gj?K*A<M'Y7F.,s3#2Imc<0k+@PIStFrr#4KK1aZPJhIc&2P8@_rX.C_mGA2[<UZj/9&7[
%b%/[,0q(_@5cXM#Y[:?@[\>f?_Xh^"]U:qO$6n8(Tm;7_'srYq[Mm)D_,/pOOGmp>TpY5"lBae`06Msfi#p9YmSBA%6PYU>c'5fm
%',fCde"<,^4$`G44bu7q6on78QAtTD6M*'h,;6/I)$8#0NYQq%)I=^S0MlTfar^BF"H[d4L("K$,*S$37Sp,`4J=*ehR1p]!lZBM
%L<8;oW`RS]Kc3J$]?ZXE["&Ll+*(`<(i6N#5t/u8n5_I\)f(:.$9#\VQ.hjUd/6S35GI"D!<;^nak99G29_da9PRF.)5e3-Tj^)#
%jU8-3#pB+)c!_*$ZruWu4^J6fTTR"Ap-%uq824meUP56W;6#jt16@f7:Lm<_^_.?SYu%.=r9,iB$`Y=0?UXKM9<OX\Ab!k(+fQ>\
%>nAn`n;V%\L$B8t3oiE22'kX['`gs6#MVKX7f8Zh(6P.=F>eG_"tX6L:&30<5N+P('`pnW_$R1n7,1<MbC]"i;-).\n\bDpn47L&
%?g(Le^RW?gKr_R%7Wp8(Kb281'i2,F6sKI-W/dMV=_4"+EqG-WFB2:7g'9mR<ib1'FHRiE[5jm+\o#h_UP#NOAm5ZY:_AlslPs:F
%ft9Ue;nk/g.p4K5=;>4a-HfkQ)=a*[YEhe-,D,ur%r(>&nQ3/!&'9Vs#d/_ARoOZ']$)Fe'oT?-E!ME+?X]1&G4LLt\3*2iQme)o
%''9:E*AL;_2`SC3'`dk8!iW=fH1_EiBJA=iSF>E(Gb\DPI=f1hk)6&V&1%3Os#-,T"/k(3H:>Ep&qDOX_<9G2b$/j0@@V'D.#<T5
%$Q%?VBA?Ts#NNeV'`th<.0&-HnK^BpQ&X7u=7]CUkjc]&1(ul"6CU0FA"*rJ%=1)!"c/B206a.a6RJ!(!EFE\+80UA#R7B'gOe*$
%Pm02`S3YUiAF"4-.nV&&p)3C:j@>g61G.q<3\l#)NW^1e*("-/<LnRMQ"E"9P/W@d@4R(X,C,:WLS4\Mf[8>ESf^tNgcrn!UYCUd
%rRFu,+p%%UJ-#\4s";?q0EaXmI/pI)h$4T._e;t:6^2+I\mJtEX"d*hk%5tI.#It%QLcs5SG`os:`,VCTW+!X@7ZOd4W5PE"1GF&
%0:?gC;r'$%f&R8)f4NFD9r3FT"d9;S1fZZ$o/0WDlrfh6Al)+DkU/VpIoPf7h4uF)N0K"kJ,'?ulA%b;;*oICQ<]-P@N%dsfG"*8
%k6bA@5N\hi.&%n<.UcgJKVonG=4=c]6\5Zbcff,j!OEA'J2QPCedkto7]Qh@Jcuc;';Eg)aEA7e!N90P,"C'CALg46Lm('lQ;J-)
%Ke@Hq,b*at`'?!b0;?9>(FuBA:[t7[<?=3l<5Qf[;"f[]0Tu8&"7\enQJoqB"PKA:C,L)gr_Pk3>=tWMCP:>m\J,.f[6Mn(fBf>0
%3*h@S8-\m,;fIRrJlP"".K9&0aSr_0g!m\Jp;\*q%,m0W:..$G#[qo'r?-d8P^aj05uR_L#d_kD#9h;\"#iQ6'T+h9374=G,D8Xh
%GTqgoNVl6OPB$/G&15N\N=^j.7L1AjbSq]Vl%K\7kX#PRoKihIir+T;j0BIhQo(6RLbRR3g^mn;3k-?MBYX%j#bt&]$R2)HoY2Nc
%R#!C`(mFZF#U^7<?P)27ZDKQK(qT9i#Xb@n&7IIRr]l.e7,`e)-aL]r&7I!?(F#A?LiYn9n]!LU(n^JT#\-h?&7LO]$R/8bdLSa5
%1O2?@`RTHHKZU.l!==rgs$d;nFMib\HK0Z-4Fk:`b&AMXeR/:b'im!a'.]RY&\c&tls]o[$R\.<Jd[bPqSio,1AVFs-Je<R(f!a=
%?BATQ5+#bNDpU1,(M['82f+l=ET;f,rnmtj-i+<kj=lF4Ds/lH=>0"pLpb"U@J0l>dDMX<I_gfm;#GqfI[n&0J=)<P/d-1:ocF`S
%87*4n,V7XU,)5<>,)5`E&OZ-+&bE7L+>HF!?V"X^?;TWLd+oX6XJY8!Ql&!J?YEoSY(,BJO)D`&`2'fT!QF7-r^@NRW;D5^VpO=g
%@T$uk5fJfKr'hEb8b[rSj6&Y:@_Bel/5E:a\<+\f'`ULXT:^@<M]^JsJW%WUrBV6pRJdM"9JZG`?]7:#",nrn08)&,nHCY%:4+e9
%=91(:0c.fg1/7g*IUL0P(mYPBr2B/oBFN!!C!9WC(Y"hrpG^Y?[sl05Gj5ZR%+,H#S-Ursj,HW7Ifk_AN,QXSb2FG(@oCq9Qt&hC
%$Zmp$of).Q3q._A6W7=$A#RlnGl/Ni0B=iYia:&BW:h$SN5b>h+-Vra7N\].`uBI9MW5NP37:U6!6CgSrZ[HS/+A-5U[c81K,bsD
%n-_QPRueSC*(PFnOQ4D(*-+GrqZ\67JFRP'1.5ItE^[.n`ZjH[(Dn$a0,cjVW:PTcj&KE1A;IsMA:2FW8<,6]^ECX3;=_OKZ]W?5
%8uCZ9,tHOD^L>5$bnhuMU),L$U+\8>^\EC-lg6<@1:sl?^r`+Q)k@t&9KV4TOX7PVI'PfK>QA=nDRgA%GioT*3<F#;A!H"IDic^m
%VgM@aeFsoZSCGRP`$r$hd0HV?(mhaob"4&*'<2Jg(TXWT1Da.20DIjaA*JF#b4rI_?CBVS0#2L<6LKh8VY#To7om0-Qt;.=T]O8;
%PRFnCjaG%4+o:2a+ajBX+aP;u,:QIGct,gflnY%@h;Dk%53QQK?gqWaDYu7Y*rn*D*o.+ah$3+iPqRk0>N#t.N*3bibRqNc5;6\c
%X=kPL6n]Z=6sh2qV)OX,pYK"a52cTUNahK<dEGRs$dK1&#LA?iI0#c]1W1*(R2q+?OCmeFNG59R"uW_Cd0J4GOhY>L;M#;.%+,mD
%bZDN@c&qeE$egOGqI5r!-stnEXQC>1)82M'n7M"j075Pp(u,+(lmlFr1G4&@S?[@Q0[A<=^*%'9a:%)L#s#Y+c><CN_)Y#ofXua[
%OiYQVko<i-q1^s%]XkAn4T'*$1QR>&g)8<Tg_lh&hAK,a!1nHqh2#^P$+h>+C(p<\4S-Y)6-g8$W+XuaJN`=d]Pu2Elj\>S(UFYC
%RBM!*TD<1[p6gR-!C-2*^!Y.G]F4^41ZX1<VTEiZTHSS(THX.uTHS_lTP5b/+D=qp*u$P]nV0@$NGffDCmu4P)Q)O&#n:a!6(rS4
%]Wogco.Me>,R<(\L;s)c_P+Ba:-:@6isQFChLmOM1g;;5OD+Ej2^XtF4l2iFf`*U(1n948/33gUp;06G_UL2GF9;=$7Rkj^q*:_6
%m(BRME/@oZB_Y>@F>R7((H`V]kR/IAO6m=:L(F&G82HKO6_r,&m#.!<gThbD%FGP0%FGt=:$IY$L?Jf*VW`Ys:<^.P:hb<s$S0IT
%qgbO-b$JaqN6;ZsAp!3qQY%bYT*:TO9]1Vl7d/b<R:[8J)`.G_!ADglW=^(,SYuc0C`7kf(N(-7Q7m3G4cF:>1pm8dSVCqV`D4=Q
%I=\:6-G%URLuNg@dg/(LnC.0B(P%t!!^?s*l1PFWAut@9:fE9:+DT-c$Up'>J&/'4qV\;$]n+ZE]o^aABHn@4BifOt]YW)1^!Y>U
%mKKN.B>!``M3XfR5W.OP017ZUJJY+#j8$Yn1N[blWYpr1;:TJdr..iqPVV+*C.<ts?o>gB?Xu#uo%q`.,m,c925B^aE&A^-6<EKi
%$XV)6p'4sLk?\.(86uR;7_V(uCGnGl1"K$6h&'oS5!Bg![XPhCee#MKf'Mr*_,qr8pVL%-q=k>-S]JbC``P#WF^qM8&%XLH80r[<
%enh^AA#p=_3*[;9A?.m2CC"8aCPZke27$^5N4"-'`)s@>pl2PuqgL6MpoG:OR`W,[A'M+3)e5FpdlK578.j\qCF$VX(i(C%Di?PX
%Z<nGap3-IDXOY)S_H=.$i.\G5jFa_7oYt!3FCVCjdFt9H.5BEM\I2nAd0F0`\%+3D8a+5/A'N?u@&u(608qd.mY.pc(k49k8:SB.
%eklA_`]CNs%ubWT@H*-KAnq%Z=B![5(i*gE$Y,04m0dDU8AH0SSJZ:U0\-fK0\2(Ck&629=3?6%Ak)R4=;,'2_,tbIh&,HG@e:%<
%SO`kZ``OU3T=HZ,M>ZE^`qg(,phsZDkrjM]edTdY-u2<ADO<:#SA0'p0MlY[2-]S+88EBfrBRIsg4*P5R1m*HehFbNBPU.GE,18I
%]JUsA^bq)J(ZH?N_$b:C=8l[3OXYO+XtcY(e2;WJ0C0T3NuN9`#t;FUfDh3[boSIG&+l;BHZ/7.-KG?EAcqo@qAQNf%DSc-G2odZ
%eF<XV7]ba+^rG!>+P7Nc0*[mHQQ(V&Y+-:84-C`P%Du5:kJCX`F`RSg0l_+W2Vl(dM@E:lZ.SR-^0kb^GGDEO/\g5rs-Odq25Kk.
%J8D*o017]3DDrh&V=DN8ZgI2jb/Wb[:ta(CIULjq^O5(I).'q*fka+R6"WUg0J@)t+os?52FS^,2Pi>n)aAPaZh`5i5+=3L!OOl?
%2aSIUqLrV#V8"b=m%A`YZn]@'PW!.5"k.(Hpqg``ch.EUZWm![e7MMI'<2N-oS_8^Tm^FY'=/Yp<h#fo<gs<YNR_Y,iu>$N<6lMb
%9`WCsen.;,)m9,M,rY-[Fnu?H/X4h?f4Kfu)m9\YjGVWEoS(nokf.C*oYG=\G^88U'C--']J`L#%pk_GR;]_r9q`6(SN*Ha]Jb=A
%2dRGqs2&P!G5?LE[1f%n>^1*&65NrIk40=lc-(";2Lk)5C]@mfHrCs`!,O#(eh=s"@Q?*_2RWJ&Ct$<"J@5JnqP(DAIDN>uYI\`.
%'&C??b!*m`8jC[>8MBEg*diUL+o.e?P>[c$pblUd+8e$%rtg3Td=;V@rK#A*[>sS?MrCP&qZ1[aU/<QX2aoZaS+hANgt"ah"ltF1
%L#e!P"m)U#rkWVbgqI1a,l4kaR[ZUa)pV1*L$.U#+$_b,o1!gP0^sg=o@7bQ2`KFueGUD+bl`R`?W_LdC#Op7VW\))1T(1<Fu'X.
%JT`:'rkWbJdUZZ!)@64Ik\a!Vn8@CX5PT+e^B!^N,5Mu3N<e>PDb*&/De9O:+E->DDNqVl(Dk;bWL".@q]B<"TJqjS2)bLo5W&'J
%EH"@L9LrEX*>!`T[;h*#13D7'80Ilt+(@V1WHbR/cp\_FCTCID0#TA>mpFfnHf>gB\(\U(hYm>2^RP6Ak%>85*.;+SI/>F.*odf0
%Outs5)SZG&%DeuVTb<FAK_=6ASi42hZ\Dc<5eDK'H;*I-D(3o=>0E7o3I3k60q8DEn+JO'k7/+&+a]VnfrqB'N?TB&&>99s3<gh9
%H](#?lb^2$Fdi-oD`<D>E"]Hi`I9OU6Oo+Z#>[S<p;6$o6#E0$724(p<&H%4b1kp`<B\704VZ^UA>_^-m?KK.=GEUTr=^?[R>f8q
%;rVYt=#LCF]A>.23Z-OFh2Mh;YC%)NALP5o1L=76CJ,8Tq\%_BAd;38"#Ub$r#^uss-3[C@d*f5Ae@j\d>#DGP8BB"o%(j[AKb>*
%TfVtr72I:ZEB#_*]d<n)3.e"]OX4/TLUud%BJ1EL_GE)%F7V1WdEV](H0$p$SaKgmR<(M^Lmn#5<gZCWjpG>!Z?l,5qNo`QqPC.S
%XZBe?4m/Rn#,sc>:fh!1COI=rHS$JP#QAnTfM5;%[SjRGlSm#d\YQA&h*,In;(7?El.(4rCQ:-$3kY'reuog1'0$647.rB-rKcm[
%j6,9'cTK3E"L4[-+)n>&!pmY0V%a)Oi>p;@%AKd],+G\`;$N798QltiMb3CrMT1miS=62unh_(J!=XB.63CUJ`b>0$MO8O?aF"I7
%.rG'p0bom1V4tdMXBd$>d0%e]9&HQ+F9K$a6Nm&?.;M3_^n?\LK[B0EJcS,/pQ%a%Rr1RBVGO"YX+ODM-5&T$7<U2neDD'CS^dGF
%eg,"H>J+0Y-42>4!909Cf5!-.^t.:mM(Ge:900760#&$]TZKG=$jo^2;:Z36?Tj02Q*Z!9&L;DD?e79&U(`8%dQ0g"0a]=_Kk2YI
%:mS,EUea##oN&5$(N#KAZ**A4pcjAUBi=rMF@[iYq^IDaA7K1:[W`.^0*$0!SngSV&>D-RoC$0'!\R2!4qM::\?0e+"-s,I[W3i-
%.lNTM1'4k&4,+j*TQA*8M4uu]C^u<ukkD0Rnfc%qC.DlUdPu@TU7'.sfeNX%TtE#%l?'d_2`%9';K8KuMlu)D&;&es$aa@uIBYJo
%A(&M'&:&'fX<lLMFW8mu`N%/Cs&^e_VgWL+^@YQ9dY6ee%3h63-Fl#I1F(8+gST?,X%fSL)sX[]0IF9Klq180E<T>]H0J_cKgjfR
%:Ha%RUh_G6AmK!u!-$><O3Phn9R=>_XE#`k@]/$5qA=C8:6D1!ENl/KN]`H?E)K96=d8@9rr/ia?0Q88o!4=J5%_`L`^q4&.g!4(
%q[%jb[>eTE(/Z!fMD%SBH_ViqAWR,"^>98`#iY9ULI!d>Lh'IlKWMq?8@^#_ftC)tSb'_TUAl4^/X]nKbYX_HnjCK3=RZJO!6eh@
%#CsWL6ZjbE=Wp=pEmE(mLm^h.84-t!)-2pp'V3.3AkOnX2*ph\'d(HV,(*(@9_:4"FOe8k7)/b$(\>lQJuGN\oE[lUmJKs,G/gKD
%ZQV)+h=6LjZD];DqO#(LnCK$d,l$[[2L'!,NhM,n'+Q?g0Sd4Gq-j>.cA>P6!d(2j1ad3DZ9W)H:,*8Ck\QcELkc2_"_58"S8G6+
%C_S2MA"\Er/mCYB`R<:+/#9,hO;\T$LtLIFS)pW]!Ad]\1qXA)n2;H_[>q7TlEeG52uV<*H!Y/m:0n`lVM!&n:Q;DllWWJ9-4_`m
%":+MFgH]Ji@B5Vc@=J6U/Z)!f;N5JPq.nD4`q?r4+<aZ/'+HfXAo#WL#PkS`"S;t6I#-;PMgCUu(C]u/->^P_JG?ri_,3ZF,@alB
%dH*]&K!G`lC;D5m>B\&82aT;spD2:MF/n%T7@bl?Ll,[O6!=lfhG35sOuqDefZ6=](J!0l]@0ZBk@O5X.)@V>O_Ua:l@ro/Ld7sB
%.dHf8nuSs-q$s*HBU*4#VY'-WGSt[aBi2oe+2.nTmV0V+W*kd,f;'?:qfY]4>>;S>+j$&\D#`MEXfi(Wph9K1Vf!Zp&B;A3GJu90
%e$nO+Nuq9sUd&dsI6.gjdksI:S+f/\(Kf:F(Bu)+/:#JJ9t*;,CX@E7_1\LGNg*:F2q/b:;]e_E#I]KUeu:4oH/Z)F\Hi14QrQG?
%IHkRMDJ[GKVbT19o#@&tCOT8XV#`H`6l_ebeS<F^;H"HP#^aBVM$u+YX@u7@[=f\Qqt(8BjZ_;\B,^os_sU^DN<<QV[56[j%Vg91
%IAte!KDqrgM:i(]joT/^Y=W:n\F_I4)R4>U1eAUDm\=!Mg?=+Ol;;4q<K[D='%8i-+<[_2?Cl`d9OJcp;q@S/<Cj"<2Ga4NTsKFR
%Upm&KfPF!bS!e>2rtF^8pT[rcWiu+JO8P``f?Hj2-q3mA!F_^0cO5DO81e'(<f,_J9c(>'\R-Zn:>!,*XDSChmo8#eBeb`Vi\mpk
%Nd<8J82_<sp(eg=bu/>-5c0"!FH%b0h&J9+&!P,jqmI&3/U47Q>N9LM18-eR)IG#JV8mV3.)g73TYqihC`f5l-8:R/9X6EC<f=/`
%#Uh%c=F][>N@c[0\Hek+%2mSu<"]"WD2Y=u.dao$69k&93VQjPi+%TaqJe(,6U-TR]@:W"DCA$nf.I'(/2!RI[gOV*r&OM9W4^`m
%q#HE?(u;Sm2%X_-h.qA*.RqUlks8l#S[*H0Y]J;<h?7\h"AIs,DRC&+<nB7c]L-b'1V%\s9/1;nqH]DP)%?Ebh$km@.nk1)++/q`
%$tc@*Fm?8ObadX=,Mfkh*e%@SVffpTaNMFT1J5QMIL]S?KA%rIlkoZ<Gk5'!9K\fe_\,)/r%K!o2\*aR2<Z_9%L"sgNC*^WRq1dP
%[To,aDilW,g[Oa0oB.^527BTe]b6YLFtMBYYH=)'XZA*7ekYh?=k<_a*+^Kq&^9AoA+J!+>D6=iQ8cbLXQfB3DNd^(kDHkr]V4_H
%E>u<SN:!cf^P2]nSN?2]b9<t$chR3^\;@rG+3p[S#)CfU*#jZ[lK??2@=<k@hrR[r_p:=WjD]p@IVlR9O3,;S3mQ4ALol;R]5'I!
%j6>.Z*05QPq0tHpjo:a8.'k%ehPBKC%k\Zl(M.5i$[t_NM-QOJ'2,+>([(@4C#,0JCd.C;K!2c`^(']A#_!c:5W;608WQ7_6jU@E
%)+B@_FSA<hJm=W)j?A;@RWj&k*L''?*F]IBh:([$"4Xi+H;c7lZr&*KIHOcWZMrKH;AR0pX`\2m)gQr(H2b?f-1,/h?YCt`'",GA
%Mgf/lJ4;1j`RE54]lI*JNTV0F`XqHV.dZhc"\j0c&u&h_N[6X#Ecj>VQ3Dt!<_K)8<smH,2IFIEWXYZoQ/-iMgYg3VHm4lM*L\-\
%eTN:+>%%hO469+Ld1BMkpf*lPSfPpImIHSFY12>-Kp;YncWQ[Ql\/A3OY>#@dRlXeoCA<Cj=j]gI]"q]?<fNAiQ4qCpW:R:EqmOI
%WZ%?mq*47./'Z5YXQ@[HEmbDjaMb3]G[q#Dl.r`>q9%#h]!`5s>:EXbmhYRpjS.BUG?eh1^/rP$7p\j3o9O_0mXoU5e5O:#I@nEc
%q#A!\[RjTlF`/NU7sjV_/"+#Y-I;IYlLWF[\,TMb"Lrip%KDkr=VI,C\J7@9<QMUh0Z:iJS\FX>o0%d)F(BAB.lke@qPiBYC9.3\
%E^]7aS)b>h-A_mdXdggf0Hp2%lI[XHKc28'1[YZP@hJ2i;dDL=dRjRC:5mCF(@elX)+Cm%)%@C-2FOO*lTumg-n8jR"d3>[#4u8n
%2hFL^HWo-AXk\oOR&o.^b>U@C22O6S8-M;T:L,t*<+R>!(KYV`jXm>(]fK;IF!c9Fjf1jGP#n6oP$/:t#W_l(WNV2*oO8]D@]E@*
%f\&-YdNAufg1(Gu;o`4ekk<lU&"d%:'?TPV<jm9:AnRsdpY"eH]m'J/3Gs7M4*0@!KspR98t'P*`.qs(FUkG7d7sAV)jf-h$aiu%
%1fGdsKN-k=O46C,ICb^93<,j-0iZ-IUXg.p.*i!65X!jDCUaKZs2]gIoE%HuSuH9;H!4B3kjq-a<:_8]SgeLp=EE;6\Sj#j<fZVW
%Gr%4sSOr!Z:<R"NN'!B>*@KOn/h7=-GP_<o7!>/Om5>mmYkFlP)E@GnN@n=[gr:IA3d*%6mmRTl1HU_s/<2tN?IYi<O75(Ob:"e;
%+)-:&7(,N@OCPTY\P%g.0sbpC-jeg(4iZ@)ILc@o*JiZ4r<X&%,U)!Tq[ad/g!]g_PPn:T^$t\Ts6Zg<<Z-uf'@dd/Kb+)`L;tE)
%klZ8"<r?jp%tI(qTT.hsSMGtR^4E[],_FaGQ+(5*QNWABLfAFgA@H^`=g&2<6Blf9UJ*4.6[_*DXOb@mNS,b-#0D0;ig1)k4#,L'
%E*XU/?+W=d#N^C6MZe"XhMQ=b-kU`K'&NiC'Xf;Cbh03X/8(8*_O4p@(*c<\V&j`^%U%@-V31^_ZAM6]6_+@[=n>20K1aPOA+r@_
%T<rT7orebTS\T_O@puN=@beG[fa`1fs,gUiIP+5b-F)]q72Y5VN>gps9Ih[<93!,?/VKmLNuB"S1m9*J+:4]s[D/O(l*^E%O4&5D
%$haRXYUND5&7#!c1B(qYf[[K>=:>D\_d?!uRZ`8c3>U:f?#-7hr"7nc;%F7G#fVKD^Fgec_?LE302\!%/lmjA=<Ea=#+ll8:mbY?
%^*mB!X<&)'P@7&qP_A66-RM;`pV@W#.#haR[`5c'1k4nmC&GgB734st]$$;>25AUurtE3N<=!D1"8`2[?bNODa3"<F*^RT\Z"f(j
%Lc!a>,tU1V8Ug33\20`.rK4HAI^&8Fceu#T,TI>j7g6Mq*]d!r).WE]KLqHFDDU[NB.G=gV"$7(:lqcJ5Qq6>&KeE5&qQ_\[D>FG
%e9I+:Y.,+T+u$_?6LDON8n40/lP1is:gpVY'V\R./aIk3WhS2&YD<ZWE:M4L@DgU/L;CSA5L%0S7g9im;6M-2Z1>W\L:WiM*V0:I
%>;"ktE@1OiNSP[Bi?&A#(&[2]?bea_^9LnG5QWX?l]p]VH;1+(F=V'7-^f--F(/4`[1H$t_>]SMIs%k&19k<DpEE5*]Wlg9Oa5Bo
%LYJdcM2dlb\_s[HMjH4=P[iUOSC5RJotD4^.e(h#;keF4M#8H/SX4e!-+7lt3i@(e6'N!H`_X8oZ;XQ>j)q'@:l<%J^COO4!Gja.
%f2#u?RS]6RNc%bLT\OMTW_@j9A(UFt1^&.4Y>(H,>:]6rboo\.Q?=jiI3otRZL,P\klo!8p*%<FK(89o[*_K4PLs>K(/i'M'D6FK
%qs<>3Qap(mqilUBBqKtk72PL(>U$dYkN[&\T=u$$G+@!F(lRuLcH2]ARP**`T1B;/nmNP(e8*5k4Ye7LFR>T%2`@&K".@EB8ruCk
%Yoa_jB<>9QnhtMZ\6[\!QTCS,p?+</k%&!?daLim:r*SQ.hF,/n=.N@5`RFPa=?hSmSugsq9BRbB-EC\,)F$($;j,jIZ*RL']SF>
%("\:**TmSoA65GF(``+@\S'Gnm2C`%Vim74D7aNR,cuNr8#.hQLV[/1<S*?P:W1O]'2nIHBrUrgKc'r430gE]C[^t$WToTko8pm?
%A&siUF4&9tJG<N*4`Puck.YPg&.I!aAm?OCp*D7JQ<`7TLr8O&]/;O<6cXmkZCm"Y#b4qM6hDR3UuqT!hfLqLqTojCJWU2I7B5qY
%LPl%UlWuoL+jZMC-%pPq#,9+O,$*Ok!u[^R%n#R3`gj<I->>oQ![A^VZbtufoVXHIV.1kF@OiOd68d`[`f-eOfoDgaBqI<rO)L0:
%Wm\6>_MZ:D7'5^Q"idr<.29NUPPH-F=Hi/IeUK1c*dDNN!Y3bNI+Kd34sOh51QF54+CU-1kA41+qI6uo*lun.]gKAiNI`\e]U+a`
%R2$S58hR:-AjtBc8P*f#QlD9sK!o6@p)*02R4=S-Sot:82rsT(XTWkd?O^3r&Us`XV[e->$^MqC)fOhiXU3;$oBC.f*j9jV\Aos;
%-LUEkb<Xo/"<2RA,K]G<:P+Wel34C3O*P/LoQpYES&`82eP%cg8YoYf!"QEVj(9`8?ujnBc4g[T6ac2?;a^&4KA,_>=)_JJ@EG4q
%jOc1m2t\PN(_=?g:0cjQ9FL-s:nA$KT?Leb6BZ/[h.mk772WaKV1TJWfQLe0!Xa@XT(:Mq+@Rm!T`h;-Nq^6kZ8n.Orr,iOhT?!\
%DEQLcX^$r_O:3/A-FdH'![$/IML\o7>I3_7,a+$GkA7US5=iGqFVjk1T`+o%0_LJP`?gDU@?UH%?RGd9BW>!<_:&=2L.1g#p:,dJ
%Fd*YFBRV-DrT6.",?oecIGj[<Kf%a*gh/</X>&LD2>f7.:q=-S6_/n(#k.5G?S&K+*[UrGJ4!>%bI/]F/N+J'3$bKdg0Z$g3K"r*
%>UV[hU1(["$mLL:c-%5mj[;R>A<IEs6(J5Br>*p7G)(PqRV<m6DQ]WD/ChLuQJ1=AKrC-K6,=)%0I0I*eNI8N$UhL'Cb_*S=S0Uc
%)Mj+DBEou"j@L=$[jp]\S^9)M;D6eoke;s"/==NWI.DY>Xh4]:Hn<a)CJ/64rg[UD!M]b:*Vn7KNf<+:iOTf[,+T]o40AV3i"A$P
%+<WhM1hg$aA>6qIbE1\IB<FMl"Uj5*0%q7W1tk15B,[s(+knc"m)).e_jPDi*bbma%^)H9baZ_M?X09Lbo-U'RbM8*,hRdE7hINY
%T?n"=gnb'*>qt@]"^C1/Z=B\[-#IH"ZXTol;[/r9&TD=-JTqB7nM]S;;.@0j"O=n2#kJOo@<XPqN<lFPNINX;3M[Bm`i_H2@.Tam
%[a/lL+t,>TO*hQH(-R8:1miR^\jDDB:1/`+,`0SjShS=V^h&`YZA)Zd:;PU<?Zg%*&<mL(@>t)I?TW?uenal5CfRo2gf2BC%,`Bd
%.Po2@RDgL88NB][Oknc$)6XDuGrZSbXa4knZ*mc:[(OMj</X89X):W`=_p'LEfHfi4J<%>L\`rI4Vm-KbS[E?`2>(#5(BA$g4bTT
%3SCd_)-a#W'g`N-Y8XunqOGN8:Kr2*hm_)n:E8(5?<\rt?#+cT`Lo*6^5m'YB#a2og-K&.e'I=g5VA##gZq23`?$C!0i%`Fka@Lf
%U0lt!<VY)^%GL.o.i?h9IjECkM.aXldZ9CI7jBp2Ln`ndoH&p.-',*%=u3_)q@7gX4-+gP83O+S)\*r<cNq[fB\5laU2c*PMVsl@
%"DMa`@;5ejBJ6E<dX2uZjFaER;,2%>##=(Q]$T5Q1"-E4Yh@kk<46[+LU"7/AXd5.LjK$s:K@;`d_TK4rd@GaKIdD1oZPU/k*ggo
%gEHg1ju=qo4;&2fZYq(do9nk%G&SloSR#kSm:@n3daYhDN.4](6Tdb[n'#9H(BU\oh#'Xn*L>Z=lp')ROA)O<^>+@<HdhVZlTj[<
%3&f+Mc:7Db4\Q&JjHMcjLDI5(CtBt3e:q5/_oI=mD$@C)"Aqa^/"k(=T.@8(Xqf9Hk!HXek]3C_lS8hPqU"D(oP</"h/le#"f>?b
%aEA5`&o;3$Mp,]+rML-RPfnL/^Mg)3^\d9=7Gb4nGhC%a*?OqEm=+pe6LMi8,IuY/A&LM]E6O4F%uprYU'uCG'onYGLH[,";,4f5
%F<fqEF&F]F6*NKmC<0chSBn=@M1G6`pR5PIr:6AFL\`gBF0?5nffHAAF^Ab)NZu^=?CqWM=fe.Z389cfe=UK\2[`pA1<R-XS>!!s
%II%g&dXrPHgEI#Lr;KWS>eg1j>+sBZVVjSENgQi=D+EZ0l.6ZDp!`KC:hT&*nFa]nNXYe6I>!^6S*rW6.:TgVr^?I%S$j_@kl<C:
%E<n6nfuJAA0VGE!lJkuTjKiT5FS7CN>5L;c0(SW$*uF4`]1$5M@"%Y8CgUW>!aWZ/>?<?mcH/,0'f>X5glH=VQauP^J7f-+!17U0
%-rt1Nb%3>1X2=kB%1C.g:BO#DE>p;E.Lbf#Nh.r!0P?W-Y[I?0e'*PfZX$/!>i_foH#MB6TB-&TJh"='5V5,S=mf&ON7[V\G$\uF
%-W^@dGqmp)EclOhDAf3^VIWo59W;FO=JkK2].=Wj9$f+f=dbeRP>VTBo0$s!_t$i;aA0N^U,.Fdbds.H0[4,\JF%^GUYJ@Za$=o#
%3]$1f.(`JT5@]Q:?9':_KlUC^<NCn%UYM>aJD8OBNXe1H=\`%]BK#i.h5VRCpaoiJm[$h(oTn<);Z^si_jOH#dI:)Xla)i:pfXbn
%ns6QZHr]^O'h_Cd6qR9=4I2_WM6d"INjQYRb4bOTpsr)K?MU&6Fe/GPV3<nFma*KQCscAo9cKBt9$G[:4J4J5C$aEs0EUk%QJ^Bc
%"sq9=NgPL*kOAse0[4L\c&Qfm+('JW=9t,aFN\mTjN-a2d1o.P*&/9h30%Ck[TCbicF-g"#`qX(30BmPc@F>44e.W^K1?p?.DnuP
%@B9pH39"43AQ6U[<`BLI$2<5Y]);;>'eaS5@Mk<aeiJn0RM$/E1;!q(OEb!Zi^O+n;JaWT*416&ouVa7,)&d\F7GDRE"'E*RWJG3
%T-.%qP81THSO##gP]o!n0s&Y\4>%UX[`TkmQIpT/l!4[s+Lsg:18a1LHLsM1AflZ-&@H)+UN2OUF8cHY34_XMgU(c6fHp-rhCo)Y
%ZAE$g'*IS[b&5O59V!n?G-Z8DQg@5\#R0Sq]Gr_@CGq%RlTglUi&(XRJJ5&G@0f-/7E93adPYn"ppRW<kC[gG0STRl'ce\jc(#7D
%-+dMnMSsD5<..giHXOjMTObf\22odAB#^"BDGl5?=trKI8f3#086oD)A@Jj!_gPs]dI(Sq&!\+a&HhTN+XfW.l;'8?,t-bQ/JdG^
%*[,#p@ugfp6s[d(gC6H*Fpq)]o>)$'TV<37IQ\7,O#2[.^H-rZ7FGZ6YE#7YT7+%m2hI2d#qcsE&nc3,Q?rWW;*?#U+gQGf;BO<H
%_Q54hrZ!YWk_GR3Zp9j(<)n/:@N`hYLER@&+NfSTEgUGuL_AtsLjDVsU9$pTo4hbV%6N3B$AS6U%\eW`'VcBYLpD']2N^7h?\PlI
%YQj\-eM#cEPe^2!=V6IqZ;k9(_8['kd6)q:H7o%ipBnHO>_nX$)D>JHd1I]#3'2d+\1T!_D[rI/dqQ\A96UXf$*SXC3$=H)gPSk(
%)hbMt2FJ#<S)H.-_<52k?O08G9,-)B3J8"nZ"uj3#,.iH0a1M5(eWF3.U<OETk(:UP\B07#EA!pJsQRm=Z_=e,YZla0apJ'<fpm2
%'I>^j`;L5W'IAe(C/RDr<ma14?\_IBeVhoH+U^_qOKCQ<'SfP[0N=#^VSO[qg9T8M;uuV;%\qf?j3g<$cmk86b5J)C%U(R/olLfV
%:B>D$*RTR/36LnK/08pbjSEU*,7$fMa!Nm.EXuVCE0T`<.5`70Ss/M+au+D=^esN6c3KGOl\")CBMEXqj\daZaF[;B4[bR<TTi)R
%HZUg8CNV98P]CJ&qnitJZIVRM%]*EgM/Ak)8r3Y<4&'VtV<$>E)aZJ3j]]Qh>Xq\pV%+Z"P^>VSQ/JJjScce-@,JCI6;*\.0S1rm
%-F3+I]0'8BoT$8N3jkF++@<;9SaD7F+V^Z8Cts(>,6V`-k7n(*2:OYj^Q@(iLuPLkaR2b_N7WcgA7PQM8-hHcWI<G:+W*=ad74cn
%e1b(B34"8MJk20W4`?8j<kZ).0U(:&?Sj[D1S`'2Ur-uq2F_Asbd>>s(nh8ln.ihl4aq6;?STOg['!nD0O5t>UP*Wd4Bc!U;e4;-
%;12G^LetL4rk<gF5g(2o4X:sho[]X!0>55l/U5Y=L#<!frF"N1O#K20mc/)C^&.Tk[I`k'$'#MLK,?L-BT7.RE6t$b5-/'Ha!\h0
%'t,OqMML,_XU$U>#S,Q,K?\cpAM_RtY7H5;[f2uJ#Ji]!:WqPGTWQP%AlE]uH?K:(m9C\bZ?pF/SJU!pK8AHY]dt=1kb,>2dAV]]
%TY8DMF0=\DJArKX(ULOZ8<pPbM@i"XF%A2IkcI'f]ditG"s$%R6D<VFb3Z?3<CJ^>.+-=S<D7k*e<42&H_WrQlkGkeUl56DV%hqd
%_G\BDZih>cX,[t5;*d22=Q`l!Tn6,@aES%(oSs8nF>\hFM$d_46+]mb+@r4XkdGIsch'tTl,N6c>S';,5<,*g$\Cot^i=lX>S,Z6
%croUn$UQn,b9\OV"X2_sh^'>Sfck6jUn5LFW^!D[?E;pOG44I/jQf.>MPl0sL!Q8W2Y"rnY'Vc>FlKJ,74kU(eugAKQrRbqODInC
%>K<OdN*h8"k85V'Ocs)]Tlhpb0iQrg+ZYPA<h)O/.cS.\brnCF!;^H]a1rf`k`\_roroJ`*O\3A'*PIoB\T%cJfafa%hieR&8F0t
%o.?,m+P,`rqktD5p\*<qdC*iQ;u0#4QEG#Vk`=P"\!]F^q=8CK'/,KMSDGAS9tf-64m7h+bYi7CDb(F$@bO]p,R>DeU9/'\"?#kp
%2X_r<"L3g>X]U!0![)pD;BR6@9cX35D-]kSlo#9b#KVDI99'Oe/ZiS)gYrqr&>22Y?7af!?@dJ<8^O43^7H4*ipQN_aB;`A--gI'
%WkBKY[7M",VBue2+UM%Za1t_rJK%[qG`)krcASIs(KpM"C-E&L!//$H@0M@8FPkZUaV0KNIPn:-Aq:U3Yk2[_K&?XtW<um@6F]9d
%/O%:B[*D8-Wa7q)>AOXYO,+*dO6aW.fcCP801D2[g\R<h8=a(u)(>rfBl`Q6=V-po2&eD`6's_#C;jaMlr))DX36+1hGnq"L+EU9
%lm?'raauc1'M$DGqk0`f_!@'cTs!7X?4EEch$6Of"BG$ZVN:s9<FS5KF?tEcPBi)NJkuTn[ti<6TaU!,n"*2he4gZo%$-]td4JuX
%#\i4^59#h!9^X:*$bC=H`rm@(.im*Api:5Zh32\"/p:>n6"RdeMF$LP^5ZpS7ZGX6[rLg%BG`eVLT;X"m7rKha$=`.YAl&]7-UAM
%N`S^]`Ba9\Mp$^&@i<\a+KLs\D=TOk>nF);FO4d6+IJ%m-&_'uS*CCNUpY.L<]/W:9brD9la%\qPQ`5"E,9udLF`]MYl^(8=jY0_
%,S;S`h<i`S=,rpTep4f^4YWXH\M;>hBX)?T.r$-hP`NdP&21G;*C+JeCQ:q9*+ae5fec)_2h(IFm=65j^0FkoFPLe4gr>.'EB\V7
%^'I,(r`tfD,@ZA8Tr=3u,ZRZ2`<iGL659X(:.kf6`Q3??OC1$WOA#S%9,>.h(Gh%TRFbCP^F0]D<-O,V^9Jm/!Z!Mhh*aQ"'a"P#
%1s'RG$EFbLXM/[.TB'CUEJKt4F]=I!cr;?q&/3\#<dq/25S1;p<p.Dp')nGJW$OjNo;&s[a9t/MX3,lZ?r0f<l8#LZDOKMl/?b_e
%5_n;$"%*R5kXcJ1j$PcNjZ)tqg1kkVr-EnQELR85Vaj@H3^()^Sn?&pH^`%WnC*=X&MVc^fRgAYR8t.Tm7Ef.%q6u&p)DEtF(?`E
%_'kZ7EclFjZ6MW*_d>^)\0u#MG-gH]ao+fp>eDD$YtOJ,b2_ibUT'LUG*4[c69@,mfcEPM+MR/oJZ<uk\=fj2o,*uuGeme%L1sDG
%TGo8!N"D,#gEP<6&-464CAHErHsAbqOO6c<D-CbD#?h+"`fFi`LfDJ)MJQ*WbCA/,eW$e7`7sRVmKelq8$7t$[l@R0jWVUs@Q3Hi
%P`l=E<-Lb!U.aeq`V:]Y/_2a4OP/6=)P![!fHOXs!CBCNFUu8c;Q;g/:%:pO5X34Dh#f!hPj'66Wd(C&:m]Yd$(`G,4Q/74k?OcI
%H`\^HrBJS:&K!QUWiZVmRHg'XI.*pj7VjWucA8P2WYfB@QF?/oq(-=C2ssX7JAR(U^Q5+?*?XOpU^F,hpo[MjX?'L/n'i&MKcg%i
%ESatil1d.1OirfVW:CW$md9ofBGdjZ$+cqt=.kYkEMQ4\Hka(*=H(,#0eGoNXA8lV[aOi/me9pf$/BS4G_1N1:3ETqjN*#_!FNFi
%EMES,>s23ZW3V!d.l29IKe)A"lZG,Z+5j,LT"n&8*/ZITd)N"6L*\An3nS2tV8+gU%bqD8fo"?c#'e7f_6V,<G.__;^8OQn;6+73
%Sco^)Z+@6rM,r+Y@LH)W&N!K([Fq\0`b7f)=[nG#A@'H4V?!Fd0T@i@2>UC\d4Hk3:om^"Y"uB9E9NOE2h+6te[mdmkYLlh]mUad
%I;2gL+O<MOpXS\D7u"#aeE[go]Ll[Ql/'11_W11`qn%XPIQIK%p%=Bde%b)?04/n?__7pco<7V\5G-9jpNKCTVn^Q5e*H>SkNVU9
%fD_\ce,/t$oBlL(q"XRV%kP4=/pMX9qX]dBGQ.]>3:e9~>
%AI9_PrivateDataEnd
